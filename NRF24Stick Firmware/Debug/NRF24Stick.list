
NRF24Stick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009230  08009230  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08009230  08009230  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009230  08009230  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009230  08009230  00019230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009234  08009234  00019234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001030  200001f4  0800942c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001224  0800942c  00021224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a28  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000332d  00000000  00000000  00038c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  0003bf80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e18  00000000  00000000  0003cf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002318b  00000000  00000000  0003dd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb55  00000000  00000000  00060ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3bc5  00000000  00000000  00070a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001345dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004148  00000000  00000000  00134658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009150 	.word	0x08009150

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08009150 	.word	0x08009150

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b092      	sub	sp, #72	; 0x48
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fb22 	bl	80008ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f837 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f8f5 	bl	800047c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000292:	f007 fd97 	bl	8007dc4 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000296:	f000 f8b3 	bl	8000400 <MX_SPI1_Init>

  uint8_t txBuf[64];
  uint8_t count;
  uint8_t s;

  nRF24_Init(&hspi1);
 800029a:	4816      	ldr	r0, [pc, #88]	; (80002f4 <main+0x74>)
 800029c:	f000 f954 	bl	8000548 <nRF24_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_YE_GPIO_Port, LED_YE_Pin);
 80002a0:	2104      	movs	r1, #4
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a6:	f000 fe3d 	bl	8000f24 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED_GR_GPIO_Port, LED_GR_Pin);
 80002aa:	2108      	movs	r1, #8
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f000 fe38 	bl	8000f24 <HAL_GPIO_TogglePin>
	  //s = nRF24_GetStatus();
	  s = nRF24_ReadRegister(nRF24_REG_RF_CH);
 80002b4:	2005      	movs	r0, #5
 80002b6:	f000 f997 	bl	80005e8 <nRF24_ReadRegister>
 80002ba:	4603      	mov	r3, r0
 80002bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  nRF24_SetRFChannel(1);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f000 f9c5 	bl	8000650 <nRF24_SetRFChannel>
	  sprintf(txBuf,"Status: %d\n", s);
 80002c6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	490a      	ldr	r1, [pc, #40]	; (80002f8 <main+0x78>)
 80002ce:	4618      	mov	r0, r3
 80002d0:	f008 fbf0 	bl	8008ab4 <siprintf>
	  CDC_Transmit_FS(txBuf, strlen(txBuf));
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff7a 	bl	80001d0 <strlen>
 80002dc:	4603      	mov	r3, r0
 80002de:	b29a      	uxth	r2, r3
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4611      	mov	r1, r2
 80002e4:	4618      	mov	r0, r3
 80002e6:	f007 fe2b 	bl	8007f40 <CDC_Transmit_FS>
	  HAL_Delay(500);
 80002ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ee:	f000 fb63 	bl	80009b8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_YE_GPIO_Port, LED_YE_Pin);
 80002f2:	e7d5      	b.n	80002a0 <main+0x20>
 80002f4:	20000224 	.word	0x20000224
 80002f8:	08009168 	.word	0x08009168

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b0ac      	sub	sp, #176	; 0xb0
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000306:	2244      	movs	r2, #68	; 0x44
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f008 fb12 	bl	8008934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2254      	movs	r2, #84	; 0x54
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f008 fb04 	bl	8008934 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800032c:	2310      	movs	r3, #16
 800032e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000330:	2301      	movs	r3, #1
 8000332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800033c:	2360      	movs	r3, #96	; 0x60
 800033e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000342:	2302      	movs	r3, #2
 8000344:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000348:	2301      	movs	r3, #1
 800034a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800034e:	2301      	movs	r3, #1
 8000350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000354:	2328      	movs	r3, #40	; 0x28
 8000356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800035a:	2307      	movs	r3, #7
 800035c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000360:	2302      	movs	r3, #2
 8000362:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000366:	2302      	movs	r3, #2
 8000368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000370:	4618      	mov	r0, r3
 8000372:	f002 f9fb 	bl	800276c <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800037c:	f000 f8e0 	bl	8000540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000380:	230f      	movs	r3, #15
 8000382:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000384:	2303      	movs	r3, #3
 8000386:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000394:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000398:	2104      	movs	r1, #4
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fe06 	bl	8002fac <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003a6:	f000 f8cb 	bl	8000540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80003b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80003b4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80003b6:	2301      	movs	r3, #1
 80003b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80003ba:	2301      	movs	r3, #1
 80003bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80003be:	2318      	movs	r3, #24
 80003c0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80003c2:	2307      	movs	r3, #7
 80003c4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80003ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003d2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 ffb4 	bl	8003344 <HAL_RCCEx_PeriphCLKConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80003e2:	f000 f8ad 	bl	8000540 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ea:	f002 f959 	bl	80026a0 <HAL_PWREx_ControlVoltageScaling>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80003f4:	f000 f8a4 	bl	8000540 <Error_Handler>
  }
}
 80003f8:	bf00      	nop
 80003fa:	37b0      	adds	r7, #176	; 0xb0
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000404:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <MX_SPI1_Init+0x74>)
 8000406:	4a1c      	ldr	r2, [pc, #112]	; (8000478 <MX_SPI1_Init+0x78>)
 8000408:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_SPI1_Init+0x74>)
 800040c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000410:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000412:	4b18      	ldr	r3, [pc, #96]	; (8000474 <MX_SPI1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000418:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_SPI1_Init+0x74>)
 800041a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800041e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_SPI1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000426:	4b13      	ldr	r3, [pc, #76]	; (8000474 <MX_SPI1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_SPI1_Init+0x74>)
 800042e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000432:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_SPI1_Init+0x74>)
 8000436:	2228      	movs	r2, #40	; 0x28
 8000438:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_SPI1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_SPI1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_SPI1_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_SPI1_Init+0x74>)
 800044e:	2207      	movs	r2, #7
 8000450:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_SPI1_Init+0x74>)
 800045a:	2208      	movs	r2, #8
 800045c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_SPI1_Init+0x74>)
 8000460:	f003 fa52 	bl	8003908 <HAL_SPI_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800046a:	f000 f869 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000224 	.word	0x20000224
 8000478:	40013000 	.word	0x40013000

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000492:	4b29      	ldr	r3, [pc, #164]	; (8000538 <MX_GPIO_Init+0xbc>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	4a28      	ldr	r2, [pc, #160]	; (8000538 <MX_GPIO_Init+0xbc>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049e:	4b26      	ldr	r3, [pc, #152]	; (8000538 <MX_GPIO_Init+0xbc>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004aa:	4b23      	ldr	r3, [pc, #140]	; (8000538 <MX_GPIO_Init+0xbc>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	4a22      	ldr	r2, [pc, #136]	; (8000538 <MX_GPIO_Init+0xbc>)
 80004b0:	f043 0302 	orr.w	r3, r3, #2
 80004b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b6:	4b20      	ldr	r3, [pc, #128]	; (8000538 <MX_GPIO_Init+0xbc>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	f003 0302 	and.w	r3, r3, #2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_YE_Pin|LED_GR_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	210c      	movs	r1, #12
 80004c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ca:	f000 fd13 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	21c0      	movs	r1, #192	; 0xc0
 80004d2:	481a      	ldr	r0, [pc, #104]	; (800053c <MX_GPIO_Init+0xc0>)
 80004d4:	f000 fd0e 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_YE_Pin LED_GR_Pin */
  GPIO_InitStruct.Pin = LED_YE_Pin|LED_GR_Pin;
 80004d8:	230c      	movs	r3, #12
 80004da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
 80004de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	4619      	mov	r1, r3
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f000 fb95 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80004f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	4619      	mov	r1, r3
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f000 fb87 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin;
 8000512:	23c0      	movs	r3, #192	; 0xc0
 8000514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	4619      	mov	r1, r3
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_GPIO_Init+0xc0>)
 800052a:	f000 fb79 	bl	8000c20 <HAL_GPIO_Init>

}
 800052e:	bf00      	nop
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	48000400 	.word	0x48000400

08000540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000546:	e7fe      	b.n	8000546 <Error_Handler+0x6>

08000548 <nRF24_Init>:

// Peripheral libraries
#include "stm32l4xx_hal.h"

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	nrf24_hspi = hspi;
 8000550:	4a08      	ldr	r2, [pc, #32]	; (8000574 <nRF24_Init+0x2c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	4807      	ldr	r0, [pc, #28]	; (8000578 <nRF24_Init+0x30>)
 800055c:	f000 fcca 	bl	8000ef4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2140      	movs	r1, #64	; 0x40
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <nRF24_Init+0x30>)
 8000566:	f000 fcc5 	bl	8000ef4 <HAL_GPIO_WritePin>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000210 	.word	0x20000210
 8000578:	48000400 	.word	0x48000400

0800057c <nRF24_WriteRegister>:

	return recv;
}

void nRF24_WriteRegister(uint8_t reg, uint8_t data)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd;

	cmd = nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP);
 800058c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000590:	f003 031f 	and.w	r3, r3, #31
 8000594:	b25b      	sxtb	r3, r3
 8000596:	f043 0320 	orr.w	r3, r3, #32
 800059a:	b25b      	sxtb	r3, r3
 800059c:	b2db      	uxtb	r3, r3
 800059e:	73fb      	strb	r3, [r7, #15]

	nRF24_CSN_LOW;
 80005a0:	2200      	movs	r2, #0
 80005a2:	2140      	movs	r1, #64	; 0x40
 80005a4:	480e      	ldr	r0, [pc, #56]	; (80005e0 <nRF24_WriteRegister+0x64>)
 80005a6:	f000 fca5 	bl	8000ef4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nrf24_hspi, &cmd, 1, HAL_MAX_DELAY);
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <nRF24_WriteRegister+0x68>)
 80005ac:	6818      	ldr	r0, [r3, #0]
 80005ae:	f107 010f 	add.w	r1, r7, #15
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
 80005b6:	2201      	movs	r2, #1
 80005b8:	f003 fa49 	bl	8003a4e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, &data, 1, HAL_MAX_DELAY);
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <nRF24_WriteRegister+0x68>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	1db9      	adds	r1, r7, #6
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	2201      	movs	r2, #1
 80005c8:	f003 fa41 	bl	8003a4e <HAL_SPI_Transmit>
	nRF24_CSN_HIGH;
 80005cc:	2201      	movs	r2, #1
 80005ce:	2140      	movs	r1, #64	; 0x40
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <nRF24_WriteRegister+0x64>)
 80005d2:	f000 fc8f 	bl	8000ef4 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	48000400 	.word	0x48000400
 80005e4:	20000210 	.word	0x20000210

080005e8 <nRF24_ReadRegister>:
		HAL_SPI_Transmit(nrf24_hspi, &buf[i], 1, HAL_MAX_DELAY);
	nRF24_CSN_HIGH;
}

uint8_t nRF24_ReadRegister(uint8_t reg)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd, recv;

	cmd = nRF24_CMD_R_REGISTER | (reg & nRF24_MASK_REG_MAP);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 031f 	and.w	r3, r3, #31
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	73fb      	strb	r3, [r7, #15]

	nRF24_CSN_LOW;
 80005fc:	2200      	movs	r2, #0
 80005fe:	2140      	movs	r1, #64	; 0x40
 8000600:	4811      	ldr	r0, [pc, #68]	; (8000648 <nRF24_ReadRegister+0x60>)
 8000602:	f000 fc77 	bl	8000ef4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nrf24_hspi, &cmd, 1, HAL_MAX_DELAY);
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <nRF24_ReadRegister+0x64>)
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	f107 010f 	add.w	r1, r7, #15
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	2201      	movs	r2, #1
 8000614:	f003 fa1b 	bl	8003a4e <HAL_SPI_Transmit>
	cmd = nRF24_CMD_NOP;
 8000618:	23ff      	movs	r3, #255	; 0xff
 800061a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(nrf24_hspi, &cmd, &recv, 1, HAL_MAX_DELAY);
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <nRF24_ReadRegister+0x64>)
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	f107 020e 	add.w	r2, r7, #14
 8000624:	f107 010f 	add.w	r1, r7, #15
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	f003 fb7b 	bl	8003d2a <HAL_SPI_TransmitReceive>
	nRF24_CSN_HIGH;
 8000634:	2201      	movs	r2, #1
 8000636:	2140      	movs	r1, #64	; 0x40
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <nRF24_ReadRegister+0x60>)
 800063a:	f000 fc5b 	bl	8000ef4 <HAL_GPIO_WritePin>

	return recv;
 800063e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	48000400 	.word	0x48000400
 800064c:	20000210 	.word	0x20000210

08000650 <nRF24_SetRFChannel>:
{
	return nRF24_Command(nRF24_CMD_NOP);
}

void nRF24_SetRFChannel(uint8_t channel)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(nRF24_REG_RF_CH, channel);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	4619      	mov	r1, r3
 800065e:	2005      	movs	r0, #5
 8000660:	f7ff ff8c 	bl	800057c <nRF24_WriteRegister>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_MspInit+0x44>)
 8000674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_MspInit+0x44>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6613      	str	r3, [r2, #96]	; 0x60
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_MspInit+0x44>)
 8000680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <HAL_MspInit+0x44>)
 800068c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <HAL_MspInit+0x44>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	6593      	str	r3, [r2, #88]	; 0x58
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_MspInit+0x44>)
 8000698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000

080006b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a17      	ldr	r2, [pc, #92]	; (8000730 <HAL_SPI_MspInit+0x7c>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d127      	bne.n	8000726 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <HAL_SPI_MspInit+0x80>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006da:	4a16      	ldr	r2, [pc, #88]	; (8000734 <HAL_SPI_MspInit+0x80>)
 80006dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006e0:	6613      	str	r3, [r2, #96]	; 0x60
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <HAL_SPI_MspInit+0x80>)
 80006e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_SPI_MspInit+0x80>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a10      	ldr	r2, [pc, #64]	; (8000734 <HAL_SPI_MspInit+0x80>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_SPI_MspInit+0x80>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000706:	2338      	movs	r3, #56	; 0x38
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000716:	2305      	movs	r3, #5
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <HAL_SPI_MspInit+0x84>)
 8000722:	f000 fa7d 	bl	8000c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000726:	bf00      	nop
 8000728:	3728      	adds	r7, #40	; 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40013000 	.word	0x40013000
 8000734:	40021000 	.word	0x40021000
 8000738:	48000400 	.word	0x48000400

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <NMI_Handler+0x4>

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler+0x4>

0800074e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <UsageFault_Handler+0x4>

0800075a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000788:	f000 f8f6 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <USB_IRQHandler+0x10>)
 8000796:	f000 fd13 	bl	80011c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000f2c 	.word	0x20000f2c

080007a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ac:	4a14      	ldr	r2, [pc, #80]	; (8000800 <_sbrk+0x5c>)
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <_sbrk+0x60>)
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <_sbrk+0x64>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d102      	bne.n	80007c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <_sbrk+0x64>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <_sbrk+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d207      	bcs.n	80007e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d4:	f008 f874 	bl	80088c0 <__errno>
 80007d8:	4602      	mov	r2, r0
 80007da:	230c      	movs	r3, #12
 80007dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	e009      	b.n	80007f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <_sbrk+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	4a05      	ldr	r2, [pc, #20]	; (8000808 <_sbrk+0x64>)
 80007f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f6:	68fb      	ldr	r3, [r7, #12]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20010000 	.word	0x20010000
 8000804:	00000400 	.word	0x00000400
 8000808:	20000214 	.word	0x20000214
 800080c:	20001228 	.word	0x20001228

08000810 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <SystemInit+0x64>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <SystemInit+0x64>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <SystemInit+0x68>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a13      	ldr	r2, [pc, #76]	; (8000878 <SystemInit+0x68>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <SystemInit+0x68>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <SystemInit+0x68>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <SystemInit+0x68>)
 800083c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000840:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000844:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <SystemInit+0x68>)
 8000848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <SystemInit+0x68>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a09      	ldr	r2, [pc, #36]	; (8000878 <SystemInit+0x68>)
 8000854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000858:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <SystemInit+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <SystemInit+0x64>)
 8000862:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000866:	609a      	str	r2, [r3, #8]
#endif
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00
 8000878:	40021000 	.word	0x40021000

0800087c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000880:	f7ff ffc6 	bl	8000810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000884:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000886:	e003      	b.n	8000890 <LoopCopyDataInit>

08000888 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800088a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800088c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800088e:	3104      	adds	r1, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000890:	480a      	ldr	r0, [pc, #40]	; (80008bc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000894:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000896:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000898:	d3f6      	bcc.n	8000888 <CopyDataInit>
	ldr	r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800089c:	e002      	b.n	80008a4 <LoopFillZerobss>

0800089e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800089e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008a0:	f842 3b04 	str.w	r3, [r2], #4

080008a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <LoopForever+0x16>)
	cmp	r2, r3
 80008a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008a8:	d3f9      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f008 f80f 	bl	80088cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ae:	f7ff fce7 	bl	8000280 <main>

080008b2 <LoopForever>:

LoopForever:
    b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008b4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80008b8:	08009238 	.word	0x08009238
	ldr	r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008c0:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 80008c4:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 80008c8:	20001224 	.word	0x20001224

080008cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_IRQHandler>

080008ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f95f 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 f80e 	bl	8000900 <HAL_InitTick>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	71fb      	strb	r3, [r7, #7]
 80008ee:	e001      	b.n	80008f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008f0:	f7ff febc 	bl	800066c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000908:	2300      	movs	r3, #0
 800090a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_InitTick+0x6c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d023      	beq.n	800095c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_InitTick+0x70>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_InitTick+0x6c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f96b 	bl	8000c06 <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d10f      	bne.n	8000956 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d809      	bhi.n	8000950 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f000 f935 	bl	8000bb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000948:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <HAL_InitTick+0x74>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e007      	b.n	8000960 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e004      	b.n	8000960 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	e001      	b.n	8000960 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000960:	7bfb      	ldrb	r3, [r7, #15]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008
 8000970:	20000000 	.word	0x20000000
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	20000288 	.word	0x20000288

080009a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_GetTick+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000288 	.word	0x20000288

080009b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c0:	f7ff ffee 	bl	80009a0 <HAL_GetTick>
 80009c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d0:	d005      	beq.n	80009de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_Delay+0x40>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009de:	bf00      	nop
 80009e0:	f7ff ffde 	bl	80009a0 <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8f7      	bhi.n	80009e0 <HAL_Delay+0x28>
  {
  }
}
 80009f0:	bf00      	nop
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000008 	.word	0x20000008

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db0b      	blt.n	8000a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	f003 021f 	and.w	r2, r3, #31
 8000a78:	4907      	ldr	r1, [pc, #28]	; (8000a98 <__NVIC_EnableIRQ+0x38>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	095b      	lsrs	r3, r3, #5
 8000a80:	2001      	movs	r0, #1
 8000a82:	fa00 f202 	lsl.w	r2, r0, r2
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	; (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	; 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ff8e 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff29 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff3e 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff8e 	bl	8000af0 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff31 	bl	8000a60 <__NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffa2 	bl	8000b58 <SysTick_Config>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2e:	e148      	b.n	8000ec2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	2101      	movs	r1, #1
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 813a 	beq.w	8000ebc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d00b      	beq.n	8000c68 <HAL_GPIO_Init+0x48>
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d007      	beq.n	8000c68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c5c:	2b11      	cmp	r3, #17
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b12      	cmp	r3, #18
 8000c66:	d130      	bne.n	8000cca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	f003 0201 	and.w	r2, r3, #1
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0xea>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b12      	cmp	r3, #18
 8000d08:	d123      	bne.n	8000d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	220f      	movs	r2, #15
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	691a      	ldr	r2, [r3, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	08da      	lsrs	r2, r3, #3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3208      	adds	r2, #8
 8000d4c:	6939      	ldr	r1, [r7, #16]
 8000d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0203 	and.w	r2, r3, #3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8094 	beq.w	8000ebc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d94:	4b52      	ldr	r3, [pc, #328]	; (8000ee0 <HAL_GPIO_Init+0x2c0>)
 8000d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d98:	4a51      	ldr	r2, [pc, #324]	; (8000ee0 <HAL_GPIO_Init+0x2c0>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6613      	str	r3, [r2, #96]	; 0x60
 8000da0:	4b4f      	ldr	r3, [pc, #316]	; (8000ee0 <HAL_GPIO_Init+0x2c0>)
 8000da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dac:	4a4d      	ldr	r2, [pc, #308]	; (8000ee4 <HAL_GPIO_Init+0x2c4>)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dd6:	d00d      	beq.n	8000df4 <HAL_GPIO_Init+0x1d4>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a43      	ldr	r2, [pc, #268]	; (8000ee8 <HAL_GPIO_Init+0x2c8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d007      	beq.n	8000df0 <HAL_GPIO_Init+0x1d0>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a42      	ldr	r2, [pc, #264]	; (8000eec <HAL_GPIO_Init+0x2cc>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d101      	bne.n	8000dec <HAL_GPIO_Init+0x1cc>
 8000de8:	2302      	movs	r3, #2
 8000dea:	e004      	b.n	8000df6 <HAL_GPIO_Init+0x1d6>
 8000dec:	2307      	movs	r3, #7
 8000dee:	e002      	b.n	8000df6 <HAL_GPIO_Init+0x1d6>
 8000df0:	2301      	movs	r3, #1
 8000df2:	e000      	b.n	8000df6 <HAL_GPIO_Init+0x1d6>
 8000df4:	2300      	movs	r3, #0
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	f002 0203 	and.w	r2, r2, #3
 8000dfc:	0092      	lsls	r2, r2, #2
 8000dfe:	4093      	lsls	r3, r2
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e06:	4937      	ldr	r1, [pc, #220]	; (8000ee4 <HAL_GPIO_Init+0x2c4>)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e14:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e38:	4a2d      	ldr	r2, [pc, #180]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f47f aeaf 	bne.w	8000c30 <HAL_GPIO_Init+0x10>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	48000400 	.word	0x48000400
 8000eec:	48000800 	.word	0x48000800
 8000ef0:	40010400 	.word	0x40010400

08000ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
 8000f00:	4613      	mov	r3, r2
 8000f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f04:	787b      	ldrb	r3, [r7, #1]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	041a      	lsls	r2, r3, #16
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43d9      	mvns	r1, r3
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	400b      	ands	r3, r1
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5a:	b08b      	sub	sp, #44	; 0x2c
 8000f5c:	af06      	add	r7, sp, #24
 8000f5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e104      	b.n	8001174 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d106      	bne.n	8000f84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f007 f936 	bl	80081f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2203      	movs	r2, #3
 8000f88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 fa61 	bl	8004458 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	687e      	ldr	r6, [r7, #4]
 8000f9e:	466d      	mov	r5, sp
 8000fa0:	f106 0410 	add.w	r4, r6, #16
 8000fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	602b      	str	r3, [r5, #0]
 8000fac:	1d33      	adds	r3, r6, #4
 8000fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb0:	6838      	ldr	r0, [r7, #0]
 8000fb2:	f003 fa29 	bl	8004408 <USB_CoreInit>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d005      	beq.n	8000fc8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e0d5      	b.n	8001174 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fa5d 	bl	800448e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e04c      	b.n	8001074 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	440b      	add	r3, r1
 8000fea:	3301      	adds	r3, #1
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	440b      	add	r3, r1
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	b298      	uxth	r0, r3
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3336      	adds	r3, #54	; 0x36
 8001018:	4602      	mov	r2, r0
 800101a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	440b      	add	r3, r1
 800102c:	3303      	adds	r3, #3
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	440b      	add	r3, r1
 8001040:	3338      	adds	r3, #56	; 0x38
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	440b      	add	r3, r1
 8001054:	333c      	adds	r3, #60	; 0x3c
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	3340      	adds	r3, #64	; 0x40
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	3301      	adds	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d3ad      	bcc.n	8000fda <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e044      	b.n	800110e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	440b      	add	r3, r1
 8001092:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	440b      	add	r3, r1
 80010a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	440b      	add	r3, r1
 80010d4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	440b      	add	r3, r1
 8001100:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	3301      	adds	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	d3b5      	bcc.n	8001084 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	687e      	ldr	r6, [r7, #4]
 8001120:	466d      	mov	r5, sp
 8001122:	f106 0410 	add.w	r4, r6, #16
 8001126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	602b      	str	r3, [r5, #0]
 800112e:	1d33      	adds	r3, r6, #4
 8001130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001132:	6838      	ldr	r0, [r7, #0]
 8001134:	f003 f9b8 	bl	80044a8 <USB_DevInit>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2202      	movs	r2, #2
 8001142:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e014      	b.n	8001174 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d102      	bne.n	8001168 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f001 fa63 	bl	800262e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f005 f971 	bl	8006454 <USB_DevDisconnect>

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800117c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <HAL_PCD_Start+0x16>
 800118e:	2302      	movs	r3, #2
 8001190:	e012      	b.n	80011b8 <HAL_PCD_Start+0x3c>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 f943 	bl	800442a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f005 f93c 	bl	8006426 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f005 f956 	bl	800647e <USB_ReadInterrupts>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011dc:	d102      	bne.n	80011e4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 fb5b 	bl	800189a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f005 f948 	bl	800647e <USB_ReadInterrupts>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f8:	d112      	bne.n	8001220 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001202:	b29a      	uxth	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800120c:	b292      	uxth	r2, r2
 800120e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f007 f867 	bl	80082e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001218:	2100      	movs	r1, #0
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f91e 	bl	800145c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f005 f92a 	bl	800647e <USB_ReadInterrupts>
 800122a:	4603      	mov	r3, r0
 800122c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001234:	d10b      	bne.n	800124e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800123e:	b29a      	uxth	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001248:	b292      	uxth	r2, r2
 800124a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f005 f913 	bl	800647e <USB_ReadInterrupts>
 8001258:	4603      	mov	r3, r0
 800125a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800125e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001262:	d10b      	bne.n	800127c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800126c:	b29a      	uxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001276:	b292      	uxth	r2, r2
 8001278:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f005 f8fc 	bl	800647e <USB_ReadInterrupts>
 8001286:	4603      	mov	r3, r0
 8001288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001290:	d133      	bne.n	80012fa <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800129a:	b29a      	uxth	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0204 	bic.w	r2, r2, #4
 80012a4:	b292      	uxth	r2, r2
 80012a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0208 	bic.w	r2, r2, #8
 80012bc:	b292      	uxth	r2, r2
 80012be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d107      	bne.n	80012dc <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012d4:	2100      	movs	r1, #0
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f007 fab6 	bl	8008848 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f007 f83b 	bl	8008358 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012f4:	b292      	uxth	r2, r2
 80012f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 f8bd 	bl	800647e <USB_ReadInterrupts>
 8001304:	4603      	mov	r3, r0
 8001306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800130a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800130e:	d126      	bne.n	800135e <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0208 	orr.w	r2, r2, #8
 8001322:	b292      	uxth	r2, r2
 8001324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001330:	b29a      	uxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800133a:	b292      	uxth	r2, r2
 800133c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001348:	b29a      	uxth	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0204 	orr.w	r2, r2, #4
 8001352:	b292      	uxth	r2, r2
 8001354:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f006 ffe3 	bl	8008324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f005 f88b 	bl	800647e <USB_ReadInterrupts>
 8001368:	4603      	mov	r3, r0
 800136a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136e:	2b80      	cmp	r3, #128	; 0x80
 8001370:	d13f      	bne.n	80013f2 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001384:	b292      	uxth	r2, r2
 8001386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d12b      	bne.n	80013ec <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0204 	orr.w	r2, r2, #4
 80013a6:	b292      	uxth	r2, r2
 80013a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0208 	orr.w	r2, r2, #8
 80013be:	b292      	uxth	r2, r2
 80013c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013e2:	2101      	movs	r1, #1
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f007 fa2f 	bl	8008848 <HAL_PCDEx_LPM_Callback>
 80013ea:	e002      	b.n	80013f2 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f006 ff99 	bl	8008324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f005 f841 	bl	800647e <USB_ReadInterrupts>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001406:	d10e      	bne.n	8001426 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001410:	b29a      	uxth	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800141a:	b292      	uxth	r2, r2
 800141c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f006 ff52 	bl	80082ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f005 f827 	bl	800647e <USB_ReadInterrupts>
 8001430:	4603      	mov	r3, r0
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800143a:	d10b      	bne.n	8001454 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001444:	b29a      	uxth	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800144e:	b292      	uxth	r2, r2
 8001450:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <HAL_PCD_SetAddress+0x1a>
 8001472:	2302      	movs	r3, #2
 8001474:	e013      	b.n	800149e <HAL_PCD_SetAddress+0x42>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	78fa      	ldrb	r2, [r7, #3]
 8001482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	78fa      	ldrb	r2, [r7, #3]
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f004 ffb5 	bl	80063fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	4608      	mov	r0, r1
 80014b0:	4611      	mov	r1, r2
 80014b2:	461a      	mov	r2, r3
 80014b4:	4603      	mov	r3, r0
 80014b6:	70fb      	strb	r3, [r7, #3]
 80014b8:	460b      	mov	r3, r1
 80014ba:	803b      	strh	r3, [r7, #0]
 80014bc:	4613      	mov	r3, r2
 80014be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	da0e      	bge.n	80014ea <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2201      	movs	r2, #1
 80014e6:	705a      	strb	r2, [r3, #1]
 80014e8:	e00e      	b.n	8001508 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	f003 0207 	and.w	r2, r3, #7
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	b2da      	uxtb	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001514:	883a      	ldrh	r2, [r7, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	78ba      	ldrb	r2, [r7, #2]
 800151e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001532:	78bb      	ldrb	r3, [r7, #2]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d102      	bne.n	800153e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_PCD_EP_Open+0xa6>
 8001548:	2302      	movs	r3, #2
 800154a:	e00e      	b.n	800156a <HAL_PCD_EP_Open+0xc4>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68f9      	ldr	r1, [r7, #12]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 ffc6 	bl	80044ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001568:	7afb      	ldrb	r3, [r7, #11]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800157e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001582:	2b00      	cmp	r3, #0
 8001584:	da0e      	bge.n	80015a4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2201      	movs	r2, #1
 80015a0:	705a      	strb	r2, [r3, #1]
 80015a2:	e00e      	b.n	80015c2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	f003 0207 	and.w	r2, r3, #7
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_PCD_EP_Close+0x6a>
 80015d8:	2302      	movs	r3, #2
 80015da:	e00e      	b.n	80015fa <HAL_PCD_EP_Close+0x88>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68f9      	ldr	r1, [r7, #12]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 faec 	bl	8004bc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	460b      	mov	r3, r1
 8001610:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001612:	7afb      	ldrb	r3, [r7, #11]
 8001614:	f003 0207 	and.w	r2, r3, #7
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2200      	movs	r2, #0
 8001640:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001642:	7afb      	ldrb	r3, [r7, #11]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	b2da      	uxtb	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	2b00      	cmp	r3, #0
 8001656:	d106      	bne.n	8001666 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6979      	ldr	r1, [r7, #20]
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fc9f 	bl	8004fa2 <USB_EPStartXfer>
 8001664:	e005      	b.n	8001672 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6979      	ldr	r1, [r7, #20]
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fc98 	bl	8004fa2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	f003 0207 	and.w	r2, r3, #7
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	460b      	mov	r3, r1
 80016ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016bc:	7afb      	ldrb	r3, [r7, #11]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	2201      	movs	r2, #1
 80016f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016f8:	7afb      	ldrb	r3, [r7, #11]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001704:	7afb      	ldrb	r3, [r7, #11]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6979      	ldr	r1, [r7, #20]
 8001714:	4618      	mov	r0, r3
 8001716:	f003 fc44 	bl	8004fa2 <USB_EPStartXfer>
 800171a:	e005      	b.n	8001728 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6979      	ldr	r1, [r7, #20]
 8001722:	4618      	mov	r0, r3
 8001724:	f003 fc3d 	bl	8004fa2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	f003 0207 	and.w	r2, r3, #7
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	d901      	bls.n	8001750 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e04c      	b.n	80017ea <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001750:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001754:	2b00      	cmp	r3, #0
 8001756:	da0e      	bge.n	8001776 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	705a      	strb	r2, [r3, #1]
 8001774:	e00c      	b.n	8001790 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2201      	movs	r2, #1
 8001794:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	b2da      	uxtb	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_PCD_EP_SetStall+0x7e>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e01c      	b.n	80017ea <HAL_PCD_EP_SetStall+0xb8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68f9      	ldr	r1, [r7, #12]
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 fd1e 	bl	8006200 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d108      	bne.n	80017e0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80017d8:	4619      	mov	r1, r3
 80017da:	4610      	mov	r0, r2
 80017dc:	f004 fe5f 	bl	800649e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	f003 020f 	and.w	r2, r3, #15
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	d901      	bls.n	8001810 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e040      	b.n	8001892 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001814:	2b00      	cmp	r3, #0
 8001816:	da0e      	bge.n	8001836 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	705a      	strb	r2, [r3, #1]
 8001834:	e00e      	b.n	8001854 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	f003 0207 	and.w	r2, r3, #7
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	b2da      	uxtb	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800186c:	2b01      	cmp	r3, #1
 800186e:	d101      	bne.n	8001874 <HAL_PCD_EP_ClrStall+0x82>
 8001870:	2302      	movs	r3, #2
 8001872:	e00e      	b.n	8001892 <HAL_PCD_EP_ClrStall+0xa0>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68f9      	ldr	r1, [r7, #12]
 8001882:	4618      	mov	r0, r3
 8001884:	f004 fd0d 	bl	80062a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b08e      	sub	sp, #56	; 0x38
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018a2:	e2d1      	b.n	8001e48 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80018ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 8152 	bne.w	8001b68 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d150      	bne.n	8001970 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018de:	81fb      	strh	r3, [r7, #14]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3328      	adds	r3, #40	; 0x28
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001900:	b29b      	uxth	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4413      	add	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4413      	add	r3, r2
 8001912:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	441a      	add	r2, r3
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800192e:	2100      	movs	r1, #0
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f006 fcb0 	bl	8008296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 8282 	beq.w	8001e48 <PCD_EP_ISR_Handler+0x5ae>
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f040 827d 	bne.w	8001e48 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800195a:	b2da      	uxtb	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	b292      	uxth	r2, r2
 8001962:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800196e:	e26b      	b.n	8001e48 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001980:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001986:	2b00      	cmp	r3, #0
 8001988:	d032      	beq.n	80019f0 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f004 fdb7 	bl	8006538 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019d6:	4013      	ands	r3, r2
 80019d8:	823b      	strh	r3, [r7, #16]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	8a3a      	ldrh	r2, [r7, #16]
 80019e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019e4:	b292      	uxth	r2, r2
 80019e6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f006 fc27 	bl	800823c <HAL_PCD_SetupStageCallback>
 80019ee:	e22b      	b.n	8001e48 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f280 8227 	bge.w	8001e48 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a06:	4013      	ands	r3, r2
 8001a08:	83bb      	strh	r3, [r7, #28]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	8bba      	ldrh	r2, [r7, #28]
 8001a10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a14:	b292      	uxth	r2, r2
 8001a16:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d019      	beq.n	8001a7c <PCD_EP_ISR_Handler+0x1e2>
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d015      	beq.n	8001a7c <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	6959      	ldr	r1, [r3, #20]
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	f004 fd69 	bl	8006538 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	441a      	add	r2, r3
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a74:	2100      	movs	r1, #0
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f006 fbf2 	bl	8008260 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4413      	add	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d112      	bne.n	8001aca <PCD_EP_ISR_Handler+0x230>
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	801a      	strh	r2, [r3, #0]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	801a      	strh	r2, [r3, #0]
 8001ac8:	e02f      	b.n	8001b2a <PCD_EP_ISR_Handler+0x290>
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b3e      	cmp	r3, #62	; 0x3e
 8001ad0:	d813      	bhi.n	8001afa <PCD_EP_ISR_Handler+0x260>
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <PCD_EP_ISR_Handler+0x252>
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae8:	3301      	adds	r3, #1
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
 8001aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	029b      	lsls	r3, r3, #10
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	801a      	strh	r2, [r3, #0]
 8001af8:	e017      	b.n	8001b2a <PCD_EP_ISR_Handler+0x290>
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d102      	bne.n	8001b14 <PCD_EP_ISR_Handler+0x27a>
 8001b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b10:	3b01      	subs	r3, #1
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
 8001b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	029b      	lsls	r3, r3, #10
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b3a:	827b      	strh	r3, [r7, #18]
 8001b3c:	8a7b      	ldrh	r3, [r7, #18]
 8001b3e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b42:	827b      	strh	r3, [r7, #18]
 8001b44:	8a7b      	ldrh	r3, [r7, #18]
 8001b46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b4a:	827b      	strh	r3, [r7, #18]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	8a7b      	ldrh	r3, [r7, #18]
 8001b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	8013      	strh	r3, [r2, #0]
 8001b66:	e16f      	b.n	8001e48 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b7a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f280 80e4 	bge.w	8001d4c <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	853b      	strh	r3, [r7, #40]	; 0x28
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bb2:	b292      	uxth	r2, r2
 8001bb4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001bb6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	7b1b      	ldrb	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d120      	bne.n	8001c16 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	4413      	add	r3, r2
 8001bee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bf8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001bfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8083 	beq.w	8001d08 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	6959      	ldr	r1, [r3, #20]
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	88da      	ldrh	r2, [r3, #6]
 8001c0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c10:	f004 fc92 	bl	8006538 <USB_ReadPMA>
 8001c14:	e078      	b.n	8001d08 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	78db      	ldrb	r3, [r3, #3]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d108      	bne.n	8001c30 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c20:	461a      	mov	r2, r3
 8001c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f91d 	bl	8001e64 <HAL_PCD_EP_DB_Receive>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001c2e:	e06b      	b.n	8001d08 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	441a      	add	r2, r3
 8001c5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01f      	beq.n	8001cca <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cae:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001cb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d028      	beq.n	8001d08 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	6959      	ldr	r1, [r3, #20]
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	891a      	ldrh	r2, [r3, #8]
 8001cc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cc4:	f004 fc38 	bl	8006538 <USB_ReadPMA>
 8001cc8:	e01e      	b.n	8001d08 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cee:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001cf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	6959      	ldr	r1, [r3, #20]
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	895a      	ldrh	r2, [r3, #10]
 8001d02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d04:	f004 fc18 	bl	8006538 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d0e:	441a      	add	r2, r3
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d1a:	441a      	add	r2, r3
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <PCD_EP_ISR_Handler+0x498>
 8001d28:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d206      	bcs.n	8001d40 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f006 fa91 	bl	8008260 <HAL_PCD_DataOutStageCallback>
 8001d3e:	e005      	b.n	8001d4c <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 f92b 	bl	8004fa2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d078      	beq.n	8001e48 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d84:	843b      	strh	r3, [r7, #32]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	441a      	add	r2, r3
 8001d94:	8c3b      	ldrh	r3, [r7, #32]
 8001d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	78db      	ldrb	r3, [r3, #3]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d108      	bne.n	8001dbc <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d144      	bne.n	8001e3c <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001db2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d13f      	bne.n	8001e3c <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	8bfb      	ldrh	r3, [r7, #30]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d906      	bls.n	8001dfa <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	8bfb      	ldrh	r3, [r7, #30]
 8001df2:	1ad2      	subs	r2, r2, r3
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	619a      	str	r2, [r3, #24]
 8001df8:	e002      	b.n	8001e00 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d106      	bne.n	8001e16 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f006 fa41 	bl	8008296 <HAL_PCD_DataInStageCallback>
 8001e14:	e018      	b.n	8001e48 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	8bfb      	ldrh	r3, [r7, #30]
 8001e1c:	441a      	add	r2, r3
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	69da      	ldr	r2, [r3, #28]
 8001e26:	8bfb      	ldrh	r3, [r7, #30]
 8001e28:	441a      	add	r2, r3
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 f8b4 	bl	8004fa2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001e3a:	e005      	b.n	8001e48 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e3e:	461a      	mov	r2, r3
 8001e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f917 	bl	8002076 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f6ff ad25 	blt.w	80018a4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3738      	adds	r7, #56	; 0x38
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d07c      	beq.n	8001f76 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ea0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	8b7b      	ldrh	r3, [r7, #26]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d306      	bcc.n	8001eba <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	699a      	ldr	r2, [r3, #24]
 8001eb0:	8b7b      	ldrh	r3, [r7, #26]
 8001eb2:	1ad2      	subs	r2, r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	619a      	str	r2, [r3, #24]
 8001eb8:	e002      	b.n	8001ec0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d123      	bne.n	8001f10 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee2:	833b      	strh	r3, [r7, #24]
 8001ee4:	8b3b      	ldrh	r3, [r7, #24]
 8001ee6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001eea:	833b      	strh	r3, [r7, #24]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	441a      	add	r2, r3
 8001efa:	8b3b      	ldrh	r3, [r7, #24]
 8001efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01f      	beq.n	8001f5a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f34:	82fb      	strh	r3, [r7, #22]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	441a      	add	r2, r3
 8001f44:	8afb      	ldrh	r3, [r7, #22]
 8001f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f5a:	8b7b      	ldrh	r3, [r7, #26]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 8085 	beq.w	800206c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	6959      	ldr	r1, [r3, #20]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	891a      	ldrh	r2, [r3, #8]
 8001f6e:	8b7b      	ldrh	r3, [r7, #26]
 8001f70:	f004 fae2 	bl	8006538 <USB_ReadPMA>
 8001f74:	e07a      	b.n	800206c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	461a      	mov	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	8b7b      	ldrh	r3, [r7, #26]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d306      	bcc.n	8001fb4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	8b7b      	ldrh	r3, [r7, #26]
 8001fac:	1ad2      	subs	r2, r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	619a      	str	r2, [r3, #24]
 8001fb2:	e002      	b.n	8001fba <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d123      	bne.n	800200a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fdc:	83fb      	strh	r3, [r7, #30]
 8001fde:	8bfb      	ldrh	r3, [r7, #30]
 8001fe0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fe4:	83fb      	strh	r3, [r7, #30]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	441a      	add	r2, r3
 8001ff4:	8bfb      	ldrh	r3, [r7, #30]
 8001ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002006:	b29b      	uxth	r3, r3
 8002008:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d11f      	bne.n	8002054 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800202a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202e:	83bb      	strh	r3, [r7, #28]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	441a      	add	r2, r3
 800203e:	8bbb      	ldrh	r3, [r7, #28]
 8002040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002050:	b29b      	uxth	r3, r3
 8002052:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002054:	8b7b      	ldrh	r3, [r7, #26]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	6959      	ldr	r1, [r3, #20]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	895a      	ldrh	r2, [r3, #10]
 8002066:	8b7b      	ldrh	r3, [r7, #26]
 8002068:	f004 fa66 	bl	8006538 <USB_ReadPMA>
    }
  }

  return count;
 800206c:	8b7b      	ldrh	r3, [r7, #26]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b092      	sub	sp, #72	; 0x48
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	4613      	mov	r3, r2
 8002082:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8130 	beq.w	80022f0 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002098:	b29b      	uxth	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	4413      	add	r3, r2
 80020aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020bc:	429a      	cmp	r2, r3
 80020be:	d906      	bls.n	80020ce <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020c6:	1ad2      	subs	r2, r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	619a      	str	r2, [r3, #24]
 80020cc:	e002      	b.n	80020d4 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d12c      	bne.n	8002136 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f006 f8d7 	bl	8008296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 822d 	beq.w	800254e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800210a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210e:	827b      	strh	r3, [r7, #18]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	441a      	add	r2, r3
 800211e:	8a7b      	ldrh	r3, [r7, #18]
 8002120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800212c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002130:	b29b      	uxth	r3, r3
 8002132:	8013      	strh	r3, [r2, #0]
 8002134:	e20b      	b.n	800254e <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01f      	beq.n	8002180 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	441a      	add	r2, r3
 800216a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800216c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217c:	b29b      	uxth	r3, r3
 800217e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002186:	2b01      	cmp	r3, #1
 8002188:	f040 81e1 	bne.w	800254e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002192:	441a      	add	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	69da      	ldr	r2, [r3, #28]
 800219c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800219e:	441a      	add	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d309      	bcc.n	80021c4 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	6a1a      	ldr	r2, [r3, #32]
 80021ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021bc:	1ad2      	subs	r2, r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	621a      	str	r2, [r3, #32]
 80021c2:	e014      	b.n	80021ee <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 80021cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021ce:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021d8:	e009      	b.n	80021ee <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2200      	movs	r2, #0
 80021ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	785b      	ldrb	r3, [r3, #1]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d155      	bne.n	80022a2 <HAL_PCD_EP_DB_Transmit+0x22c>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002204:	b29b      	uxth	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	4413      	add	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	00da      	lsls	r2, r3, #3
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	4413      	add	r3, r2
 8002218:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	2b00      	cmp	r3, #0
 8002222:	d112      	bne.n	800224a <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800222e:	b29a      	uxth	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800223e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002242:	b29a      	uxth	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	801a      	strh	r2, [r3, #0]
 8002248:	e047      	b.n	80022da <HAL_PCD_EP_DB_Transmit+0x264>
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	2b3e      	cmp	r3, #62	; 0x3e
 800224e:	d811      	bhi.n	8002274 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	085b      	lsrs	r3, r3, #1
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	3301      	adds	r3, #1
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	b29b      	uxth	r3, r3
 800226a:	029b      	lsls	r3, r3, #10
 800226c:	b29a      	uxth	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	801a      	strh	r2, [r3, #0]
 8002272:	e032      	b.n	80022da <HAL_PCD_EP_DB_Transmit+0x264>
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <HAL_PCD_EP_DB_Transmit+0x214>
 8002284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002286:	3b01      	subs	r3, #1
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	b29b      	uxth	r3, r3
 800228e:	029b      	lsls	r3, r3, #10
 8002290:	b29b      	uxth	r3, r3
 8002292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800229a:	b29a      	uxth	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	801a      	strh	r2, [r3, #0]
 80022a0:	e01b      	b.n	80022da <HAL_PCD_EP_DB_Transmit+0x264>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	785b      	ldrb	r3, [r3, #1]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d117      	bne.n	80022da <HAL_PCD_EP_DB_Transmit+0x264>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	4413      	add	r3, r2
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	00da      	lsls	r2, r3, #3
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	4413      	add	r3, r2
 80022cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	6959      	ldr	r1, [r3, #20]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	891a      	ldrh	r2, [r3, #8]
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f004 f8e4 	bl	80064b6 <USB_WritePMA>
 80022ee:	e12e      	b.n	800254e <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	4413      	add	r3, r2
 800230a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002314:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800231c:	429a      	cmp	r2, r3
 800231e:	d306      	bcc.n	800232e <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002326:	1ad2      	subs	r2, r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	619a      	str	r2, [r3, #24]
 800232c:	e002      	b.n	8002334 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d12c      	bne.n	8002396 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f005 ffa7 	bl	8008296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234e:	2b00      	cmp	r3, #0
 8002350:	f040 80fd 	bne.w	800254e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800236a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	441a      	add	r2, r3
 800237e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	b29b      	uxth	r3, r3
 8002392:	8013      	strh	r3, [r2, #0]
 8002394:	e0db      	b.n	800254e <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d11f      	bne.n	80023e0 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80023cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	b29b      	uxth	r3, r3
 80023de:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	f040 80b1 	bne.w	800254e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023f2:	441a      	add	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023fe:	441a      	add	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d309      	bcc.n	8002424 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	6a1a      	ldr	r2, [r3, #32]
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	1ad2      	subs	r2, r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	621a      	str	r2, [r3, #32]
 8002422:	e014      	b.n	800244e <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d106      	bne.n	800243a <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 800242c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002438:	e009      	b.n	800244e <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	785b      	ldrb	r3, [r3, #1]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d155      	bne.n	8002508 <HAL_PCD_EP_DB_Transmit+0x492>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	647b      	str	r3, [r7, #68]	; 0x44
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	4413      	add	r3, r2
 8002472:	647b      	str	r3, [r7, #68]	; 0x44
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	00da      	lsls	r2, r3, #3
 800247a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247c:	4413      	add	r3, r2
 800247e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002486:	2b00      	cmp	r3, #0
 8002488:	d112      	bne.n	80024b0 <HAL_PCD_EP_DB_Transmit+0x43a>
 800248a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002494:	b29a      	uxth	r2, r3
 8002496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002498:	801a      	strh	r2, [r3, #0]
 800249a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ac:	801a      	strh	r2, [r3, #0]
 80024ae:	e044      	b.n	800253a <HAL_PCD_EP_DB_Transmit+0x4c4>
 80024b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b2:	2b3e      	cmp	r3, #62	; 0x3e
 80024b4:	d811      	bhi.n	80024da <HAL_PCD_EP_DB_Transmit+0x464>
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_PCD_EP_DB_Transmit+0x456>
 80024c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c8:	3301      	adds	r3, #1
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	029b      	lsls	r3, r3, #10
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d6:	801a      	strh	r2, [r3, #0]
 80024d8:	e02f      	b.n	800253a <HAL_PCD_EP_DB_Transmit+0x4c4>
 80024da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x47a>
 80024ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ec:	3b01      	subs	r3, #1
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	029b      	lsls	r3, r3, #10
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002500:	b29a      	uxth	r2, r3
 8002502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002504:	801a      	strh	r2, [r3, #0]
 8002506:	e018      	b.n	800253a <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	785b      	ldrb	r3, [r3, #1]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d114      	bne.n	800253a <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	4413      	add	r3, r2
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	00da      	lsls	r2, r3, #3
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	4413      	add	r3, r2
 800252c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002534:	b29a      	uxth	r2, r3
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	6959      	ldr	r1, [r3, #20]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	895a      	ldrh	r2, [r3, #10]
 8002546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002548:	b29b      	uxth	r3, r3
 800254a:	f003 ffb4 	bl	80064b6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b29b      	uxth	r3, r3
 8002560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002568:	823b      	strh	r3, [r7, #16]
 800256a:	8a3b      	ldrh	r3, [r7, #16]
 800256c:	f083 0310 	eor.w	r3, r3, #16
 8002570:	823b      	strh	r3, [r7, #16]
 8002572:	8a3b      	ldrh	r3, [r7, #16]
 8002574:	f083 0320 	eor.w	r3, r3, #32
 8002578:	823b      	strh	r3, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	441a      	add	r2, r3
 8002588:	8a3b      	ldrh	r3, [r7, #16]
 800258a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800258e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259a:	b29b      	uxth	r3, r3
 800259c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3748      	adds	r7, #72	; 0x48
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	817b      	strh	r3, [r7, #10]
 80025b6:	4613      	mov	r3, r2
 80025b8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80025ba:	897b      	ldrh	r3, [r7, #10]
 80025bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c6:	897b      	ldrh	r3, [r7, #10]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4413      	add	r3, r2
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e009      	b.n	80025f2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025de:	897a      	ldrh	r2, [r7, #10]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80025f2:	893b      	ldrh	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2200      	movs	r2, #0
 80025fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	b29a      	uxth	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	80da      	strh	r2, [r3, #6]
 8002606:	e00b      	b.n	8002620 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2201      	movs	r2, #1
 800260c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	b29a      	uxth	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	b29a      	uxth	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002652:	b29b      	uxth	r3, r3
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002666:	b29b      	uxth	r3, r3
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <HAL_PWREx_GetVoltageRange+0x18>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40007000 	.word	0x40007000

080026a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ae:	d130      	bne.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b0:	4b23      	ldr	r3, [pc, #140]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026bc:	d038      	beq.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026c6:	4a1e      	ldr	r2, [pc, #120]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2232      	movs	r2, #50	; 0x32
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	4a1b      	ldr	r2, [pc, #108]	; (8002748 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	0c9b      	lsrs	r3, r3, #18
 80026e0:	3301      	adds	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e4:	e002      	b.n	80026ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f8:	d102      	bne.n	8002700 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f2      	bne.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270c:	d110      	bne.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e00f      	b.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271e:	d007      	beq.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002720:	4b07      	ldr	r3, [pc, #28]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002728:	4a05      	ldr	r2, [pc, #20]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40007000 	.word	0x40007000
 8002744:	20000000 	.word	0x20000000
 8002748:	431bde83 	.word	0x431bde83

0800274c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800275a:	6053      	str	r3, [r2, #4]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40007000 	.word	0x40007000

0800276c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	f000 bc11 	b.w	8002fa2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002780:	4ba0      	ldr	r3, [pc, #640]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800278a:	4b9e      	ldr	r3, [pc, #632]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80e4 	beq.w	800296a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <HAL_RCC_OscConfig+0x4c>
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2b0c      	cmp	r3, #12
 80027ac:	f040 808b 	bne.w	80028c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	f040 8087 	bne.w	80028c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b8:	4b92      	ldr	r3, [pc, #584]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_OscConfig+0x64>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e3e8      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1a      	ldr	r2, [r3, #32]
 80027d4:	4b8b      	ldr	r3, [pc, #556]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_RCC_OscConfig+0x7e>
 80027e0:	4b88      	ldr	r3, [pc, #544]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e8:	e005      	b.n	80027f6 <HAL_RCC_OscConfig+0x8a>
 80027ea:	4b86      	ldr	r3, [pc, #536]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80027ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d223      	bcs.n	8002842 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fd40 	bl	8003284 <RCC_SetFlashLatencyFromMSIRange>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e3c9      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280e:	4b7d      	ldr	r3, [pc, #500]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7c      	ldr	r2, [pc, #496]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002814:	f043 0308 	orr.w	r3, r3, #8
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b7a      	ldr	r3, [pc, #488]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4977      	ldr	r1, [pc, #476]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282c:	4b75      	ldr	r3, [pc, #468]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	4972      	ldr	r1, [pc, #456]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
 8002840:	e025      	b.n	800288e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002842:	4b70      	ldr	r3, [pc, #448]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6f      	ldr	r2, [pc, #444]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002848:	f043 0308 	orr.w	r3, r3, #8
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b6d      	ldr	r3, [pc, #436]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	496a      	ldr	r1, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002860:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	4965      	ldr	r1, [pc, #404]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fd00 	bl	8003284 <RCC_SetFlashLatencyFromMSIRange>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e389      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800288e:	f000 fc6f 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8002892:	4601      	mov	r1, r0
 8002894:	4b5b      	ldr	r3, [pc, #364]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	4a5a      	ldr	r2, [pc, #360]	; (8002a08 <HAL_RCC_OscConfig+0x29c>)
 80028a0:	5cd3      	ldrb	r3, [r2, r3]
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	fa21 f303 	lsr.w	r3, r1, r3
 80028aa:	4a58      	ldr	r2, [pc, #352]	; (8002a0c <HAL_RCC_OscConfig+0x2a0>)
 80028ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028ae:	4b58      	ldr	r3, [pc, #352]	; (8002a10 <HAL_RCC_OscConfig+0x2a4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe f824 	bl	8000900 <HAL_InitTick>
 80028b8:	4603      	mov	r3, r0
 80028ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d052      	beq.n	8002968 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	e36d      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d032      	beq.n	8002934 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028ce:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a4c      	ldr	r2, [pc, #304]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028da:	f7fe f861 	bl	80009a0 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028e2:	f7fe f85d 	bl	80009a0 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e356      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002900:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a3f      	ldr	r2, [pc, #252]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002906:	f043 0308 	orr.w	r3, r3, #8
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	493a      	ldr	r1, [pc, #232]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800291e:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	021b      	lsls	r3, r3, #8
 800292c:	4935      	ldr	r1, [pc, #212]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800292e:	4313      	orrs	r3, r2
 8002930:	604b      	str	r3, [r1, #4]
 8002932:	e01a      	b.n	800296a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002934:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a32      	ldr	r2, [pc, #200]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002940:	f7fe f82e 	bl	80009a0 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002948:	f7fe f82a 	bl	80009a0 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e323      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800295a:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x1dc>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d073      	beq.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d005      	beq.n	8002988 <HAL_RCC_OscConfig+0x21c>
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d10e      	bne.n	80029a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d10b      	bne.n	80029a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d063      	beq.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d15f      	bne.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e300      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a8:	d106      	bne.n	80029b8 <HAL_RCC_OscConfig+0x24c>
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e01d      	b.n	80029f4 <HAL_RCC_OscConfig+0x288>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0x270>
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a0f      	ldr	r2, [pc, #60]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a0c      	ldr	r2, [pc, #48]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e00b      	b.n	80029f4 <HAL_RCC_OscConfig+0x288>
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a08      	ldr	r2, [pc, #32]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01b      	beq.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fd ffd0 	bl	80009a0 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a02:	e010      	b.n	8002a26 <HAL_RCC_OscConfig+0x2ba>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	080091bc 	.word	0x080091bc
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fd ffc4 	bl	80009a0 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e2bd      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a26:	4baf      	ldr	r3, [pc, #700]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x2a8>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fd ffb4 	bl	80009a0 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fd ffb0 	bl	80009a0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e2a9      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4e:	4ba5      	ldr	r3, [pc, #660]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2d0>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d060      	beq.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_OscConfig+0x310>
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d119      	bne.n	8002aaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d116      	bne.n	8002aaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a7c:	4b99      	ldr	r3, [pc, #612]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_OscConfig+0x328>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e286      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a94:	4b93      	ldr	r3, [pc, #588]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	4990      	ldr	r1, [pc, #576]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa8:	e040      	b.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d023      	beq.n	8002afa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab2:	4b8c      	ldr	r3, [pc, #560]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a8b      	ldr	r2, [pc, #556]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fd ff6f 	bl	80009a0 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fd ff6b 	bl	80009a0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e264      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad8:	4b82      	ldr	r3, [pc, #520]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b7f      	ldr	r3, [pc, #508]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	497c      	ldr	r1, [pc, #496]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
 8002af8:	e018      	b.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b7a      	ldr	r3, [pc, #488]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a79      	ldr	r2, [pc, #484]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fd ff4b 	bl	80009a0 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fd ff47 	bl	80009a0 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e240      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b20:	4b70      	ldr	r3, [pc, #448]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d03c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01c      	beq.n	8002b7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b40:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b46:	4a67      	ldr	r2, [pc, #412]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fd ff26 	bl	80009a0 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b58:	f7fd ff22 	bl	80009a0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e21b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6a:	4b5e      	ldr	r3, [pc, #376]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ef      	beq.n	8002b58 <HAL_RCC_OscConfig+0x3ec>
 8002b78:	e01b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7a:	4b5a      	ldr	r3, [pc, #360]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b80:	4a58      	ldr	r2, [pc, #352]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fd ff09 	bl	80009a0 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b92:	f7fd ff05 	bl	80009a0 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1fe      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ef      	bne.n	8002b92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a6 	beq.w	8002d0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bc4:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10d      	bne.n	8002bec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b44      	ldr	r3, [pc, #272]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	4a43      	ldr	r2, [pc, #268]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6593      	str	r3, [r2, #88]	; 0x58
 8002bdc:	4b41      	ldr	r3, [pc, #260]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be8:	2301      	movs	r3, #1
 8002bea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bec:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCC_OscConfig+0x57c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d118      	bne.n	8002c2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <HAL_RCC_OscConfig+0x57c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3a      	ldr	r2, [pc, #232]	; (8002ce8 <HAL_RCC_OscConfig+0x57c>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c04:	f7fd fecc 	bl	80009a0 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fd fec8 	bl	80009a0 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e1c1      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1e:	4b32      	ldr	r3, [pc, #200]	; (8002ce8 <HAL_RCC_OscConfig+0x57c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4d8>
 8002c32:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	4a2a      	ldr	r2, [pc, #168]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c42:	e024      	b.n	8002c8e <HAL_RCC_OscConfig+0x522>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d110      	bne.n	8002c6e <HAL_RCC_OscConfig+0x502>
 8002c4c:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	4a24      	ldr	r2, [pc, #144]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c5c:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c62:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c6c:	e00f      	b.n	8002c8e <HAL_RCC_OscConfig+0x522>
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c7e:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	4a17      	ldr	r2, [pc, #92]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c86:	f023 0304 	bic.w	r3, r3, #4
 8002c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d016      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fd fe83 	bl	80009a0 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fd fe7f 	bl	80009a0 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e176      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ed      	beq.n	8002c9e <HAL_RCC_OscConfig+0x532>
 8002cc2:	e01a      	b.n	8002cfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fd fe6c 	bl	80009a0 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cca:	e00f      	b.n	8002cec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7fd fe68 	bl	80009a0 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d906      	bls.n	8002cec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e15f      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cec:	4baa      	ldr	r3, [pc, #680]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e8      	bne.n	8002ccc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfa:	7ffb      	ldrb	r3, [r7, #31]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4ba5      	ldr	r3, [pc, #660]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	4aa4      	ldr	r2, [pc, #656]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d03c      	beq.n	8002d92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01c      	beq.n	8002d5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d20:	4b9d      	ldr	r3, [pc, #628]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d26:	4a9c      	ldr	r2, [pc, #624]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fd fe36 	bl	80009a0 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d38:	f7fd fe32 	bl	80009a0 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e12b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d4a:	4b93      	ldr	r3, [pc, #588]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ef      	beq.n	8002d38 <HAL_RCC_OscConfig+0x5cc>
 8002d58:	e01b      	b.n	8002d92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d5a:	4b8f      	ldr	r3, [pc, #572]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d60:	4a8d      	ldr	r2, [pc, #564]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fd fe19 	bl	80009a0 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d72:	f7fd fe15 	bl	80009a0 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e10e      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d84:	4b84      	ldr	r3, [pc, #528]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1ef      	bne.n	8002d72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8102 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	f040 80c5 	bne.w	8002f30 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002da6:	4b7c      	ldr	r3, [pc, #496]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f003 0203 	and.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d12c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d123      	bne.n	8002e14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d11b      	bne.n	8002e14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d113      	bne.n	8002e14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d109      	bne.n	8002e14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d067      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d062      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0bb      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a5a      	ldr	r2, [pc, #360]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e36:	f7fd fdb3 	bl	80009a0 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7fd fdaf 	bl	80009a0 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e0a8      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e50:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e5c:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	4b4e      	ldr	r3, [pc, #312]	; (8002f9c <HAL_RCC_OscConfig+0x830>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e6c:	3a01      	subs	r2, #1
 8002e6e:	0112      	lsls	r2, r2, #4
 8002e70:	4311      	orrs	r1, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e76:	0212      	lsls	r2, r2, #8
 8002e78:	4311      	orrs	r1, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e7e:	0852      	lsrs	r2, r2, #1
 8002e80:	3a01      	subs	r2, #1
 8002e82:	0552      	lsls	r2, r2, #21
 8002e84:	4311      	orrs	r1, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e8a:	0852      	lsrs	r2, r2, #1
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	0652      	lsls	r2, r2, #25
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e96:	06d2      	lsls	r2, r2, #27
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	493f      	ldr	r1, [pc, #252]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ea0:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a3c      	ldr	r2, [pc, #240]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eac:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a39      	ldr	r2, [pc, #228]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eb8:	f7fd fd72 	bl	80009a0 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7fd fd6e 	bl	80009a0 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e067      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed2:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ede:	e05f      	b.n	8002fa0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e05e      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee4:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d157      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ef0:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a28      	ldr	r2, [pc, #160]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002efc:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f08:	f7fd fd4a 	bl	80009a0 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fd fd46 	bl	80009a0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e03f      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f22:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x7a4>
 8002f2e:	e037      	b.n	8002fa0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b0c      	cmp	r3, #12
 8002f34:	d02d      	beq.n	8002f92 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f36:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f40:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f4e:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002f54:	f023 0303 	bic.w	r3, r3, #3
 8002f58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002f60:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f68:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fd fd19 	bl	80009a0 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fd fd15 	bl	80009a0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e00e      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <HAL_RCC_OscConfig+0x82c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x806>
 8002f90:	e006      	b.n	8002fa0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e005      	b.n	8002fa2 <HAL_RCC_OscConfig+0x836>
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop

08002fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0c8      	b.n	8003152 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc0:	4b66      	ldr	r3, [pc, #408]	; (800315c <HAL_RCC_ClockConfig+0x1b0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d910      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fce:	4b63      	ldr	r3, [pc, #396]	; (800315c <HAL_RCC_ClockConfig+0x1b0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 0207 	bic.w	r2, r3, #7
 8002fd6:	4961      	ldr	r1, [pc, #388]	; (800315c <HAL_RCC_ClockConfig+0x1b0>)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b5f      	ldr	r3, [pc, #380]	; (800315c <HAL_RCC_ClockConfig+0x1b0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0b0      	b.n	8003152 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d04c      	beq.n	8003096 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b03      	cmp	r3, #3
 8003002:	d107      	bne.n	8003014 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003004:	4b56      	ldr	r3, [pc, #344]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d121      	bne.n	8003054 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e09e      	b.n	8003152 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d107      	bne.n	800302c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301c:	4b50      	ldr	r3, [pc, #320]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d115      	bne.n	8003054 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e092      	b.n	8003152 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003034:	4b4a      	ldr	r3, [pc, #296]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e086      	b.n	8003152 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003044:	4b46      	ldr	r3, [pc, #280]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e07e      	b.n	8003152 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003054:	4b42      	ldr	r3, [pc, #264]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 0203 	bic.w	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	493f      	ldr	r1, [pc, #252]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003066:	f7fd fc9b 	bl	80009a0 <HAL_GetTick>
 800306a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306c:	e00a      	b.n	8003084 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306e:	f7fd fc97 	bl	80009a0 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e066      	b.n	8003152 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 020c 	and.w	r2, r3, #12
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	429a      	cmp	r2, r3
 8003094:	d1eb      	bne.n	800306e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a2:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	492c      	ldr	r1, [pc, #176]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b4:	4b29      	ldr	r3, [pc, #164]	; (800315c <HAL_RCC_ClockConfig+0x1b0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d210      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_RCC_ClockConfig+0x1b0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 0207 	bic.w	r2, r3, #7
 80030ca:	4924      	ldr	r1, [pc, #144]	; (800315c <HAL_RCC_ClockConfig+0x1b0>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b22      	ldr	r3, [pc, #136]	; (800315c <HAL_RCC_ClockConfig+0x1b0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e036      	b.n	8003152 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f0:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4918      	ldr	r1, [pc, #96]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4910      	ldr	r1, [pc, #64]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003122:	f000 f825 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8003126:	4601      	mov	r1, r0
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <HAL_RCC_ClockConfig+0x1b4>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	5cd3      	ldrb	r3, [r2, r3]
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	fa21 f303 	lsr.w	r3, r1, r3
 800313e:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fbda 	bl	8000900 <HAL_InitTick>
 800314c:	4603      	mov	r3, r0
 800314e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003150:	7afb      	ldrb	r3, [r7, #11]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40022000 	.word	0x40022000
 8003160:	40021000 	.word	0x40021000
 8003164:	080091bc 	.word	0x080091bc
 8003168:	20000000 	.word	0x20000000
 800316c:	20000004 	.word	0x20000004

08003170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317e:	4b3d      	ldr	r3, [pc, #244]	; (8003274 <HAL_RCC_GetSysClockFreq+0x104>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003188:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <HAL_RCC_GetSysClockFreq+0x104>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x34>
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d121      	bne.n	80031e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d11e      	bne.n	80031e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031a4:	4b33      	ldr	r3, [pc, #204]	; (8003274 <HAL_RCC_GetSysClockFreq+0x104>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031b0:	4b30      	ldr	r3, [pc, #192]	; (8003274 <HAL_RCC_GetSysClockFreq+0x104>)
 80031b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	e005      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031c0:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <HAL_RCC_GetSysClockFreq+0x104>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031cc:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10d      	bne.n	80031f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d102      	bne.n	80031ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031e8:	4b24      	ldr	r3, [pc, #144]	; (800327c <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	e004      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031f4:	4b22      	ldr	r3, [pc, #136]	; (8003280 <HAL_RCC_GetSysClockFreq+0x110>)
 80031f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d133      	bne.n	8003266 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031fe:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <HAL_RCC_GetSysClockFreq+0x104>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d002      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0xa4>
 800320e:	2b03      	cmp	r3, #3
 8003210:	d003      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0xaa>
 8003212:	e005      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003216:	617b      	str	r3, [r7, #20]
      break;
 8003218:	e005      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800321a:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_GetSysClockFreq+0x110>)
 800321c:	617b      	str	r3, [r7, #20]
      break;
 800321e:	e002      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	617b      	str	r3, [r7, #20]
      break;
 8003224:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <HAL_RCC_GetSysClockFreq+0x104>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	3301      	adds	r3, #1
 8003232:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_RCC_GetSysClockFreq+0x104>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	fb02 f203 	mul.w	r2, r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_RCC_GetSysClockFreq+0x104>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	0e5b      	lsrs	r3, r3, #25
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	3301      	adds	r3, #1
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003266:	69bb      	ldr	r3, [r7, #24]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3724      	adds	r7, #36	; 0x24
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40021000 	.word	0x40021000
 8003278:	080091cc 	.word	0x080091cc
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200

08003284 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003290:	4b2a      	ldr	r3, [pc, #168]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800329c:	f7ff f9f2 	bl	8002684 <HAL_PWREx_GetVoltageRange>
 80032a0:	6178      	str	r0, [r7, #20]
 80032a2:	e014      	b.n	80032ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	4a24      	ldr	r2, [pc, #144]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6593      	str	r3, [r2, #88]	; 0x58
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032bc:	f7ff f9e2 	bl	8002684 <HAL_PWREx_GetVoltageRange>
 80032c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	4a1d      	ldr	r2, [pc, #116]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d4:	d10b      	bne.n	80032ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b80      	cmp	r3, #128	; 0x80
 80032da:	d919      	bls.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2ba0      	cmp	r3, #160	; 0xa0
 80032e0:	d902      	bls.n	80032e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032e2:	2302      	movs	r3, #2
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	e013      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032e8:	2301      	movs	r3, #1
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	e010      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b80      	cmp	r3, #128	; 0x80
 80032f2:	d902      	bls.n	80032fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032f4:	2303      	movs	r3, #3
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	e00a      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b80      	cmp	r3, #128	; 0x80
 80032fe:	d102      	bne.n	8003306 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003300:	2302      	movs	r3, #2
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	e004      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b70      	cmp	r3, #112	; 0x70
 800330a:	d101      	bne.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800330c:	2301      	movs	r3, #1
 800330e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 0207 	bic.w	r2, r3, #7
 8003318:	4909      	ldr	r1, [pc, #36]	; (8003340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	40022000 	.word	0x40022000

08003344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800334c:	2300      	movs	r3, #0
 800334e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003350:	2300      	movs	r3, #0
 8003352:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335c:	2b00      	cmp	r3, #0
 800335e:	d02f      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003368:	d005      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800336a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800336e:	d015      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003374:	e00f      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003376:	4bac      	ldr	r3, [pc, #688]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	4aab      	ldr	r2, [pc, #684]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003382:	e00c      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f9cc 	bl	8003728 <RCCEx_PLLSAI1_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003394:	e003      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	74fb      	strb	r3, [r7, #19]
      break;
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800339c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10b      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033a4:	4ba0      	ldr	r3, [pc, #640]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	499d      	ldr	r1, [pc, #628]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033ba:	e001      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8099 	beq.w	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ce:	2300      	movs	r3, #0
 80033d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033d2:	4b95      	ldr	r3, [pc, #596]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80033e2:	2300      	movs	r3, #0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e8:	4b8f      	ldr	r3, [pc, #572]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	4a8e      	ldr	r2, [pc, #568]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f2:	6593      	str	r3, [r2, #88]	; 0x58
 80033f4:	4b8c      	ldr	r3, [pc, #560]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003400:	2301      	movs	r3, #1
 8003402:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003404:	4b89      	ldr	r3, [pc, #548]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a88      	ldr	r2, [pc, #544]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800340a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003410:	f7fd fac6 	bl	80009a0 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003416:	e009      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003418:	f7fd fac2 	bl	80009a0 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d902      	bls.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	74fb      	strb	r3, [r7, #19]
        break;
 800342a:	e005      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800342c:	4b7f      	ldr	r3, [pc, #508]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ef      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d155      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800343e:	4b7a      	ldr	r3, [pc, #488]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003448:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01e      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	429a      	cmp	r2, r3
 8003458:	d019      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800345a:	4b73      	ldr	r3, [pc, #460]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003464:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003466:	4b70      	ldr	r3, [pc, #448]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	4a6e      	ldr	r2, [pc, #440]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800346e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003476:	4b6c      	ldr	r3, [pc, #432]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	4a6a      	ldr	r2, [pc, #424]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800347e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003486:	4a68      	ldr	r2, [pc, #416]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d016      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fd fa82 	bl	80009a0 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349e:	e00b      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fd fa7e 	bl	80009a0 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d902      	bls.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	74fb      	strb	r3, [r7, #19]
            break;
 80034b6:	e006      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b8:	4b5b      	ldr	r3, [pc, #364]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0ec      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034cc:	4b56      	ldr	r3, [pc, #344]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034da:	4953      	ldr	r1, [pc, #332]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034e2:	e004      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	74bb      	strb	r3, [r7, #18]
 80034e8:	e001      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ee:	7c7b      	ldrb	r3, [r7, #17]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d105      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f4:	4b4c      	ldr	r3, [pc, #304]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	4a4b      	ldr	r2, [pc, #300]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800350c:	4b46      	ldr	r3, [pc, #280]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f023 0203 	bic.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4943      	ldr	r1, [pc, #268]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800352e:	4b3e      	ldr	r3, [pc, #248]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f023 020c 	bic.w	r2, r3, #12
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	493a      	ldr	r1, [pc, #232]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003550:	4b35      	ldr	r3, [pc, #212]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	4932      	ldr	r1, [pc, #200]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003572:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	4929      	ldr	r1, [pc, #164]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003594:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	4921      	ldr	r1, [pc, #132]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b6:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	4918      	ldr	r1, [pc, #96]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d8:	4b13      	ldr	r3, [pc, #76]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4910      	ldr	r1, [pc, #64]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02c      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	4907      	ldr	r1, [pc, #28]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003618:	d10a      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800361a:	4b03      	ldr	r3, [pc, #12]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4a02      	ldr	r2, [pc, #8]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003624:	60d3      	str	r3, [r2, #12]
 8003626:	e015      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003628:	40021000 	.word	0x40021000
 800362c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003638:	d10c      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2101      	movs	r1, #1
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f871 	bl	8003728 <RCCEx_PLLSAI1_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d028      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003660:	4b30      	ldr	r3, [pc, #192]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	492d      	ldr	r1, [pc, #180]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800367e:	d106      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800368a:	60d3      	str	r3, [r2, #12]
 800368c:	e011      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003696:	d10c      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	2101      	movs	r1, #1
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f842 	bl	8003728 <RCCEx_PLLSAI1_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01c      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036be:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036cc:	4915      	ldr	r1, [pc, #84]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2102      	movs	r1, #2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f81f 	bl	8003728 <RCCEx_PLLSAI1_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	4904      	ldr	r1, [pc, #16]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800371a:	7cbb      	ldrb	r3, [r7, #18]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000

08003728 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003736:	4b73      	ldr	r3, [pc, #460]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d018      	beq.n	8003774 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003742:	4b70      	ldr	r3, [pc, #448]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0203 	and.w	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d10d      	bne.n	800376e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
       ||
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800375a:	4b6a      	ldr	r3, [pc, #424]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
       ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d044      	beq.n	80037f8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
 8003772:	e041      	b.n	80037f8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d00c      	beq.n	8003796 <RCCEx_PLLSAI1_Config+0x6e>
 800377c:	2b03      	cmp	r3, #3
 800377e:	d013      	beq.n	80037a8 <RCCEx_PLLSAI1_Config+0x80>
 8003780:	2b01      	cmp	r3, #1
 8003782:	d120      	bne.n	80037c6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003784:	4b5f      	ldr	r3, [pc, #380]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11d      	bne.n	80037cc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003794:	e01a      	b.n	80037cc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003796:	4b5b      	ldr	r3, [pc, #364]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d116      	bne.n	80037d0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a6:	e013      	b.n	80037d0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037a8:	4b56      	ldr	r3, [pc, #344]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10f      	bne.n	80037d4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037b4:	4b53      	ldr	r3, [pc, #332]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037c4:	e006      	b.n	80037d4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      break;
 80037ca:	e004      	b.n	80037d6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037cc:	bf00      	nop
 80037ce:	e002      	b.n	80037d6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037d0:	bf00      	nop
 80037d2:	e000      	b.n	80037d6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037d4:	bf00      	nop
    }

    if(status == HAL_OK)
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10d      	bne.n	80037f8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037dc:	4b49      	ldr	r3, [pc, #292]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6819      	ldr	r1, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	430b      	orrs	r3, r1
 80037f2:	4944      	ldr	r1, [pc, #272]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d17c      	bne.n	80038f8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037fe:	4b41      	ldr	r3, [pc, #260]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a40      	ldr	r2, [pc, #256]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003804:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380a:	f7fd f8c9 	bl	80009a0 <HAL_GetTick>
 800380e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003810:	e009      	b.n	8003826 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003812:	f7fd f8c5 	bl	80009a0 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d902      	bls.n	8003826 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	73fb      	strb	r3, [r7, #15]
        break;
 8003824:	e005      	b.n	8003832 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003826:	4b37      	ldr	r3, [pc, #220]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1ef      	bne.n	8003812 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d15f      	bne.n	80038f8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d110      	bne.n	8003860 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003846:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6892      	ldr	r2, [r2, #8]
 800384e:	0211      	lsls	r1, r2, #8
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	68d2      	ldr	r2, [r2, #12]
 8003854:	06d2      	lsls	r2, r2, #27
 8003856:	430a      	orrs	r2, r1
 8003858:	492a      	ldr	r1, [pc, #168]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	610b      	str	r3, [r1, #16]
 800385e:	e027      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d112      	bne.n	800388c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003866:	4b27      	ldr	r3, [pc, #156]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800386e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6892      	ldr	r2, [r2, #8]
 8003876:	0211      	lsls	r1, r2, #8
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6912      	ldr	r2, [r2, #16]
 800387c:	0852      	lsrs	r2, r2, #1
 800387e:	3a01      	subs	r2, #1
 8003880:	0552      	lsls	r2, r2, #21
 8003882:	430a      	orrs	r2, r1
 8003884:	491f      	ldr	r1, [pc, #124]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	610b      	str	r3, [r1, #16]
 800388a:	e011      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003894:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6892      	ldr	r2, [r2, #8]
 800389c:	0211      	lsls	r1, r2, #8
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6952      	ldr	r2, [r2, #20]
 80038a2:	0852      	lsrs	r2, r2, #1
 80038a4:	3a01      	subs	r2, #1
 80038a6:	0652      	lsls	r2, r2, #25
 80038a8:	430a      	orrs	r2, r1
 80038aa:	4916      	ldr	r1, [pc, #88]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038b0:	4b14      	ldr	r3, [pc, #80]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a13      	ldr	r2, [pc, #76]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7fd f870 	bl	80009a0 <HAL_GetTick>
 80038c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038c2:	e009      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038c4:	f7fd f86c 	bl	80009a0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d902      	bls.n	80038d8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	73fb      	strb	r3, [r7, #15]
          break;
 80038d6:	e005      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ef      	beq.n	80038c4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	4904      	ldr	r1, [pc, #16]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000

08003908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e095      	b.n	8003a46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	2b00      	cmp	r3, #0
 8003920:	d108      	bne.n	8003934 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392a:	d009      	beq.n	8003940 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	61da      	str	r2, [r3, #28]
 8003932:	e005      	b.n	8003940 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fc feaa 	bl	80006b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003976:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003980:	d902      	bls.n	8003988 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	e002      	b.n	800398e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800398c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003996:	d007      	beq.n	80039a8 <HAL_SPI_Init+0xa0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039a0:	d002      	beq.n	80039a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	ea42 0103 	orr.w	r1, r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	0c1b      	lsrs	r3, r3, #16
 8003a04:	f003 0204 	and.w	r2, r3, #4
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a24:	ea42 0103 	orr.w	r1, r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b088      	sub	sp, #32
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_SPI_Transmit+0x22>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e158      	b.n	8003d22 <HAL_SPI_Transmit+0x2d4>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a78:	f7fc ff92 	bl	80009a0 <HAL_GetTick>
 8003a7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d002      	beq.n	8003a94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a92:	e13d      	b.n	8003d10 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_SPI_Transmit+0x52>
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003aa4:	e134      	b.n	8003d10 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	88fa      	ldrh	r2, [r7, #6]
 8003abe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	88fa      	ldrh	r2, [r7, #6]
 8003ac4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af0:	d10f      	bne.n	8003b12 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d007      	beq.n	8003b30 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b38:	d94b      	bls.n	8003bd2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_SPI_Transmit+0xfa>
 8003b42:	8afb      	ldrh	r3, [r7, #22]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d13e      	bne.n	8003bc6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	1c9a      	adds	r2, r3, #2
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b6c:	e02b      	b.n	8003bc6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d112      	bne.n	8003ba2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	881a      	ldrh	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	1c9a      	adds	r2, r3, #2
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ba0:	e011      	b.n	8003bc6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba2:	f7fc fefd 	bl	80009a0 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d803      	bhi.n	8003bba <HAL_SPI_Transmit+0x16c>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d102      	bne.n	8003bc0 <HAL_SPI_Transmit+0x172>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bc4:	e0a4      	b.n	8003d10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ce      	bne.n	8003b6e <HAL_SPI_Transmit+0x120>
 8003bd0:	e07c      	b.n	8003ccc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_SPI_Transmit+0x192>
 8003bda:	8afb      	ldrh	r3, [r7, #22]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d170      	bne.n	8003cc2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d912      	bls.n	8003c10 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	881a      	ldrh	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	1c9a      	adds	r2, r3, #2
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b02      	subs	r3, #2
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c0e:	e058      	b.n	8003cc2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	7812      	ldrb	r2, [r2, #0]
 8003c1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c36:	e044      	b.n	8003cc2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d12b      	bne.n	8003c9e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d912      	bls.n	8003c76 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	881a      	ldrh	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	1c9a      	adds	r2, r3, #2
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b02      	subs	r3, #2
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c74:	e025      	b.n	8003cc2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c9c:	e011      	b.n	8003cc2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c9e:	f7fc fe7f 	bl	80009a0 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d803      	bhi.n	8003cb6 <HAL_SPI_Transmit+0x268>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb4:	d102      	bne.n	8003cbc <HAL_SPI_Transmit+0x26e>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d102      	bne.n	8003cc2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cc0:	e026      	b.n	8003d10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1b5      	bne.n	8003c38 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	6839      	ldr	r1, [r7, #0]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fb53 	bl	800437c <SPI_EndRxTxTransaction>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e000      	b.n	8003d10 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003d0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d20:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b08a      	sub	sp, #40	; 0x28
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_SPI_TransmitReceive+0x26>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e1fb      	b.n	8004148 <HAL_SPI_TransmitReceive+0x41e>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d58:	f7fc fe22 	bl	80009a0 <HAL_GetTick>
 8003d5c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d64:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d6c:	887b      	ldrh	r3, [r7, #2]
 8003d6e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d70:	887b      	ldrh	r3, [r7, #2]
 8003d72:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d74:	7efb      	ldrb	r3, [r7, #27]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d00e      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x6e>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d80:	d106      	bne.n	8003d90 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <HAL_SPI_TransmitReceive+0x66>
 8003d8a:	7efb      	ldrb	r3, [r7, #27]
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d003      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d96:	e1cd      	b.n	8004134 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_SPI_TransmitReceive+0x80>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <HAL_SPI_TransmitReceive+0x80>
 8003da4:	887b      	ldrh	r3, [r7, #2]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d103      	bne.n	8003db2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003db0:	e1c0      	b.n	8004134 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d003      	beq.n	8003dc6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2205      	movs	r2, #5
 8003dc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	887a      	ldrh	r2, [r7, #2]
 8003dd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	887a      	ldrh	r2, [r7, #2]
 8003dde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	887a      	ldrh	r2, [r7, #2]
 8003dec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	887a      	ldrh	r2, [r7, #2]
 8003df2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e08:	d802      	bhi.n	8003e10 <HAL_SPI_TransmitReceive+0xe6>
 8003e0a:	8a3b      	ldrh	r3, [r7, #16]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d908      	bls.n	8003e22 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e1e:	605a      	str	r2, [r3, #4]
 8003e20:	e007      	b.n	8003e32 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e30:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	2b40      	cmp	r3, #64	; 0x40
 8003e3e:	d007      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e58:	d97c      	bls.n	8003f54 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x13e>
 8003e62:	8a7b      	ldrh	r3, [r7, #18]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d169      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	881a      	ldrh	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	1c9a      	adds	r2, r3, #2
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e8c:	e056      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d11b      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x1aa>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_SPI_TransmitReceive+0x1aa>
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d113      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	881a      	ldrh	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	1c9a      	adds	r2, r3, #2
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d11c      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x1f2>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d016      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	b292      	uxth	r2, r2
 8003efa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	1c9a      	adds	r2, r3, #2
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f1c:	f7fc fd40 	bl	80009a0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d807      	bhi.n	8003f3c <HAL_SPI_TransmitReceive+0x212>
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d003      	beq.n	8003f3c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f3a:	e0fb      	b.n	8004134 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1a3      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x164>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d19d      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x164>
 8003f52:	e0df      	b.n	8004114 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_SPI_TransmitReceive+0x23a>
 8003f5c:	8a7b      	ldrh	r3, [r7, #18]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	f040 80cb 	bne.w	80040fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d912      	bls.n	8003f94 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	881a      	ldrh	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	1c9a      	adds	r2, r3, #2
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b02      	subs	r3, #2
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f92:	e0b2      	b.n	80040fa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	7812      	ldrb	r2, [r2, #0]
 8003fa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fba:	e09e      	b.n	80040fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d134      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x30a>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d02f      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x30a>
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d12c      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d912      	bls.n	800400a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	881a      	ldrh	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	1c9a      	adds	r2, r3, #2
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b02      	subs	r3, #2
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004008:	e012      	b.n	8004030 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	7812      	ldrb	r2, [r2, #0]
 8004016:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d148      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x3aa>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d042      	beq.n	80040d4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b01      	cmp	r3, #1
 8004058:	d923      	bls.n	80040a2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	b292      	uxth	r2, r2
 8004066:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	1c9a      	adds	r2, r3, #2
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b02      	subs	r3, #2
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	d81f      	bhi.n	80040d0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	e016      	b.n	80040d0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f103 020c 	add.w	r2, r3, #12
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	7812      	ldrb	r2, [r2, #0]
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040d0:	2301      	movs	r3, #1
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040d4:	f7fc fc64 	bl	80009a0 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d803      	bhi.n	80040ec <HAL_SPI_TransmitReceive+0x3c2>
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d102      	bne.n	80040f2 <HAL_SPI_TransmitReceive+0x3c8>
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040f8:	e01c      	b.n	8004134 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	f47f af5b 	bne.w	8003fbc <HAL_SPI_TransmitReceive+0x292>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	f47f af54 	bne.w	8003fbc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f92f 	bl	800437c <SPI_EndRxTxTransaction>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d006      	beq.n	8004132 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	661a      	str	r2, [r3, #96]	; 0x60
 8004130:	e000      	b.n	8004134 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004132:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004148:	4618      	mov	r0, r3
 800414a:	3728      	adds	r7, #40	; 0x28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004160:	f7fc fc1e 	bl	80009a0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4413      	add	r3, r2
 800416e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004170:	f7fc fc16 	bl	80009a0 <HAL_GetTick>
 8004174:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004176:	4b39      	ldr	r3, [pc, #228]	; (800425c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	015b      	lsls	r3, r3, #5
 800417c:	0d1b      	lsrs	r3, r3, #20
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	fb02 f303 	mul.w	r3, r2, r3
 8004184:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004186:	e054      	b.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d050      	beq.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004190:	f7fc fc06 	bl	80009a0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	429a      	cmp	r2, r3
 800419e:	d902      	bls.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d13d      	bne.n	8004222 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041be:	d111      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c8:	d004      	beq.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d107      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ec:	d10f      	bne.n	800420e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800420c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e017      	b.n	8004252 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	3b01      	subs	r3, #1
 8004230:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	429a      	cmp	r2, r3
 800424e:	d19b      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000000 	.word	0x20000000

08004260 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800426e:	f7fc fb97 	bl	80009a0 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	4413      	add	r3, r2
 800427c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800427e:	f7fc fb8f 	bl	80009a0 <HAL_GetTick>
 8004282:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004284:	4b3c      	ldr	r3, [pc, #240]	; (8004378 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	00da      	lsls	r2, r3, #3
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	0d1b      	lsrs	r3, r3, #20
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800429c:	e05f      	b.n	800435e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042a4:	d106      	bne.n	80042b4 <SPI_WaitFifoStateUntilTimeout+0x54>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d103      	bne.n	80042b4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d050      	beq.n	800435e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042bc:	f7fc fb70 	bl	80009a0 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d902      	bls.n	80042d2 <SPI_WaitFifoStateUntilTimeout+0x72>
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d13d      	bne.n	800434e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ea:	d111      	bne.n	8004310 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f4:	d004      	beq.n	8004300 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fe:	d107      	bne.n	8004310 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004318:	d10f      	bne.n	800433a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004338:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e010      	b.n	8004370 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3b01      	subs	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4013      	ands	r3, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	429a      	cmp	r2, r3
 800436c:	d197      	bne.n	800429e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000000 	.word	0x20000000

0800437c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2200      	movs	r2, #0
 8004390:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff ff63 	bl	8004260 <SPI_WaitFifoStateUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e027      	b.n	8004400 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2180      	movs	r1, #128	; 0x80
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff fec8 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e014      	b.n	8004400 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2200      	movs	r2, #0
 80043de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff ff3c 	bl	8004260 <SPI_WaitFifoStateUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f2:	f043 0220 	orr.w	r2, r3, #32
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e000      	b.n	8004400 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004408:	b084      	sub	sp, #16
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	f107 0014 	add.w	r0, r7, #20
 8004416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	b004      	add	sp, #16
 8004428:	4770      	bx	lr

0800442a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800442a:	b480      	push	{r7}
 800442c:	b085      	sub	sp, #20
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800443a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800443e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	b29a      	uxth	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004460:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004464:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	b29b      	uxth	r3, r3
 8004472:	43db      	mvns	r3, r3
 8004474:	b29b      	uxth	r3, r3
 8004476:	4013      	ands	r3, r2
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	460b      	mov	r3, r1
 8004498:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044a8:	b084      	sub	sp, #16
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	f107 0014 	add.w	r0, r7, #20
 80044b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	b004      	add	sp, #16
 80044e8:	4770      	bx	lr
	...

080044ec <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b09b      	sub	sp, #108	; 0x6c
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	78db      	ldrb	r3, [r3, #3]
 800451a:	2b03      	cmp	r3, #3
 800451c:	d81f      	bhi.n	800455e <USB_ActivateEndpoint+0x72>
 800451e:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <USB_ActivateEndpoint+0x38>)
 8004520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004524:	08004535 	.word	0x08004535
 8004528:	08004551 	.word	0x08004551
 800452c:	08004567 	.word	0x08004567
 8004530:	08004543 	.word	0x08004543
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004534:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800453c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004540:	e012      	b.n	8004568 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004542:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004546:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800454a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800454e:	e00b      	b.n	8004568 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004550:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004554:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004558:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800455c:	e004      	b.n	8004568 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004564:	e000      	b.n	8004568 <USB_ActivateEndpoint+0x7c>
      break;
 8004566:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	441a      	add	r2, r3
 8004572:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800457e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004586:	b29b      	uxth	r3, r3
 8004588:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	b21b      	sxth	r3, r3
 800459a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a2:	b21a      	sxth	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	4313      	orrs	r3, r2
 80045ac:	b21b      	sxth	r3, r3
 80045ae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	441a      	add	r2, r3
 80045bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80045c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	7b1b      	ldrb	r3, [r3, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f040 8149 	bne.w	8004870 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	785b      	ldrb	r3, [r3, #1]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 8084 	beq.w	80046f0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	4413      	add	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	00da      	lsls	r2, r3, #3
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	88db      	ldrh	r3, [r3, #6]
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	b29b      	uxth	r3, r3
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	81fb      	strh	r3, [r7, #14]
 800462a:	89fb      	ldrh	r3, [r7, #14]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01b      	beq.n	800466c <USB_ActivateEndpoint+0x180>
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	81bb      	strh	r3, [r7, #12]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	89bb      	ldrh	r3, [r7, #12]
 8004658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800465c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004664:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004668:	b29b      	uxth	r3, r3
 800466a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	78db      	ldrb	r3, [r3, #3]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d020      	beq.n	80046b6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800468a:	813b      	strh	r3, [r7, #8]
 800468c:	893b      	ldrh	r3, [r7, #8]
 800468e:	f083 0320 	eor.w	r3, r3, #32
 8004692:	813b      	strh	r3, [r7, #8]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	893b      	ldrh	r3, [r7, #8]
 80046a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	8013      	strh	r3, [r2, #0]
 80046b4:	e27f      	b.n	8004bb6 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046cc:	817b      	strh	r3, [r7, #10]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	897b      	ldrh	r3, [r7, #10]
 80046da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	8013      	strh	r3, [r2, #0]
 80046ee:	e262      	b.n	8004bb6 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	4413      	add	r3, r2
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	00da      	lsls	r2, r3, #3
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	4413      	add	r3, r2
 800470e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	88db      	ldrh	r3, [r3, #6]
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	b29b      	uxth	r3, r3
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800472e:	b29b      	uxth	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	4413      	add	r3, r2
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	00da      	lsls	r2, r3, #3
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	4413      	add	r3, r2
 8004742:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004746:	623b      	str	r3, [r7, #32]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d112      	bne.n	8004776 <USB_ActivateEndpoint+0x28a>
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29b      	uxth	r3, r3
 8004756:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800475a:	b29a      	uxth	r2, r3
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800476e:	b29a      	uxth	r2, r3
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	801a      	strh	r2, [r3, #0]
 8004774:	e02f      	b.n	80047d6 <USB_ActivateEndpoint+0x2ea>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b3e      	cmp	r3, #62	; 0x3e
 800477c:	d813      	bhi.n	80047a6 <USB_ActivateEndpoint+0x2ba>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	663b      	str	r3, [r7, #96]	; 0x60
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <USB_ActivateEndpoint+0x2ac>
 8004792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004794:	3301      	adds	r3, #1
 8004796:	663b      	str	r3, [r7, #96]	; 0x60
 8004798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800479a:	b29b      	uxth	r3, r3
 800479c:	029b      	lsls	r3, r3, #10
 800479e:	b29a      	uxth	r2, r3
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	801a      	strh	r2, [r3, #0]
 80047a4:	e017      	b.n	80047d6 <USB_ActivateEndpoint+0x2ea>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	663b      	str	r3, [r7, #96]	; 0x60
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <USB_ActivateEndpoint+0x2d4>
 80047ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047bc:	3b01      	subs	r3, #1
 80047be:	663b      	str	r3, [r7, #96]	; 0x60
 80047c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	029b      	lsls	r3, r3, #10
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	83fb      	strh	r3, [r7, #30]
 80047e4:	8bfb      	ldrh	r3, [r7, #30]
 80047e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01b      	beq.n	8004826 <USB_ActivateEndpoint+0x33a>
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004804:	83bb      	strh	r3, [r7, #28]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	441a      	add	r2, r3
 8004810:	8bbb      	ldrh	r3, [r7, #28]
 8004812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483c:	837b      	strh	r3, [r7, #26]
 800483e:	8b7b      	ldrh	r3, [r7, #26]
 8004840:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004844:	837b      	strh	r3, [r7, #26]
 8004846:	8b7b      	ldrh	r3, [r7, #26]
 8004848:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800484c:	837b      	strh	r3, [r7, #26]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	8b7b      	ldrh	r3, [r7, #26]
 800485a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]
 800486e:	e1a2      	b.n	8004bb6 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048bc:	4413      	add	r3, r2
 80048be:	65bb      	str	r3, [r7, #88]	; 0x58
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	00da      	lsls	r2, r3, #3
 80048c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ce:	657b      	str	r3, [r7, #84]	; 0x54
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	891b      	ldrh	r3, [r3, #8]
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	653b      	str	r3, [r7, #80]	; 0x50
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f0:	4413      	add	r3, r2
 80048f2:	653b      	str	r3, [r7, #80]	; 0x50
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	00da      	lsls	r2, r3, #3
 80048fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fc:	4413      	add	r3, r2
 80048fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	895b      	ldrh	r3, [r3, #10]
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	b29b      	uxth	r3, r3
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004912:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	785b      	ldrb	r3, [r3, #1]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f040 8091 	bne.w	8004a40 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800492c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800492e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01b      	beq.n	800496e <USB_ActivateEndpoint+0x482>
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800495a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004962:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496a:	b29b      	uxth	r3, r3
 800496c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	873b      	strh	r3, [r7, #56]	; 0x38
 800497c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01b      	beq.n	80049be <USB_ActivateEndpoint+0x4d2>
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80049d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80049de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	441a      	add	r2, r3
 80049f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1c:	867b      	strh	r3, [r7, #50]	; 0x32
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	441a      	add	r2, r3
 8004a28:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	8013      	strh	r3, [r2, #0]
 8004a3e:	e0ba      	b.n	8004bb6 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004a50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01d      	beq.n	8004a98 <USB_ActivateEndpoint+0x5ac>
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a72:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004aa8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01d      	beq.n	8004af0 <USB_ActivateEndpoint+0x604>
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	78db      	ldrb	r3, [r3, #3]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d024      	beq.n	8004b42 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b16:	f083 0320 	eor.w	r3, r3, #32
 8004b1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	441a      	add	r2, r3
 8004b28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]
 8004b40:	e01d      	b.n	8004b7e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b94:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004bb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	376c      	adds	r7, #108	; 0x6c
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop

08004bc8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b08d      	sub	sp, #52	; 0x34
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	7b1b      	ldrb	r3, [r3, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f040 808e 	bne.w	8004cf8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d044      	beq.n	8004c6e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	81bb      	strh	r3, [r7, #12]
 8004bf2:	89bb      	ldrh	r3, [r7, #12]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01b      	beq.n	8004c34 <USB_DeactivateEndpoint+0x6c>
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	817b      	strh	r3, [r7, #10]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	897b      	ldrh	r3, [r7, #10]
 8004c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4a:	813b      	strh	r3, [r7, #8]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	893b      	ldrh	r3, [r7, #8]
 8004c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8013      	strh	r3, [r2, #0]
 8004c6c:	e192      	b.n	8004f94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	827b      	strh	r3, [r7, #18]
 8004c7c:	8a7b      	ldrh	r3, [r7, #18]
 8004c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01b      	beq.n	8004cbe <USB_DeactivateEndpoint+0xf6>
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9c:	823b      	strh	r3, [r7, #16]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	441a      	add	r2, r3
 8004ca8:	8a3b      	ldrh	r3, [r7, #16]
 8004caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd4:	81fb      	strh	r3, [r7, #14]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	441a      	add	r2, r3
 8004ce0:	89fb      	ldrh	r3, [r7, #14]
 8004ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	8013      	strh	r3, [r2, #0]
 8004cf6:	e14d      	b.n	8004f94 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	785b      	ldrb	r3, [r3, #1]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 80a5 	bne.w	8004e4c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	843b      	strh	r3, [r7, #32]
 8004d10:	8c3b      	ldrh	r3, [r7, #32]
 8004d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01b      	beq.n	8004d52 <USB_DeactivateEndpoint+0x18a>
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d30:	83fb      	strh	r3, [r7, #30]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	441a      	add	r2, r3
 8004d3c:	8bfb      	ldrh	r3, [r7, #30]
 8004d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	83bb      	strh	r3, [r7, #28]
 8004d60:	8bbb      	ldrh	r3, [r7, #28]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01b      	beq.n	8004da2 <USB_DeactivateEndpoint+0x1da>
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d80:	837b      	strh	r3, [r7, #26]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	441a      	add	r2, r3
 8004d8c:	8b7b      	ldrh	r3, [r7, #26]
 8004d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db8:	833b      	strh	r3, [r7, #24]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	441a      	add	r2, r3
 8004dc4:	8b3b      	ldrh	r3, [r7, #24]
 8004dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df0:	82fb      	strh	r3, [r7, #22]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	441a      	add	r2, r3
 8004dfc:	8afb      	ldrh	r3, [r7, #22]
 8004dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e28:	82bb      	strh	r3, [r7, #20]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	441a      	add	r2, r3
 8004e34:	8abb      	ldrh	r3, [r7, #20]
 8004e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	8013      	strh	r3, [r2, #0]
 8004e4a:	e0a3      	b.n	8004f94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004e5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01b      	beq.n	8004e9c <USB_DeactivateEndpoint+0x2d4>
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004eaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01b      	beq.n	8004eec <USB_DeactivateEndpoint+0x324>
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eca:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	441a      	add	r2, r3
 8004ed6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	441a      	add	r2, r3
 8004f0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f72:	847b      	strh	r3, [r7, #34]	; 0x22
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	441a      	add	r2, r3
 8004f7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3734      	adds	r7, #52	; 0x34
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b0c4      	sub	sp, #272	; 0x110
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	1d3b      	adds	r3, r7, #4
 8004faa:	6018      	str	r0, [r3, #0]
 8004fac:	463b      	mov	r3, r7
 8004fae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	785b      	ldrb	r3, [r3, #1]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	f040 8566 	bne.w	8005a88 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	463b      	mov	r3, r7
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d905      	bls.n	8004fd8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004fcc:	463b      	mov	r3, r7
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004fd6:	e004      	b.n	8004fe2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004fd8:	463b      	mov	r3, r7
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	7b1b      	ldrb	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d12c      	bne.n	8005046 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004fec:	463b      	mov	r3, r7
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6959      	ldr	r1, [r3, #20]
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	88da      	ldrh	r2, [r3, #6]
 8004ff8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	1d38      	adds	r0, r7, #4
 8005000:	6800      	ldr	r0, [r0, #0]
 8005002:	f001 fa58 	bl	80064b6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005006:	1d3b      	adds	r3, r7, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	1d3b      	adds	r3, r7, #4
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005014:	b29b      	uxth	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	463b      	mov	r3, r7
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	00da      	lsls	r2, r3, #3
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	4413      	add	r3, r2
 800502a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800502e:	f107 0310 	add.w	r3, r7, #16
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005038:	b29a      	uxth	r2, r3
 800503a:	f107 0310 	add.w	r3, r7, #16
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	801a      	strh	r2, [r3, #0]
 8005042:	f000 bcec 	b.w	8005a1e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005046:	463b      	mov	r3, r7
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	78db      	ldrb	r3, [r3, #3]
 800504c:	2b02      	cmp	r3, #2
 800504e:	f040 8356 	bne.w	80056fe <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005052:	463b      	mov	r3, r7
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	463b      	mov	r3, r7
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	429a      	cmp	r2, r3
 8005060:	f240 82fa 	bls.w	8005658 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005064:	1d3b      	adds	r3, r7, #4
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	463b      	mov	r3, r7
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	463b      	mov	r3, r7
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	441a      	add	r2, r3
 8005090:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80050b2:	463b      	mov	r3, r7
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050bc:	1ad2      	subs	r2, r2, r3
 80050be:	463b      	mov	r3, r7
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	463b      	mov	r3, r7
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 815e 	beq.w	800539c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050e0:	1d3b      	adds	r3, r7, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	637b      	str	r3, [r7, #52]	; 0x34
 80050e6:	463b      	mov	r3, r7
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d164      	bne.n	80051ba <USB_EPStartXfer+0x218>
 80050f0:	1d3b      	adds	r3, r7, #4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050fe:	b29b      	uxth	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	4413      	add	r3, r2
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005108:	463b      	mov	r3, r7
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	00da      	lsls	r2, r3, #3
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	4413      	add	r3, r2
 8005114:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
 800511a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800511e:	2b00      	cmp	r3, #0
 8005120:	d112      	bne.n	8005148 <USB_EPStartXfer+0x1a6>
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800512c:	b29a      	uxth	r2, r3
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	801a      	strh	r2, [r3, #0]
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800513c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005140:	b29a      	uxth	r2, r3
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	801a      	strh	r2, [r3, #0]
 8005146:	e054      	b.n	80051f2 <USB_EPStartXfer+0x250>
 8005148:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800514c:	2b3e      	cmp	r3, #62	; 0x3e
 800514e:	d817      	bhi.n	8005180 <USB_EPStartXfer+0x1de>
 8005150:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800515a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d004      	beq.n	8005170 <USB_EPStartXfer+0x1ce>
 8005166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800516a:	3301      	adds	r3, #1
 800516c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005174:	b29b      	uxth	r3, r3
 8005176:	029b      	lsls	r3, r3, #10
 8005178:	b29a      	uxth	r2, r3
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	801a      	strh	r2, [r3, #0]
 800517e:	e038      	b.n	80051f2 <USB_EPStartXfer+0x250>
 8005180:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800518a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800518e:	f003 031f 	and.w	r3, r3, #31
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <USB_EPStartXfer+0x1fe>
 8005196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519a:	3b01      	subs	r3, #1
 800519c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80051a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	029b      	lsls	r3, r3, #10
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	e01b      	b.n	80051f2 <USB_EPStartXfer+0x250>
 80051ba:	463b      	mov	r3, r7
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d116      	bne.n	80051f2 <USB_EPStartXfer+0x250>
 80051c4:	1d3b      	adds	r3, r7, #4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d2:	4413      	add	r3, r2
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
 80051d6:	463b      	mov	r3, r7
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	00da      	lsls	r2, r3, #3
 80051de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e0:	4413      	add	r3, r2
 80051e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051e6:	633b      	str	r3, [r7, #48]	; 0x30
 80051e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051f2:	463b      	mov	r3, r7
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	895b      	ldrh	r3, [r3, #10]
 80051f8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051fc:	463b      	mov	r3, r7
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6959      	ldr	r1, [r3, #20]
 8005202:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005206:	b29b      	uxth	r3, r3
 8005208:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800520c:	1d38      	adds	r0, r7, #4
 800520e:	6800      	ldr	r0, [r0, #0]
 8005210:	f001 f951 	bl	80064b6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005214:	463b      	mov	r3, r7
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695a      	ldr	r2, [r3, #20]
 800521a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800521e:	441a      	add	r2, r3
 8005220:	463b      	mov	r3, r7
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005226:	463b      	mov	r3, r7
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6a1a      	ldr	r2, [r3, #32]
 800522c:	463b      	mov	r3, r7
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	429a      	cmp	r2, r3
 8005234:	d90e      	bls.n	8005254 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8005236:	463b      	mov	r3, r7
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005240:	463b      	mov	r3, r7
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6a1a      	ldr	r2, [r3, #32]
 8005246:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	463b      	mov	r3, r7
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	621a      	str	r2, [r3, #32]
 8005252:	e008      	b.n	8005266 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005254:	463b      	mov	r3, r7
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800525e:	463b      	mov	r3, r7
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2200      	movs	r2, #0
 8005264:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005266:	463b      	mov	r3, r7
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d164      	bne.n	800533a <USB_EPStartXfer+0x398>
 8005270:	1d3b      	adds	r3, r7, #4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527e:	b29b      	uxth	r3, r3
 8005280:	461a      	mov	r2, r3
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	463b      	mov	r3, r7
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	00da      	lsls	r2, r3, #3
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d112      	bne.n	80052c8 <USB_EPStartXfer+0x326>
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	e057      	b.n	8005378 <USB_EPStartXfer+0x3d6>
 80052c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052cc:	2b3e      	cmp	r3, #62	; 0x3e
 80052ce:	d817      	bhi.n	8005300 <USB_EPStartXfer+0x35e>
 80052d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <USB_EPStartXfer+0x34e>
 80052e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052ea:	3301      	adds	r3, #1
 80052ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	029b      	lsls	r3, r3, #10
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e03b      	b.n	8005378 <USB_EPStartXfer+0x3d6>
 8005300:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800530a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2b00      	cmp	r3, #0
 8005314:	d104      	bne.n	8005320 <USB_EPStartXfer+0x37e>
 8005316:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800531a:	3b01      	subs	r3, #1
 800531c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005320:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005324:	b29b      	uxth	r3, r3
 8005326:	029b      	lsls	r3, r3, #10
 8005328:	b29b      	uxth	r3, r3
 800532a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005332:	b29a      	uxth	r2, r3
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	e01e      	b.n	8005378 <USB_EPStartXfer+0x3d6>
 800533a:	463b      	mov	r3, r7
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d119      	bne.n	8005378 <USB_EPStartXfer+0x3d6>
 8005344:	1d3b      	adds	r3, r7, #4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
 800534a:	1d3b      	adds	r3, r7, #4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005352:	b29b      	uxth	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	4413      	add	r3, r2
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	00da      	lsls	r2, r3, #3
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	4413      	add	r3, r2
 8005368:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800536c:	623b      	str	r3, [r7, #32]
 800536e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005372:	b29a      	uxth	r2, r3
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005378:	463b      	mov	r3, r7
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	891b      	ldrh	r3, [r3, #8]
 800537e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005382:	463b      	mov	r3, r7
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6959      	ldr	r1, [r3, #20]
 8005388:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800538c:	b29b      	uxth	r3, r3
 800538e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005392:	1d38      	adds	r0, r7, #4
 8005394:	6800      	ldr	r0, [r0, #0]
 8005396:	f001 f88e 	bl	80064b6 <USB_WritePMA>
 800539a:	e340      	b.n	8005a1e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800539c:	463b      	mov	r3, r7
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	785b      	ldrb	r3, [r3, #1]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d164      	bne.n	8005470 <USB_EPStartXfer+0x4ce>
 80053a6:	1d3b      	adds	r3, r7, #4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ac:	1d3b      	adds	r3, r7, #4
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ba:	4413      	add	r3, r2
 80053bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053be:	463b      	mov	r3, r7
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	00da      	lsls	r2, r3, #3
 80053c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c8:	4413      	add	r3, r2
 80053ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d112      	bne.n	80053fe <USB_EPStartXfer+0x45c>
 80053d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e6:	801a      	strh	r2, [r3, #0]
 80053e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053fa:	801a      	strh	r2, [r3, #0]
 80053fc:	e057      	b.n	80054ae <USB_EPStartXfer+0x50c>
 80053fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005402:	2b3e      	cmp	r3, #62	; 0x3e
 8005404:	d817      	bhi.n	8005436 <USB_EPStartXfer+0x494>
 8005406:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005410:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <USB_EPStartXfer+0x484>
 800541c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005420:	3301      	adds	r3, #1
 8005422:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800542a:	b29b      	uxth	r3, r3
 800542c:	029b      	lsls	r3, r3, #10
 800542e:	b29a      	uxth	r2, r3
 8005430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e03b      	b.n	80054ae <USB_EPStartXfer+0x50c>
 8005436:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005440:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005444:	f003 031f 	and.w	r3, r3, #31
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <USB_EPStartXfer+0x4b4>
 800544c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005450:	3b01      	subs	r3, #1
 8005452:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800545a:	b29b      	uxth	r3, r3
 800545c:	029b      	lsls	r3, r3, #10
 800545e:	b29b      	uxth	r3, r3
 8005460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005468:	b29a      	uxth	r2, r3
 800546a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800546c:	801a      	strh	r2, [r3, #0]
 800546e:	e01e      	b.n	80054ae <USB_EPStartXfer+0x50c>
 8005470:	463b      	mov	r3, r7
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d119      	bne.n	80054ae <USB_EPStartXfer+0x50c>
 800547a:	1d3b      	adds	r3, r7, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	657b      	str	r3, [r7, #84]	; 0x54
 8005480:	1d3b      	adds	r3, r7, #4
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005488:	b29b      	uxth	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800548e:	4413      	add	r3, r2
 8005490:	657b      	str	r3, [r7, #84]	; 0x54
 8005492:	463b      	mov	r3, r7
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	00da      	lsls	r2, r3, #3
 800549a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800549c:	4413      	add	r3, r2
 800549e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054a2:	653b      	str	r3, [r7, #80]	; 0x50
 80054a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054ae:	463b      	mov	r3, r7
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	891b      	ldrh	r3, [r3, #8]
 80054b4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054b8:	463b      	mov	r3, r7
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6959      	ldr	r1, [r3, #20]
 80054be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80054c8:	1d38      	adds	r0, r7, #4
 80054ca:	6800      	ldr	r0, [r0, #0]
 80054cc:	f000 fff3 	bl	80064b6 <USB_WritePMA>
            ep->xfer_buff += len;
 80054d0:	463b      	mov	r3, r7
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695a      	ldr	r2, [r3, #20]
 80054d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054da:	441a      	add	r2, r3
 80054dc:	463b      	mov	r3, r7
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054e2:	463b      	mov	r3, r7
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	463b      	mov	r3, r7
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d90e      	bls.n	8005510 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 80054f2:	463b      	mov	r3, r7
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80054fc:	463b      	mov	r3, r7
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6a1a      	ldr	r2, [r3, #32]
 8005502:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005506:	1ad2      	subs	r2, r2, r3
 8005508:	463b      	mov	r3, r7
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	621a      	str	r2, [r3, #32]
 800550e:	e008      	b.n	8005522 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005510:	463b      	mov	r3, r7
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800551a:	463b      	mov	r3, r7
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2200      	movs	r2, #0
 8005520:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005522:	1d3b      	adds	r3, r7, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	647b      	str	r3, [r7, #68]	; 0x44
 8005528:	463b      	mov	r3, r7
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d164      	bne.n	80055fc <USB_EPStartXfer+0x65a>
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005538:	1d3b      	adds	r3, r7, #4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005540:	b29b      	uxth	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005546:	4413      	add	r3, r2
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554a:	463b      	mov	r3, r7
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	00da      	lsls	r2, r3, #3
 8005552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005554:	4413      	add	r3, r2
 8005556:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800555a:	63bb      	str	r3, [r7, #56]	; 0x38
 800555c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005560:	2b00      	cmp	r3, #0
 8005562:	d112      	bne.n	800558a <USB_EPStartXfer+0x5e8>
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800556e:	b29a      	uxth	r2, r3
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	801a      	strh	r2, [r3, #0]
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800557e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005582:	b29a      	uxth	r2, r3
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	e054      	b.n	8005634 <USB_EPStartXfer+0x692>
 800558a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800558e:	2b3e      	cmp	r3, #62	; 0x3e
 8005590:	d817      	bhi.n	80055c2 <USB_EPStartXfer+0x620>
 8005592:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800559c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <USB_EPStartXfer+0x610>
 80055a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055ac:	3301      	adds	r3, #1
 80055ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	029b      	lsls	r3, r3, #10
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	801a      	strh	r2, [r3, #0]
 80055c0:	e038      	b.n	8005634 <USB_EPStartXfer+0x692>
 80055c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <USB_EPStartXfer+0x640>
 80055d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055dc:	3b01      	subs	r3, #1
 80055de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	029b      	lsls	r3, r3, #10
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	e01b      	b.n	8005634 <USB_EPStartXfer+0x692>
 80055fc:	463b      	mov	r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d116      	bne.n	8005634 <USB_EPStartXfer+0x692>
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560e:	b29b      	uxth	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005614:	4413      	add	r3, r2
 8005616:	647b      	str	r3, [r7, #68]	; 0x44
 8005618:	463b      	mov	r3, r7
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	00da      	lsls	r2, r3, #3
 8005620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005622:	4413      	add	r3, r2
 8005624:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005628:	643b      	str	r3, [r7, #64]	; 0x40
 800562a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800562e:	b29a      	uxth	r2, r3
 8005630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005632:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005634:	463b      	mov	r3, r7
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	895b      	ldrh	r3, [r3, #10]
 800563a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800563e:	463b      	mov	r3, r7
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6959      	ldr	r1, [r3, #20]
 8005644:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005648:	b29b      	uxth	r3, r3
 800564a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800564e:	1d38      	adds	r0, r7, #4
 8005650:	6800      	ldr	r0, [r0, #0]
 8005652:	f000 ff30 	bl	80064b6 <USB_WritePMA>
 8005656:	e1e2      	b.n	8005a1e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005662:	1d3b      	adds	r3, r7, #4
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	463b      	mov	r3, r7
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005680:	1d3b      	adds	r3, r7, #4
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	463b      	mov	r3, r7
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	441a      	add	r2, r3
 800568e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	663b      	str	r3, [r7, #96]	; 0x60
 80056ac:	1d3b      	adds	r3, r7, #4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056ba:	4413      	add	r3, r2
 80056bc:	663b      	str	r3, [r7, #96]	; 0x60
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	00da      	lsls	r2, r3, #3
 80056c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056c8:	4413      	add	r3, r2
 80056ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056da:	463b      	mov	r3, r7
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	891b      	ldrh	r3, [r3, #8]
 80056e0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056e4:	463b      	mov	r3, r7
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6959      	ldr	r1, [r3, #20]
 80056ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80056f4:	1d38      	adds	r0, r7, #4
 80056f6:	6800      	ldr	r0, [r0, #0]
 80056f8:	f000 fedd 	bl	80064b6 <USB_WritePMA>
 80056fc:	e18f      	b.n	8005a1e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056fe:	1d3b      	adds	r3, r7, #4
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	463b      	mov	r3, r7
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 808f 	beq.w	8005838 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800571a:	1d3b      	adds	r3, r7, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d164      	bne.n	80057f4 <USB_EPStartXfer+0x852>
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	673b      	str	r3, [r7, #112]	; 0x70
 8005730:	1d3b      	adds	r3, r7, #4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005738:	b29b      	uxth	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800573e:	4413      	add	r3, r2
 8005740:	673b      	str	r3, [r7, #112]	; 0x70
 8005742:	463b      	mov	r3, r7
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	00da      	lsls	r2, r3, #3
 800574a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800574c:	4413      	add	r3, r2
 800574e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005752:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005754:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005758:	2b00      	cmp	r3, #0
 800575a:	d112      	bne.n	8005782 <USB_EPStartXfer+0x7e0>
 800575c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005766:	b29a      	uxth	r2, r3
 8005768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	b29b      	uxth	r3, r3
 8005772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577a:	b29a      	uxth	r2, r3
 800577c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	e054      	b.n	800582c <USB_EPStartXfer+0x88a>
 8005782:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005786:	2b3e      	cmp	r3, #62	; 0x3e
 8005788:	d817      	bhi.n	80057ba <USB_EPStartXfer+0x818>
 800578a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005794:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <USB_EPStartXfer+0x808>
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a4:	3301      	adds	r3, #1
 80057a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	029b      	lsls	r3, r3, #10
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b6:	801a      	strh	r2, [r3, #0]
 80057b8:	e038      	b.n	800582c <USB_EPStartXfer+0x88a>
 80057ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <USB_EPStartXfer+0x838>
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	3b01      	subs	r3, #1
 80057d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057de:	b29b      	uxth	r3, r3
 80057e0:	029b      	lsls	r3, r3, #10
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	e01b      	b.n	800582c <USB_EPStartXfer+0x88a>
 80057f4:	463b      	mov	r3, r7
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d116      	bne.n	800582c <USB_EPStartXfer+0x88a>
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005806:	b29b      	uxth	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800580c:	4413      	add	r3, r2
 800580e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005810:	463b      	mov	r3, r7
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	00da      	lsls	r2, r3, #3
 8005818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800581a:	4413      	add	r3, r2
 800581c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005820:	677b      	str	r3, [r7, #116]	; 0x74
 8005822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005826:	b29a      	uxth	r2, r3
 8005828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800582a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	895b      	ldrh	r3, [r3, #10]
 8005832:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005836:	e097      	b.n	8005968 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005838:	463b      	mov	r3, r7
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	785b      	ldrb	r3, [r3, #1]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d168      	bne.n	8005914 <USB_EPStartXfer+0x972>
 8005842:	1d3b      	adds	r3, r7, #4
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800585a:	4413      	add	r3, r2
 800585c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005860:	463b      	mov	r3, r7
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	00da      	lsls	r2, r3, #3
 8005868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800586c:	4413      	add	r3, r2
 800586e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005872:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005874:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005878:	2b00      	cmp	r3, #0
 800587a:	d112      	bne.n	80058a2 <USB_EPStartXfer+0x900>
 800587c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005886:	b29a      	uxth	r2, r3
 8005888:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800588a:	801a      	strh	r2, [r3, #0]
 800588c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800589a:	b29a      	uxth	r2, r3
 800589c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	e05d      	b.n	800595e <USB_EPStartXfer+0x9bc>
 80058a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058a6:	2b3e      	cmp	r3, #62	; 0x3e
 80058a8:	d817      	bhi.n	80058da <USB_EPStartXfer+0x938>
 80058aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058ae:	085b      	lsrs	r3, r3, #1
 80058b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <USB_EPStartXfer+0x928>
 80058c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058c4:	3301      	adds	r3, #1
 80058c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	029b      	lsls	r3, r3, #10
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	e041      	b.n	800595e <USB_EPStartXfer+0x9bc>
 80058da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058e8:	f003 031f 	and.w	r3, r3, #31
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <USB_EPStartXfer+0x958>
 80058f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058f4:	3b01      	subs	r3, #1
 80058f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058fe:	b29b      	uxth	r3, r3
 8005900:	029b      	lsls	r3, r3, #10
 8005902:	b29b      	uxth	r3, r3
 8005904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590c:	b29a      	uxth	r2, r3
 800590e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	e024      	b.n	800595e <USB_EPStartXfer+0x9bc>
 8005914:	463b      	mov	r3, r7
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d11f      	bne.n	800595e <USB_EPStartXfer+0x9bc>
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005926:	1d3b      	adds	r3, r7, #4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800592e:	b29b      	uxth	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005936:	4413      	add	r3, r2
 8005938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800593c:	463b      	mov	r3, r7
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	00da      	lsls	r2, r3, #3
 8005944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005948:	4413      	add	r3, r2
 800594a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800594e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005952:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005956:	b29a      	uxth	r2, r3
 8005958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800595c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	891b      	ldrh	r3, [r3, #8]
 8005964:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005968:	463b      	mov	r3, r7
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6959      	ldr	r1, [r3, #20]
 800596e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005972:	b29b      	uxth	r3, r3
 8005974:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005978:	1d38      	adds	r0, r7, #4
 800597a:	6800      	ldr	r0, [r0, #0]
 800597c:	f000 fd9b 	bl	80064b6 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005980:	463b      	mov	r3, r7
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d122      	bne.n	80059d0 <USB_EPStartXfer+0xa2e>
 800598a:	1d3b      	adds	r3, r7, #4
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	463b      	mov	r3, r7
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	463b      	mov	r3, r7
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80059ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	8013      	strh	r3, [r2, #0]
 80059ce:	e026      	b.n	8005a1e <USB_EPStartXfer+0xa7c>
 80059d0:	463b      	mov	r3, r7
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d121      	bne.n	8005a1e <USB_EPStartXfer+0xa7c>
 80059da:	1d3b      	adds	r3, r7, #4
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	463b      	mov	r3, r7
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80059f8:	1d3b      	adds	r3, r7, #4
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	463b      	mov	r3, r7
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a1e:	1d3b      	adds	r3, r7, #4
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	463b      	mov	r3, r7
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f107 020e 	add.w	r2, r7, #14
 8005a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3c:	8013      	strh	r3, [r2, #0]
 8005a3e:	f107 030e 	add.w	r3, r7, #14
 8005a42:	f107 020e 	add.w	r2, r7, #14
 8005a46:	8812      	ldrh	r2, [r2, #0]
 8005a48:	f082 0210 	eor.w	r2, r2, #16
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	f107 030e 	add.w	r3, r7, #14
 8005a52:	f107 020e 	add.w	r2, r7, #14
 8005a56:	8812      	ldrh	r2, [r2, #0]
 8005a58:	f082 0220 	eor.w	r2, r2, #32
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	1d3b      	adds	r3, r7, #4
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	463b      	mov	r3, r7
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	441a      	add	r2, r3
 8005a6c:	f107 030e 	add.w	r3, r7, #14
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]
 8005a86:	e3b5      	b.n	80061f4 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a88:	463b      	mov	r3, r7
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	7b1b      	ldrb	r3, [r3, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f040 8090 	bne.w	8005bb4 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8005a94:	463b      	mov	r3, r7
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d90e      	bls.n	8005ac2 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8005aae:	463b      	mov	r3, r7
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699a      	ldr	r2, [r3, #24]
 8005ab4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ab8:	1ad2      	subs	r2, r2, r3
 8005aba:	463b      	mov	r3, r7
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	619a      	str	r2, [r3, #24]
 8005ac0:	e008      	b.n	8005ad4 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ad4:	1d3b      	adds	r3, r7, #4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005aec:	4413      	add	r3, r2
 8005aee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005af2:	463b      	mov	r3, r7
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	00da      	lsls	r2, r3, #3
 8005afa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005afe:	4413      	add	r3, r2
 8005b00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d116      	bne.n	8005b3e <USB_EPStartXfer+0xb9c>
 8005b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b3a:	801a      	strh	r2, [r3, #0]
 8005b3c:	e32c      	b.n	8006198 <USB_EPStartXfer+0x11f6>
 8005b3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b42:	2b3e      	cmp	r3, #62	; 0x3e
 8005b44:	d818      	bhi.n	8005b78 <USB_EPStartXfer+0xbd6>
 8005b46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <USB_EPStartXfer+0xbc4>
 8005b5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b60:	3301      	adds	r3, #1
 8005b62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	029b      	lsls	r3, r3, #10
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	e30f      	b.n	8006198 <USB_EPStartXfer+0x11f6>
 8005b78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b7c:	095b      	lsrs	r3, r3, #5
 8005b7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b86:	f003 031f 	and.w	r3, r3, #31
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d104      	bne.n	8005b98 <USB_EPStartXfer+0xbf6>
 8005b8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b92:	3b01      	subs	r3, #1
 8005b94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	029b      	lsls	r3, r3, #10
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bb0:	801a      	strh	r2, [r3, #0]
 8005bb2:	e2f1      	b.n	8006198 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	78db      	ldrb	r3, [r3, #3]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	f040 818f 	bne.w	8005ede <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005bc0:	463b      	mov	r3, r7
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d175      	bne.n	8005cb6 <USB_EPStartXfer+0xd14>
 8005bca:	1d3b      	adds	r3, r7, #4
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bd2:	1d3b      	adds	r3, r7, #4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005be2:	4413      	add	r3, r2
 8005be4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	00da      	lsls	r2, r3, #3
 8005bf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d116      	bne.n	8005c36 <USB_EPStartXfer+0xc94>
 8005c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c32:	801a      	strh	r2, [r3, #0]
 8005c34:	e065      	b.n	8005d02 <USB_EPStartXfer+0xd60>
 8005c36:	463b      	mov	r3, r7
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c3e:	d81a      	bhi.n	8005c76 <USB_EPStartXfer+0xcd4>
 8005c40:	463b      	mov	r3, r7
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c4c:	463b      	mov	r3, r7
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d004      	beq.n	8005c64 <USB_EPStartXfer+0xcc2>
 8005c5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c5e:	3301      	adds	r3, #1
 8005c60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	029b      	lsls	r3, r3, #10
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c72:	801a      	strh	r2, [r3, #0]
 8005c74:	e045      	b.n	8005d02 <USB_EPStartXfer+0xd60>
 8005c76:	463b      	mov	r3, r7
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c82:	463b      	mov	r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <USB_EPStartXfer+0xcf8>
 8005c90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c94:	3b01      	subs	r3, #1
 8005c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	e025      	b.n	8005d02 <USB_EPStartXfer+0xd60>
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d120      	bne.n	8005d02 <USB_EPStartXfer+0xd60>
 8005cc0:	1d3b      	adds	r3, r7, #4
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cc8:	1d3b      	adds	r3, r7, #4
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cd8:	4413      	add	r3, r2
 8005cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cde:	463b      	mov	r3, r7
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	00da      	lsls	r2, r3, #3
 8005ce6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cea:	4413      	add	r3, r2
 8005cec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d00:	801a      	strh	r2, [r3, #0]
 8005d02:	1d3b      	adds	r3, r7, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d0a:	463b      	mov	r3, r7
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d175      	bne.n	8005e00 <USB_EPStartXfer+0xe5e>
 8005d14:	1d3b      	adds	r3, r7, #4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d1c:	1d3b      	adds	r3, r7, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d32:	463b      	mov	r3, r7
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	00da      	lsls	r2, r3, #3
 8005d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d3e:	4413      	add	r3, r2
 8005d40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d48:	463b      	mov	r3, r7
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d116      	bne.n	8005d80 <USB_EPStartXfer+0xdde>
 8005d52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d64:	801a      	strh	r2, [r3, #0]
 8005d66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d7c:	801a      	strh	r2, [r3, #0]
 8005d7e:	e061      	b.n	8005e44 <USB_EPStartXfer+0xea2>
 8005d80:	463b      	mov	r3, r7
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b3e      	cmp	r3, #62	; 0x3e
 8005d88:	d81a      	bhi.n	8005dc0 <USB_EPStartXfer+0xe1e>
 8005d8a:	463b      	mov	r3, r7
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d96:	463b      	mov	r3, r7
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d004      	beq.n	8005dae <USB_EPStartXfer+0xe0c>
 8005da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da8:	3301      	adds	r3, #1
 8005daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	029b      	lsls	r3, r3, #10
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	e041      	b.n	8005e44 <USB_EPStartXfer+0xea2>
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dcc:	463b      	mov	r3, r7
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d104      	bne.n	8005de4 <USB_EPStartXfer+0xe42>
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dde:	3b01      	subs	r3, #1
 8005de0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	029b      	lsls	r3, r3, #10
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	e021      	b.n	8005e44 <USB_EPStartXfer+0xea2>
 8005e00:	463b      	mov	r3, r7
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d11c      	bne.n	8005e44 <USB_EPStartXfer+0xea2>
 8005e0a:	1d3b      	adds	r3, r7, #4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e20:	463b      	mov	r3, r7
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	00da      	lsls	r2, r3, #3
 8005e28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e36:	463b      	mov	r3, r7
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e42:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8005e44:	463b      	mov	r3, r7
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 81a4 	beq.w	8006198 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e50:	1d3b      	adds	r3, r7, #4
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e64:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <USB_EPStartXfer+0xeda>
 8005e70:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10d      	bne.n	8005e98 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e7c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f040 8187 	bne.w	8006198 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e8a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f040 8180 	bne.w	8006198 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005e98:	1d3b      	adds	r3, r7, #4
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	463b      	mov	r3, r7
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005eb6:	1d3b      	adds	r3, r7, #4
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	463b      	mov	r3, r7
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	441a      	add	r2, r3
 8005ec4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	8013      	strh	r3, [r2, #0]
 8005edc:	e15c      	b.n	8006198 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ede:	463b      	mov	r3, r7
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	78db      	ldrb	r3, [r3, #3]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	f040 8155 	bne.w	8006194 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8005eea:	463b      	mov	r3, r7
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699a      	ldr	r2, [r3, #24]
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d90e      	bls.n	8005f18 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8005efa:	463b      	mov	r3, r7
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8005f04:	463b      	mov	r3, r7
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	463b      	mov	r3, r7
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	619a      	str	r2, [r3, #24]
 8005f16:	e008      	b.n	8005f2a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8005f18:	463b      	mov	r3, r7
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8005f22:	463b      	mov	r3, r7
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2200      	movs	r2, #0
 8005f28:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d16f      	bne.n	8006014 <USB_EPStartXfer+0x1072>
 8005f34:	1d3b      	adds	r3, r7, #4
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f3c:	1d3b      	adds	r3, r7, #4
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f52:	463b      	mov	r3, r7
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	00da      	lsls	r2, r3, #3
 8005f5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f5e:	4413      	add	r3, r2
 8005f60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d116      	bne.n	8005f9e <USB_EPStartXfer+0xffc>
 8005f70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f9a:	801a      	strh	r2, [r3, #0]
 8005f9c:	e05f      	b.n	800605e <USB_EPStartXfer+0x10bc>
 8005f9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8005fa4:	d818      	bhi.n	8005fd8 <USB_EPStartXfer+0x1036>
 8005fa6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <USB_EPStartXfer+0x1024>
 8005fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	029b      	lsls	r3, r3, #10
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	e042      	b.n	800605e <USB_EPStartXfer+0x10bc>
 8005fd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fe2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d104      	bne.n	8005ff8 <USB_EPStartXfer+0x1056>
 8005fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	029b      	lsls	r3, r3, #10
 8006000:	b29b      	uxth	r3, r3
 8006002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800600a:	b29a      	uxth	r2, r3
 800600c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006010:	801a      	strh	r2, [r3, #0]
 8006012:	e024      	b.n	800605e <USB_EPStartXfer+0x10bc>
 8006014:	463b      	mov	r3, r7
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d11f      	bne.n	800605e <USB_EPStartXfer+0x10bc>
 800601e:	1d3b      	adds	r3, r7, #4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006026:	1d3b      	adds	r3, r7, #4
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602e:	b29b      	uxth	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006036:	4413      	add	r3, r2
 8006038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800603c:	463b      	mov	r3, r7
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	00da      	lsls	r2, r3, #3
 8006044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006048:	4413      	add	r3, r2
 800604a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800604e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006052:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006056:	b29a      	uxth	r2, r3
 8006058:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	1d3b      	adds	r3, r7, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006066:	463b      	mov	r3, r7
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d16f      	bne.n	8006150 <USB_EPStartXfer+0x11ae>
 8006070:	1d3b      	adds	r3, r7, #4
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006078:	1d3b      	adds	r3, r7, #4
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006080:	b29b      	uxth	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006088:	4413      	add	r3, r2
 800608a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800608e:	463b      	mov	r3, r7
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	00da      	lsls	r2, r3, #3
 8006096:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800609a:	4413      	add	r3, r2
 800609c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d116      	bne.n	80060da <USB_EPStartXfer+0x1138>
 80060ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	e05e      	b.n	8006198 <USB_EPStartXfer+0x11f6>
 80060da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060de:	2b3e      	cmp	r3, #62	; 0x3e
 80060e0:	d818      	bhi.n	8006114 <USB_EPStartXfer+0x1172>
 80060e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d004      	beq.n	8006102 <USB_EPStartXfer+0x1160>
 80060f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060fc:	3301      	adds	r3, #1
 80060fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006106:	b29b      	uxth	r3, r3
 8006108:	029b      	lsls	r3, r3, #10
 800610a:	b29a      	uxth	r2, r3
 800610c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	e041      	b.n	8006198 <USB_EPStartXfer+0x11f6>
 8006114:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006118:	095b      	lsrs	r3, r3, #5
 800611a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800611e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006122:	f003 031f 	and.w	r3, r3, #31
 8006126:	2b00      	cmp	r3, #0
 8006128:	d104      	bne.n	8006134 <USB_EPStartXfer+0x1192>
 800612a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800612e:	3b01      	subs	r3, #1
 8006130:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006138:	b29b      	uxth	r3, r3
 800613a:	029b      	lsls	r3, r3, #10
 800613c:	b29b      	uxth	r3, r3
 800613e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006146:	b29a      	uxth	r2, r3
 8006148:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800614c:	801a      	strh	r2, [r3, #0]
 800614e:	e023      	b.n	8006198 <USB_EPStartXfer+0x11f6>
 8006150:	463b      	mov	r3, r7
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d11e      	bne.n	8006198 <USB_EPStartXfer+0x11f6>
 800615a:	1d3b      	adds	r3, r7, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006162:	b29b      	uxth	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800616a:	4413      	add	r3, r2
 800616c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006170:	463b      	mov	r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	00da      	lsls	r2, r3, #3
 8006178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800617c:	4413      	add	r3, r2
 800617e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006182:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006186:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800618a:	b29a      	uxth	r2, r3
 800618c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	e001      	b.n	8006198 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e02e      	b.n	80061f6 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006198:	1d3b      	adds	r3, r7, #4
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	463b      	mov	r3, r7
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80061b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80061ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80061c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80061c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80061ce:	1d3b      	adds	r3, r7, #4
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	463b      	mov	r3, r7
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	441a      	add	r2, r3
 80061dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80061e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	785b      	ldrb	r3, [r3, #1]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d020      	beq.n	8006254 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006228:	81bb      	strh	r3, [r7, #12]
 800622a:	89bb      	ldrh	r3, [r7, #12]
 800622c:	f083 0310 	eor.w	r3, r3, #16
 8006230:	81bb      	strh	r3, [r7, #12]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	441a      	add	r2, r3
 800623c:	89bb      	ldrh	r3, [r7, #12]
 800623e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624e:	b29b      	uxth	r3, r3
 8006250:	8013      	strh	r3, [r2, #0]
 8006252:	e01f      	b.n	8006294 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626a:	81fb      	strh	r3, [r7, #14]
 800626c:	89fb      	ldrh	r3, [r7, #14]
 800626e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006272:	81fb      	strh	r3, [r7, #14]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	441a      	add	r2, r3
 800627e:	89fb      	ldrh	r3, [r7, #14]
 8006280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006290:	b29b      	uxth	r3, r3
 8006292:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b087      	sub	sp, #28
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	7b1b      	ldrb	r3, [r3, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f040 809d 	bne.w	80063f0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d04c      	beq.n	8006358 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	823b      	strh	r3, [r7, #16]
 80062cc:	8a3b      	ldrh	r3, [r7, #16]
 80062ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01b      	beq.n	800630e <USB_EPClearStall+0x6c>
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ec:	81fb      	strh	r3, [r7, #14]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	441a      	add	r2, r3
 80062f8:	89fb      	ldrh	r3, [r7, #14]
 80062fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006306:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800630a:	b29b      	uxth	r3, r3
 800630c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	78db      	ldrb	r3, [r3, #3]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d06c      	beq.n	80063f0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632c:	81bb      	strh	r3, [r7, #12]
 800632e:	89bb      	ldrh	r3, [r7, #12]
 8006330:	f083 0320 	eor.w	r3, r3, #32
 8006334:	81bb      	strh	r3, [r7, #12]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	441a      	add	r2, r3
 8006340:	89bb      	ldrh	r3, [r7, #12]
 8006342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800634a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800634e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006352:	b29b      	uxth	r3, r3
 8006354:	8013      	strh	r3, [r2, #0]
 8006356:	e04b      	b.n	80063f0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	82fb      	strh	r3, [r7, #22]
 8006366:	8afb      	ldrh	r3, [r7, #22]
 8006368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01b      	beq.n	80063a8 <USB_EPClearStall+0x106>
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006386:	82bb      	strh	r3, [r7, #20]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	441a      	add	r2, r3
 8006392:	8abb      	ldrh	r3, [r7, #20]
 8006394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	827b      	strh	r3, [r7, #18]
 80063c0:	8a7b      	ldrh	r3, [r7, #18]
 80063c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063c6:	827b      	strh	r3, [r7, #18]
 80063c8:	8a7b      	ldrh	r3, [r7, #18]
 80063ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063ce:	827b      	strh	r3, [r7, #18]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	441a      	add	r2, r3
 80063da:	8a7b      	ldrh	r3, [r7, #18]
 80063dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d103      	bne.n	8006418 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2280      	movs	r2, #128	; 0x80
 8006414:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006434:	b29b      	uxth	r3, r3
 8006436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643e:	b29a      	uxth	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006462:	b29b      	uxth	r3, r3
 8006464:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006468:	b29a      	uxth	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800648c:	b29b      	uxth	r3, r3
 800648e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006490:	68fb      	ldr	r3, [r7, #12]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b08d      	sub	sp, #52	; 0x34
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	4611      	mov	r1, r2
 80064c2:	461a      	mov	r2, r3
 80064c4:	460b      	mov	r3, r1
 80064c6:	80fb      	strh	r3, [r7, #6]
 80064c8:	4613      	mov	r3, r2
 80064ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80064cc:	88bb      	ldrh	r3, [r7, #4]
 80064ce:	3301      	adds	r3, #1
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064dc:	88fa      	ldrh	r2, [r7, #6]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ec:	e01b      	b.n	8006526 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	3301      	adds	r3, #1
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	b29b      	uxth	r3, r3
 8006504:	461a      	mov	r2, r3
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	b29a      	uxth	r2, r3
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	3302      	adds	r3, #2
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	3301      	adds	r3, #1
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006522:	3b01      	subs	r3, #1
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e0      	bne.n	80064ee <USB_WritePMA+0x38>
  }
}
 800652c:	bf00      	nop
 800652e:	3734      	adds	r7, #52	; 0x34
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006538:	b480      	push	{r7}
 800653a:	b08b      	sub	sp, #44	; 0x2c
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	4611      	mov	r1, r2
 8006544:	461a      	mov	r2, r3
 8006546:	460b      	mov	r3, r1
 8006548:	80fb      	strh	r3, [r7, #6]
 800654a:	4613      	mov	r3, r2
 800654c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800654e:	88bb      	ldrh	r3, [r7, #4]
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	b29b      	uxth	r3, r3
 8006554:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006568:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
 800656e:	e018      	b.n	80065a2 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	3302      	adds	r3, #2
 800657c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	3301      	adds	r3, #1
 800658a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	0a1b      	lsrs	r3, r3, #8
 8006590:	b2da      	uxtb	r2, r3
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	3301      	adds	r3, #1
 800659a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	3b01      	subs	r3, #1
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e3      	bne.n	8006570 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80065a8:	88bb      	ldrh	r3, [r7, #4]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	701a      	strb	r2, [r3, #0]
  }
}
 80065c4:	bf00      	nop
 80065c6:	372c      	adds	r7, #44	; 0x2c
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065e0:	f002 f998 	bl	8008914 <malloc>
 80065e4:	4603      	mov	r3, r0
 80065e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d105      	bne.n	80065fa <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80065f6:	2302      	movs	r3, #2
 80065f8:	e066      	b.n	80066c8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	7c1b      	ldrb	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d119      	bne.n	800663e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800660a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800660e:	2202      	movs	r2, #2
 8006610:	2181      	movs	r1, #129	; 0x81
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 ff50 	bl	80084b8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800661e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006622:	2202      	movs	r2, #2
 8006624:	2101      	movs	r1, #1
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 ff46 	bl	80084b8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2210      	movs	r2, #16
 8006638:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800663c:	e016      	b.n	800666c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800663e:	2340      	movs	r3, #64	; 0x40
 8006640:	2202      	movs	r2, #2
 8006642:	2181      	movs	r1, #129	; 0x81
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 ff37 	bl	80084b8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006650:	2340      	movs	r3, #64	; 0x40
 8006652:	2202      	movs	r2, #2
 8006654:	2101      	movs	r1, #1
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 ff2e 	bl	80084b8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2210      	movs	r2, #16
 8006668:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800666c:	2308      	movs	r3, #8
 800666e:	2203      	movs	r2, #3
 8006670:	2182      	movs	r1, #130	; 0x82
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f001 ff20 	bl	80084b8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	7c1b      	ldrb	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d109      	bne.n	80066b6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066ac:	2101      	movs	r1, #1
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f002 f87e 	bl	80087b0 <USBD_LL_PrepareReceive>
 80066b4:	e007      	b.n	80066c6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066bc:	2340      	movs	r3, #64	; 0x40
 80066be:	2101      	movs	r1, #1
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f002 f875 	bl	80087b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80066dc:	2181      	movs	r1, #129	; 0x81
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 ff28 	bl	8008534 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80066ea:	2101      	movs	r1, #1
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 ff21 	bl	8008534 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80066fa:	2182      	movs	r1, #130	; 0x82
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 ff19 	bl	8008534 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00e      	beq.n	800673a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800672c:	4618      	mov	r0, r3
 800672e:	f002 f8f9 	bl	8008924 <free>
    pdev->pClassData = NULL;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006754:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800676a:	2b00      	cmp	r3, #0
 800676c:	d03a      	beq.n	80067e4 <USBD_CDC_Setup+0xa0>
 800676e:	2b20      	cmp	r3, #32
 8006770:	f040 8097 	bne.w	80068a2 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	88db      	ldrh	r3, [r3, #6]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d029      	beq.n	80067d0 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	b25b      	sxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	da11      	bge.n	80067aa <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006792:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	88d2      	ldrh	r2, [r2, #6]
 8006798:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800679a:	6939      	ldr	r1, [r7, #16]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	88db      	ldrh	r3, [r3, #6]
 80067a0:	461a      	mov	r2, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 fa8d 	bl	8007cc2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80067a8:	e082      	b.n	80068b0 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	785a      	ldrb	r2, [r3, #1]
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	88db      	ldrh	r3, [r3, #6]
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80067c0:	6939      	ldr	r1, [r7, #16]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	88db      	ldrh	r3, [r3, #6]
 80067c6:	461a      	mov	r2, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 faa6 	bl	8007d1a <USBD_CtlPrepareRx>
      break;
 80067ce:	e06f      	b.n	80068b0 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	7850      	ldrb	r0, [r2, #1]
 80067dc:	2200      	movs	r2, #0
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	4798      	blx	r3
      break;
 80067e2:	e065      	b.n	80068b0 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b0b      	cmp	r3, #11
 80067ea:	d84f      	bhi.n	800688c <USBD_CDC_Setup+0x148>
 80067ec:	a201      	add	r2, pc, #4	; (adr r2, 80067f4 <USBD_CDC_Setup+0xb0>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	08006825 	.word	0x08006825
 80067f8:	0800689b 	.word	0x0800689b
 80067fc:	0800688d 	.word	0x0800688d
 8006800:	0800688d 	.word	0x0800688d
 8006804:	0800688d 	.word	0x0800688d
 8006808:	0800688d 	.word	0x0800688d
 800680c:	0800688d 	.word	0x0800688d
 8006810:	0800688d 	.word	0x0800688d
 8006814:	0800688d 	.word	0x0800688d
 8006818:	0800688d 	.word	0x0800688d
 800681c:	0800684d 	.word	0x0800684d
 8006820:	08006875 	.word	0x08006875
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682a:	2b03      	cmp	r3, #3
 800682c:	d107      	bne.n	800683e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800682e:	f107 030c 	add.w	r3, r7, #12
 8006832:	2202      	movs	r2, #2
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f001 fa43 	bl	8007cc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800683c:	e030      	b.n	80068a0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 f9cd 	bl	8007be0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006846:	2303      	movs	r3, #3
 8006848:	75fb      	strb	r3, [r7, #23]
          break;
 800684a:	e029      	b.n	80068a0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006852:	2b03      	cmp	r3, #3
 8006854:	d107      	bne.n	8006866 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006856:	f107 030f 	add.w	r3, r7, #15
 800685a:	2201      	movs	r2, #1
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 fa2f 	bl	8007cc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006864:	e01c      	b.n	80068a0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 f9b9 	bl	8007be0 <USBD_CtlError>
            ret = USBD_FAIL;
 800686e:	2303      	movs	r3, #3
 8006870:	75fb      	strb	r3, [r7, #23]
          break;
 8006872:	e015      	b.n	80068a0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687a:	2b03      	cmp	r3, #3
 800687c:	d00f      	beq.n	800689e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 f9ad 	bl	8007be0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006886:	2303      	movs	r3, #3
 8006888:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800688a:	e008      	b.n	800689e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 f9a6 	bl	8007be0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006894:	2303      	movs	r3, #3
 8006896:	75fb      	strb	r3, [r7, #23]
          break;
 8006898:	e002      	b.n	80068a0 <USBD_CDC_Setup+0x15c>
          break;
 800689a:	bf00      	nop
 800689c:	e008      	b.n	80068b0 <USBD_CDC_Setup+0x16c>
          break;
 800689e:	bf00      	nop
      }
      break;
 80068a0:	e006      	b.n	80068b0 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 f99b 	bl	8007be0 <USBD_CtlError>
      ret = USBD_FAIL;
 80068aa:	2303      	movs	r3, #3
 80068ac:	75fb      	strb	r3, [r7, #23]
      break;
 80068ae:	bf00      	nop
  }

  return (uint8_t)ret;
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop

080068bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80068ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068da:	2303      	movs	r3, #3
 80068dc:	e04f      	b.n	800697e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80068e6:	78fa      	ldrb	r2, [r7, #3]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	3318      	adds	r3, #24
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d029      	beq.n	8006950 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80068fc:	78fa      	ldrb	r2, [r7, #3]
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	3318      	adds	r3, #24
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	78f9      	ldrb	r1, [r7, #3]
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	460b      	mov	r3, r1
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	440b      	add	r3, r1
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	4403      	add	r3, r0
 800691c:	3338      	adds	r3, #56	; 0x38
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	fbb2 f1f3 	udiv	r1, r2, r3
 8006924:	fb03 f301 	mul.w	r3, r3, r1
 8006928:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800692a:	2b00      	cmp	r3, #0
 800692c:	d110      	bne.n	8006950 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800692e:	78fa      	ldrb	r2, [r7, #3]
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	440b      	add	r3, r1
 800693c:	3318      	adds	r3, #24
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006942:	78f9      	ldrb	r1, [r7, #3]
 8006944:	2300      	movs	r3, #0
 8006946:	2200      	movs	r2, #0
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 fef9 	bl	8008740 <USBD_LL_Transmit>
 800694e:	e015      	b.n	800697c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006978:	78fa      	ldrb	r2, [r7, #3]
 800697a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	460b      	mov	r3, r1
 8006990:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006998:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e015      	b.n	80069d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 ff37 	bl	8008820 <USBD_LL_GetRxDataSize>
 80069b2:	4602      	mov	r2, r0
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80069ce:	4611      	mov	r1, r2
 80069d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d015      	beq.n	8006a22 <USBD_CDC_EP0_RxReady+0x46>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80069fc:	2bff      	cmp	r3, #255	; 0xff
 80069fe:	d010      	beq.n	8006a22 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006a0e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a16:	b292      	uxth	r2, r2
 8006a18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	22ff      	movs	r2, #255	; 0xff
 8006a1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2243      	movs	r2, #67	; 0x43
 8006a38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006a3a:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	20000094 	.word	0x20000094

08006a4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2243      	movs	r2, #67	; 0x43
 8006a58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006a5a:	4b03      	ldr	r3, [pc, #12]	; (8006a68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	20000050 	.word	0x20000050

08006a6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2243      	movs	r2, #67	; 0x43
 8006a78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006a7a:	4b03      	ldr	r3, [pc, #12]	; (8006a88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	200000d8 	.word	0x200000d8

08006a8c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	220a      	movs	r2, #10
 8006a98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a9a:	4b03      	ldr	r3, [pc, #12]	; (8006aa8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	2000000c 	.word	0x2000000c

08006aac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e004      	b.n	8006aca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b087      	sub	sp, #28
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ae8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b18:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b3e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b40:	2301      	movs	r3, #1
 8006b42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e01a      	b.n	8006b88 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d114      	bne.n	8006b86 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b7a:	2181      	movs	r1, #129	; 0x81
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 fddf 	bl	8008740 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e016      	b.n	8006bdc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7c1b      	ldrb	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f001 fdf4 	bl	80087b0 <USBD_LL_PrepareReceive>
 8006bc8:	e007      	b.n	8006bda <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bd0:	2340      	movs	r3, #64	; 0x40
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 fdeb 	bl	80087b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e01f      	b.n	8006c3c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	79fa      	ldrb	r2, [r7, #7]
 8006c2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f001 fbad 	bl	8008390 <USBD_LL_Init>
 8006c36:	4603      	mov	r3, r0
 8006c38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e016      	b.n	8006c8a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00b      	beq.n	8006c88 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	f107 020e 	add.w	r2, r7, #14
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	4798      	blx	r3
 8006c80:	4602      	mov	r2, r0
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b082      	sub	sp, #8
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 fbda 	bl	8008454 <USBD_LL_Start>
 8006ca0:	4603      	mov	r3, r0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	78fa      	ldrb	r2, [r7, #3]
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
 8006cea:	4603      	mov	r3, r0
 8006cec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d007      	beq.n	8006d1e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	78fa      	ldrb	r2, [r7, #3]
 8006d18:	4611      	mov	r1, r2
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
  }

  return USBD_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 ff16 	bl	8007b6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d4e:	461a      	mov	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d00e      	beq.n	8006d82 <USBD_LL_SetupStage+0x5a>
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d302      	bcc.n	8006d6e <USBD_LL_SetupStage+0x46>
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d014      	beq.n	8006d96 <USBD_LL_SetupStage+0x6e>
 8006d6c:	e01d      	b.n	8006daa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f9d6 	bl	8007128 <USBD_StdDevReq>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d80:	e020      	b.n	8006dc4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa3a 	bl	8007204 <USBD_StdItfReq>
 8006d90:	4603      	mov	r3, r0
 8006d92:	73fb      	strb	r3, [r7, #15]
      break;
 8006d94:	e016      	b.n	8006dc4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa76 	bl	8007290 <USBD_StdEPReq>
 8006da4:	4603      	mov	r3, r0
 8006da6:	73fb      	strb	r3, [r7, #15]
      break;
 8006da8:	e00c      	b.n	8006dc4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006db0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 fbf1 	bl	80085a0 <USBD_LL_StallEP>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc2:	bf00      	nop
  }

  return ret;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b086      	sub	sp, #24
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	607a      	str	r2, [r7, #4]
 8006dda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ddc:	7afb      	ldrb	r3, [r7, #11]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d137      	bne.n	8006e52 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006de8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d14a      	bne.n	8006e8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d913      	bls.n	8006e28 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	1ad2      	subs	r2, r2, r3
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	4293      	cmp	r3, r2
 8006e18:	bf28      	it	cs
 8006e1a:	4613      	movcs	r3, r2
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 ff97 	bl	8007d54 <USBD_CtlContinueRx>
 8006e26:	e030      	b.n	8006e8a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d105      	bne.n	8006e4a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 ff93 	bl	8007d76 <USBD_CtlSendStatus>
 8006e50:	e01b      	b.n	8006e8a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d013      	beq.n	8006e86 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d10e      	bne.n	8006e86 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	7afa      	ldrb	r2, [r7, #11]
 8006e72:	4611      	mov	r1, r2
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	4798      	blx	r3
 8006e78:	4603      	mov	r3, r0
 8006e7a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	e002      	b.n	8006e8c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e000      	b.n	8006e8c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ea2:	7afb      	ldrb	r3, [r7, #11]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d16a      	bne.n	8006f7e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3314      	adds	r3, #20
 8006eac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d155      	bne.n	8006f64 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d914      	bls.n	8006eee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	1ad2      	subs	r2, r2, r3
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 ff0c 	bl	8007cf8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f001 fc62 	bl	80087b0 <USBD_LL_PrepareReceive>
 8006eec:	e03a      	b.n	8006f64 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d11c      	bne.n	8006f34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d316      	bcc.n	8006f34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d20f      	bcs.n	8006f34 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f14:	2200      	movs	r2, #0
 8006f16:	2100      	movs	r1, #0
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 feed 	bl	8007cf8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f26:	2300      	movs	r3, #0
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f001 fc3f 	bl	80087b0 <USBD_LL_PrepareReceive>
 8006f32:	e017      	b.n	8006f64 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d105      	bne.n	8006f56 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f56:	2180      	movs	r1, #128	; 0x80
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f001 fb21 	bl	80085a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 ff1c 	bl	8007d9c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d123      	bne.n	8006fb6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff fe9b 	bl	8006caa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f7c:	e01b      	b.n	8006fb6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d013      	beq.n	8006fb2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d10e      	bne.n	8006fb2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	7afa      	ldrb	r2, [r7, #11]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	4798      	blx	r3
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	e002      	b.n	8006fb8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e000      	b.n	8006fb8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d009      	beq.n	8007004 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6852      	ldr	r2, [r2, #4]
 8006ffc:	b2d2      	uxtb	r2, r2
 8006ffe:	4611      	mov	r1, r2
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007004:	2340      	movs	r3, #64	; 0x40
 8007006:	2200      	movs	r2, #0
 8007008:	2100      	movs	r1, #0
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fa54 	bl	80084b8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2240      	movs	r2, #64	; 0x40
 800701c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007020:	2340      	movs	r3, #64	; 0x40
 8007022:	2200      	movs	r2, #0
 8007024:	2180      	movs	r1, #128	; 0x80
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 fa46 	bl	80084b8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2240      	movs	r2, #64	; 0x40
 8007036:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	460b      	mov	r3, r1
 800704c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2204      	movs	r2, #4
 800707a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709a:	2b04      	cmp	r3, #4
 800709c:	d105      	bne.n	80070aa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d10b      	bne.n	80070e2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	3301      	adds	r3, #1
 8007102:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800710a:	8a3b      	ldrh	r3, [r7, #16]
 800710c:	021b      	lsls	r3, r3, #8
 800710e:	b21a      	sxth	r2, r3
 8007110:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007114:	4313      	orrs	r3, r2
 8007116:	b21b      	sxth	r3, r3
 8007118:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800711a:	89fb      	ldrh	r3, [r7, #14]
}
 800711c:	4618      	mov	r0, r3
 800711e:	371c      	adds	r7, #28
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800713e:	2b20      	cmp	r3, #32
 8007140:	d004      	beq.n	800714c <USBD_StdDevReq+0x24>
 8007142:	2b40      	cmp	r3, #64	; 0x40
 8007144:	d002      	beq.n	800714c <USBD_StdDevReq+0x24>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <USBD_StdDevReq+0x38>
 800714a:	e050      	b.n	80071ee <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	4798      	blx	r3
 800715a:	4603      	mov	r3, r0
 800715c:	73fb      	strb	r3, [r7, #15]
    break;
 800715e:	e04b      	b.n	80071f8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	785b      	ldrb	r3, [r3, #1]
 8007164:	2b09      	cmp	r3, #9
 8007166:	d83c      	bhi.n	80071e2 <USBD_StdDevReq+0xba>
 8007168:	a201      	add	r2, pc, #4	; (adr r2, 8007170 <USBD_StdDevReq+0x48>)
 800716a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716e:	bf00      	nop
 8007170:	080071c5 	.word	0x080071c5
 8007174:	080071d9 	.word	0x080071d9
 8007178:	080071e3 	.word	0x080071e3
 800717c:	080071cf 	.word	0x080071cf
 8007180:	080071e3 	.word	0x080071e3
 8007184:	080071a3 	.word	0x080071a3
 8007188:	08007199 	.word	0x08007199
 800718c:	080071e3 	.word	0x080071e3
 8007190:	080071bb 	.word	0x080071bb
 8007194:	080071ad 	.word	0x080071ad
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f9d0 	bl	8007540 <USBD_GetDescriptor>
      break;
 80071a0:	e024      	b.n	80071ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fb5f 	bl	8007868 <USBD_SetAddress>
      break;
 80071aa:	e01f      	b.n	80071ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fb9c 	bl	80078ec <USBD_SetConfig>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73fb      	strb	r3, [r7, #15]
      break;
 80071b8:	e018      	b.n	80071ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fc39 	bl	8007a34 <USBD_GetConfig>
      break;
 80071c2:	e013      	b.n	80071ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fc68 	bl	8007a9c <USBD_GetStatus>
      break;
 80071cc:	e00e      	b.n	80071ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fc96 	bl	8007b02 <USBD_SetFeature>
      break;
 80071d6:	e009      	b.n	80071ec <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fca5 	bl	8007b2a <USBD_ClrFeature>
      break;
 80071e0:	e004      	b.n	80071ec <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fcfb 	bl	8007be0 <USBD_CtlError>
      break;
 80071ea:	bf00      	nop
    }
    break;
 80071ec:	e004      	b.n	80071f8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fcf5 	bl	8007be0 <USBD_CtlError>
    break;
 80071f6:	bf00      	nop
  }

  return ret;
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop

08007204 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800721a:	2b20      	cmp	r3, #32
 800721c:	d003      	beq.n	8007226 <USBD_StdItfReq+0x22>
 800721e:	2b40      	cmp	r3, #64	; 0x40
 8007220:	d001      	beq.n	8007226 <USBD_StdItfReq+0x22>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d12a      	bne.n	800727c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800722c:	3b01      	subs	r3, #1
 800722e:	2b02      	cmp	r3, #2
 8007230:	d81d      	bhi.n	800726e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	889b      	ldrh	r3, [r3, #4]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b01      	cmp	r3, #1
 800723a:	d813      	bhi.n	8007264 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	4798      	blx	r3
 800724a:	4603      	mov	r3, r0
 800724c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	88db      	ldrh	r3, [r3, #6]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d110      	bne.n	8007278 <USBD_StdItfReq+0x74>
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10d      	bne.n	8007278 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fd8a 	bl	8007d76 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007262:	e009      	b.n	8007278 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fcba 	bl	8007be0 <USBD_CtlError>
      break;
 800726c:	e004      	b.n	8007278 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fcb5 	bl	8007be0 <USBD_CtlError>
      break;
 8007276:	e000      	b.n	800727a <USBD_StdItfReq+0x76>
      break;
 8007278:	bf00      	nop
    }
    break;
 800727a:	e004      	b.n	8007286 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fcae 	bl	8007be0 <USBD_CtlError>
    break;
 8007284:	bf00      	nop
  }

  return ret;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	889b      	ldrh	r3, [r3, #4]
 80072a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d004      	beq.n	80072ba <USBD_StdEPReq+0x2a>
 80072b0:	2b40      	cmp	r3, #64	; 0x40
 80072b2:	d002      	beq.n	80072ba <USBD_StdEPReq+0x2a>
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00a      	beq.n	80072ce <USBD_StdEPReq+0x3e>
 80072b8:	e137      	b.n	800752a <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	4798      	blx	r3
 80072c8:	4603      	mov	r3, r0
 80072ca:	73fb      	strb	r3, [r7, #15]
    break;
 80072cc:	e132      	b.n	8007534 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	785b      	ldrb	r3, [r3, #1]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d03e      	beq.n	8007354 <USBD_StdEPReq+0xc4>
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d002      	beq.n	80072e0 <USBD_StdEPReq+0x50>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d079      	beq.n	80073d2 <USBD_StdEPReq+0x142>
 80072de:	e11e      	b.n	800751e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d002      	beq.n	80072f0 <USBD_StdEPReq+0x60>
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d015      	beq.n	800731a <USBD_StdEPReq+0x8a>
 80072ee:	e02b      	b.n	8007348 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00c      	beq.n	8007310 <USBD_StdEPReq+0x80>
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b80      	cmp	r3, #128	; 0x80
 80072fa:	d009      	beq.n	8007310 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 f94d 	bl	80085a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007306:	2180      	movs	r1, #128	; 0x80
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 f949 	bl	80085a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800730e:	e020      	b.n	8007352 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fc64 	bl	8007be0 <USBD_CtlError>
        break;
 8007318:	e01b      	b.n	8007352 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	885b      	ldrh	r3, [r3, #2]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10e      	bne.n	8007340 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00b      	beq.n	8007340 <USBD_StdEPReq+0xb0>
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b80      	cmp	r3, #128	; 0x80
 800732c:	d008      	beq.n	8007340 <USBD_StdEPReq+0xb0>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	88db      	ldrh	r3, [r3, #6]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d104      	bne.n	8007340 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 f930 	bl	80085a0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fd18 	bl	8007d76 <USBD_CtlSendStatus>

        break;
 8007346:	e004      	b.n	8007352 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fc48 	bl	8007be0 <USBD_CtlError>
        break;
 8007350:	bf00      	nop
      }
      break;
 8007352:	e0e9      	b.n	8007528 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800735a:	2b02      	cmp	r3, #2
 800735c:	d002      	beq.n	8007364 <USBD_StdEPReq+0xd4>
 800735e:	2b03      	cmp	r3, #3
 8007360:	d015      	beq.n	800738e <USBD_StdEPReq+0xfe>
 8007362:	e02f      	b.n	80073c4 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00c      	beq.n	8007384 <USBD_StdEPReq+0xf4>
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	2b80      	cmp	r3, #128	; 0x80
 800736e:	d009      	beq.n	8007384 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 f913 	bl	80085a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800737a:	2180      	movs	r1, #128	; 0x80
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f90f 	bl	80085a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007382:	e025      	b.n	80073d0 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fc2a 	bl	8007be0 <USBD_CtlError>
        break;
 800738c:	e020      	b.n	80073d0 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	885b      	ldrh	r3, [r3, #2]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d11b      	bne.n	80073ce <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800739c:	2b00      	cmp	r3, #0
 800739e:	d004      	beq.n	80073aa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 f931 	bl	800860c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fce3 	bl	8007d76 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
 80073be:	4603      	mov	r3, r0
 80073c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073c2:	e004      	b.n	80073ce <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fc0a 	bl	8007be0 <USBD_CtlError>
        break;
 80073cc:	e000      	b.n	80073d0 <USBD_StdEPReq+0x140>
        break;
 80073ce:	bf00      	nop
      }
      break;
 80073d0:	e0aa      	b.n	8007528 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d002      	beq.n	80073e2 <USBD_StdEPReq+0x152>
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d032      	beq.n	8007446 <USBD_StdEPReq+0x1b6>
 80073e0:	e097      	b.n	8007512 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d007      	beq.n	80073f8 <USBD_StdEPReq+0x168>
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d004      	beq.n	80073f8 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fbf5 	bl	8007be0 <USBD_CtlError>
          break;
 80073f6:	e091      	b.n	800751c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	da0b      	bge.n	8007418 <USBD_StdEPReq+0x188>
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007406:	4613      	mov	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	3310      	adds	r3, #16
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	4413      	add	r3, r2
 8007414:	3304      	adds	r3, #4
 8007416:	e00b      	b.n	8007430 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	3304      	adds	r3, #4
 8007430:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2202      	movs	r2, #2
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fc3f 	bl	8007cc2 <USBD_CtlSendData>
        break;
 8007444:	e06a      	b.n	800751c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800744a:	2b00      	cmp	r3, #0
 800744c:	da11      	bge.n	8007472 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	f003 020f 	and.w	r2, r3, #15
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	440b      	add	r3, r1
 8007460:	3324      	adds	r3, #36	; 0x24
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d117      	bne.n	8007498 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fbb8 	bl	8007be0 <USBD_CtlError>
            break;
 8007470:	e054      	b.n	800751c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	f003 020f 	and.w	r2, r3, #15
 8007478:	6879      	ldr	r1, [r7, #4]
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	440b      	add	r3, r1
 8007484:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d104      	bne.n	8007498 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fba5 	bl	8007be0 <USBD_CtlError>
            break;
 8007496:	e041      	b.n	800751c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800749c:	2b00      	cmp	r3, #0
 800749e:	da0b      	bge.n	80074b8 <USBD_StdEPReq+0x228>
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	3310      	adds	r3, #16
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	4413      	add	r3, r2
 80074b4:	3304      	adds	r3, #4
 80074b6:	e00b      	b.n	80074d0 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	4413      	add	r3, r2
 80074ce:	3304      	adds	r3, #4
 80074d0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <USBD_StdEPReq+0x24e>
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	2b80      	cmp	r3, #128	; 0x80
 80074dc:	d103      	bne.n	80074e6 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	e00e      	b.n	8007504 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 f8c4 	bl	8008678 <USBD_LL_IsStallEP>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2201      	movs	r2, #1
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	e002      	b.n	8007504 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2202      	movs	r2, #2
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fbd9 	bl	8007cc2 <USBD_CtlSendData>
          break;
 8007510:	e004      	b.n	800751c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fb63 	bl	8007be0 <USBD_CtlError>
        break;
 800751a:	bf00      	nop
      }
      break;
 800751c:	e004      	b.n	8007528 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fb5d 	bl	8007be0 <USBD_CtlError>
      break;
 8007526:	bf00      	nop
    }
    break;
 8007528:	e004      	b.n	8007534 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fb57 	bl	8007be0 <USBD_CtlError>
    break;
 8007532:	bf00      	nop
  }

  return ret;
 8007534:	7bfb      	ldrb	r3, [r7, #15]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	885b      	ldrh	r3, [r3, #2]
 800755a:	0a1b      	lsrs	r3, r3, #8
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	2b0e      	cmp	r3, #14
 8007562:	f200 8152 	bhi.w	800780a <USBD_GetDescriptor+0x2ca>
 8007566:	a201      	add	r2, pc, #4	; (adr r2, 800756c <USBD_GetDescriptor+0x2c>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	080075dd 	.word	0x080075dd
 8007570:	080075f5 	.word	0x080075f5
 8007574:	08007635 	.word	0x08007635
 8007578:	0800780b 	.word	0x0800780b
 800757c:	0800780b 	.word	0x0800780b
 8007580:	080077ab 	.word	0x080077ab
 8007584:	080077d7 	.word	0x080077d7
 8007588:	0800780b 	.word	0x0800780b
 800758c:	0800780b 	.word	0x0800780b
 8007590:	0800780b 	.word	0x0800780b
 8007594:	0800780b 	.word	0x0800780b
 8007598:	0800780b 	.word	0x0800780b
 800759c:	0800780b 	.word	0x0800780b
 80075a0:	0800780b 	.word	0x0800780b
 80075a4:	080075a9 	.word	0x080075a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	7c12      	ldrb	r2, [r2, #16]
 80075c0:	f107 0108 	add.w	r1, r7, #8
 80075c4:	4610      	mov	r0, r2
 80075c6:	4798      	blx	r3
 80075c8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80075ca:	e126      	b.n	800781a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fb06 	bl	8007be0 <USBD_CtlError>
      err++;
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	3301      	adds	r3, #1
 80075d8:	72fb      	strb	r3, [r7, #11]
    break;
 80075da:	e11e      	b.n	800781a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	7c12      	ldrb	r2, [r2, #16]
 80075e8:	f107 0108 	add.w	r1, r7, #8
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
 80075f0:	60f8      	str	r0, [r7, #12]
    break;
 80075f2:	e112      	b.n	800781a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	7c1b      	ldrb	r3, [r3, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10d      	bne.n	8007618 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	f107 0208 	add.w	r2, r7, #8
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3301      	adds	r3, #1
 8007612:	2202      	movs	r2, #2
 8007614:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007616:	e100      	b.n	800781a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007620:	f107 0208 	add.w	r2, r7, #8
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3301      	adds	r3, #1
 800762e:	2202      	movs	r2, #2
 8007630:	701a      	strb	r2, [r3, #0]
    break;
 8007632:	e0f2      	b.n	800781a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	885b      	ldrh	r3, [r3, #2]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b05      	cmp	r3, #5
 800763c:	f200 80ac 	bhi.w	8007798 <USBD_GetDescriptor+0x258>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <USBD_GetDescriptor+0x108>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	08007661 	.word	0x08007661
 800764c:	08007695 	.word	0x08007695
 8007650:	080076c9 	.word	0x080076c9
 8007654:	080076fd 	.word	0x080076fd
 8007658:	08007731 	.word	0x08007731
 800765c:	08007765 	.word	0x08007765
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	7c12      	ldrb	r2, [r2, #16]
 8007678:	f107 0108 	add.w	r1, r7, #8
 800767c:	4610      	mov	r0, r2
 800767e:	4798      	blx	r3
 8007680:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007682:	e091      	b.n	80077a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 faaa 	bl	8007be0 <USBD_CtlError>
        err++;
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	3301      	adds	r3, #1
 8007690:	72fb      	strb	r3, [r7, #11]
      break;
 8007692:	e089      	b.n	80077a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	7c12      	ldrb	r2, [r2, #16]
 80076ac:	f107 0108 	add.w	r1, r7, #8
 80076b0:	4610      	mov	r0, r2
 80076b2:	4798      	blx	r3
 80076b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076b6:	e077      	b.n	80077a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fa90 	bl	8007be0 <USBD_CtlError>
        err++;
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	3301      	adds	r3, #1
 80076c4:	72fb      	strb	r3, [r7, #11]
      break;
 80076c6:	e06f      	b.n	80077a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	7c12      	ldrb	r2, [r2, #16]
 80076e0:	f107 0108 	add.w	r1, r7, #8
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076ea:	e05d      	b.n	80077a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fa76 	bl	8007be0 <USBD_CtlError>
        err++;
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	3301      	adds	r3, #1
 80076f8:	72fb      	strb	r3, [r7, #11]
      break;
 80076fa:	e055      	b.n	80077a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7c12      	ldrb	r2, [r2, #16]
 8007714:	f107 0108 	add.w	r1, r7, #8
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800771e:	e043      	b.n	80077a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa5c 	bl	8007be0 <USBD_CtlError>
        err++;
 8007728:	7afb      	ldrb	r3, [r7, #11]
 800772a:	3301      	adds	r3, #1
 800772c:	72fb      	strb	r3, [r7, #11]
      break;
 800772e:	e03b      	b.n	80077a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7c12      	ldrb	r2, [r2, #16]
 8007748:	f107 0108 	add.w	r1, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007752:	e029      	b.n	80077a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa42 	bl	8007be0 <USBD_CtlError>
        err++;
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	3301      	adds	r3, #1
 8007760:	72fb      	strb	r3, [r7, #11]
      break;
 8007762:	e021      	b.n	80077a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007786:	e00f      	b.n	80077a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa28 	bl	8007be0 <USBD_CtlError>
        err++;
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	3301      	adds	r3, #1
 8007794:	72fb      	strb	r3, [r7, #11]
      break;
 8007796:	e007      	b.n	80077a8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa20 	bl	8007be0 <USBD_CtlError>
      err++;
 80077a0:	7afb      	ldrb	r3, [r7, #11]
 80077a2:	3301      	adds	r3, #1
 80077a4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80077a6:	bf00      	nop
    }
    break;
 80077a8:	e037      	b.n	800781a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	7c1b      	ldrb	r3, [r3, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d109      	bne.n	80077c6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ba:	f107 0208 	add.w	r2, r7, #8
 80077be:	4610      	mov	r0, r2
 80077c0:	4798      	blx	r3
 80077c2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80077c4:	e029      	b.n	800781a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fa09 	bl	8007be0 <USBD_CtlError>
      err++;
 80077ce:	7afb      	ldrb	r3, [r7, #11]
 80077d0:	3301      	adds	r3, #1
 80077d2:	72fb      	strb	r3, [r7, #11]
    break;
 80077d4:	e021      	b.n	800781a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	7c1b      	ldrb	r3, [r3, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10d      	bne.n	80077fa <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e6:	f107 0208 	add.w	r2, r7, #8
 80077ea:	4610      	mov	r0, r2
 80077ec:	4798      	blx	r3
 80077ee:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3301      	adds	r3, #1
 80077f4:	2207      	movs	r2, #7
 80077f6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80077f8:	e00f      	b.n	800781a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f9ef 	bl	8007be0 <USBD_CtlError>
      err++;
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	3301      	adds	r3, #1
 8007806:	72fb      	strb	r3, [r7, #11]
    break;
 8007808:	e007      	b.n	800781a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f9e7 	bl	8007be0 <USBD_CtlError>
    err++;
 8007812:	7afb      	ldrb	r3, [r7, #11]
 8007814:	3301      	adds	r3, #1
 8007816:	72fb      	strb	r3, [r7, #11]
    break;
 8007818:	bf00      	nop
  }

  if (err != 0U)
 800781a:	7afb      	ldrb	r3, [r7, #11]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d11e      	bne.n	800785e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	88db      	ldrh	r3, [r3, #6]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d016      	beq.n	8007856 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007828:	893b      	ldrh	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00e      	beq.n	800784c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	88da      	ldrh	r2, [r3, #6]
 8007832:	893b      	ldrh	r3, [r7, #8]
 8007834:	4293      	cmp	r3, r2
 8007836:	bf28      	it	cs
 8007838:	4613      	movcs	r3, r2
 800783a:	b29b      	uxth	r3, r3
 800783c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800783e:	893b      	ldrh	r3, [r7, #8]
 8007840:	461a      	mov	r2, r3
 8007842:	68f9      	ldr	r1, [r7, #12]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fa3c 	bl	8007cc2 <USBD_CtlSendData>
 800784a:	e009      	b.n	8007860 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f9c6 	bl	8007be0 <USBD_CtlError>
 8007854:	e004      	b.n	8007860 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa8d 	bl	8007d76 <USBD_CtlSendStatus>
 800785c:	e000      	b.n	8007860 <USBD_GetDescriptor+0x320>
    return;
 800785e:	bf00      	nop
    }
  }
}
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop

08007868 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	889b      	ldrh	r3, [r3, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d130      	bne.n	80078dc <USBD_SetAddress+0x74>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	88db      	ldrh	r3, [r3, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d12c      	bne.n	80078dc <USBD_SetAddress+0x74>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	885b      	ldrh	r3, [r3, #2]
 8007886:	2b7f      	cmp	r3, #127	; 0x7f
 8007888:	d828      	bhi.n	80078dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	885b      	ldrh	r3, [r3, #2]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007894:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789c:	2b03      	cmp	r3, #3
 800789e:	d104      	bne.n	80078aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f99c 	bl	8007be0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a8:	e01c      	b.n	80078e4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7bfa      	ldrb	r2, [r7, #15]
 80078ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 ff0c 	bl	80086d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fa5a 	bl	8007d76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d004      	beq.n	80078d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2202      	movs	r2, #2
 80078cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d0:	e008      	b.n	80078e4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078da:	e003      	b.n	80078e4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f97e 	bl	8007be0 <USBD_CtlError>
  }
}
 80078e4:	bf00      	nop
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	885b      	ldrh	r3, [r3, #2]
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	4b4b      	ldr	r3, [pc, #300]	; (8007a30 <USBD_SetConfig+0x144>)
 8007902:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007904:	4b4a      	ldr	r3, [pc, #296]	; (8007a30 <USBD_SetConfig+0x144>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d905      	bls.n	8007918 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f966 	bl	8007be0 <USBD_CtlError>
    return USBD_FAIL;
 8007914:	2303      	movs	r3, #3
 8007916:	e087      	b.n	8007a28 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791e:	2b02      	cmp	r3, #2
 8007920:	d002      	beq.n	8007928 <USBD_SetConfig+0x3c>
 8007922:	2b03      	cmp	r3, #3
 8007924:	d025      	beq.n	8007972 <USBD_SetConfig+0x86>
 8007926:	e071      	b.n	8007a0c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007928:	4b41      	ldr	r3, [pc, #260]	; (8007a30 <USBD_SetConfig+0x144>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01c      	beq.n	800796a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007930:	4b3f      	ldr	r3, [pc, #252]	; (8007a30 <USBD_SetConfig+0x144>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	461a      	mov	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800793a:	4b3d      	ldr	r3, [pc, #244]	; (8007a30 <USBD_SetConfig+0x144>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff f9bd 	bl	8006cc0 <USBD_SetClassConfig>
 8007946:	4603      	mov	r3, r0
 8007948:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f944 	bl	8007be0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007958:	e065      	b.n	8007a26 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fa0b 	bl	8007d76 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2203      	movs	r2, #3
 8007964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007968:	e05d      	b.n	8007a26 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa03 	bl	8007d76 <USBD_CtlSendStatus>
    break;
 8007970:	e059      	b.n	8007a26 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007972:	4b2f      	ldr	r3, [pc, #188]	; (8007a30 <USBD_SetConfig+0x144>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d112      	bne.n	80079a0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2202      	movs	r2, #2
 800797e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007982:	4b2b      	ldr	r3, [pc, #172]	; (8007a30 <USBD_SetConfig+0x144>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800798c:	4b28      	ldr	r3, [pc, #160]	; (8007a30 <USBD_SetConfig+0x144>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff f9b0 	bl	8006cf8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f9ec 	bl	8007d76 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800799e:	e042      	b.n	8007a26 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80079a0:	4b23      	ldr	r3, [pc, #140]	; (8007a30 <USBD_SetConfig+0x144>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d02a      	beq.n	8007a04 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff f99e 	bl	8006cf8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80079bc:	4b1c      	ldr	r3, [pc, #112]	; (8007a30 <USBD_SetConfig+0x144>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80079c6:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <USBD_SetConfig+0x144>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff f977 	bl	8006cc0 <USBD_SetClassConfig>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00f      	beq.n	80079fc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f8fe 	bl	8007be0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff f983 	bl	8006cf8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2202      	movs	r2, #2
 80079f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80079fa:	e014      	b.n	8007a26 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f9ba 	bl	8007d76 <USBD_CtlSendStatus>
    break;
 8007a02:	e010      	b.n	8007a26 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f9b6 	bl	8007d76 <USBD_CtlSendStatus>
    break;
 8007a0a:	e00c      	b.n	8007a26 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f8e6 	bl	8007be0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a14:	4b06      	ldr	r3, [pc, #24]	; (8007a30 <USBD_SetConfig+0x144>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff f96c 	bl	8006cf8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007a20:	2303      	movs	r3, #3
 8007a22:	73fb      	strb	r3, [r7, #15]
    break;
 8007a24:	bf00      	nop
  }

  return ret;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000218 	.word	0x20000218

08007a34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	88db      	ldrh	r3, [r3, #6]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d004      	beq.n	8007a50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f8c9 	bl	8007be0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007a4e:	e021      	b.n	8007a94 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	db17      	blt.n	8007a8a <USBD_GetConfig+0x56>
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	dd02      	ble.n	8007a64 <USBD_GetConfig+0x30>
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d00b      	beq.n	8007a7a <USBD_GetConfig+0x46>
 8007a62:	e012      	b.n	8007a8a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3308      	adds	r3, #8
 8007a6e:	2201      	movs	r2, #1
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f925 	bl	8007cc2 <USBD_CtlSendData>
      break;
 8007a78:	e00c      	b.n	8007a94 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	2201      	movs	r2, #1
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f91d 	bl	8007cc2 <USBD_CtlSendData>
      break;
 8007a88:	e004      	b.n	8007a94 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f8a7 	bl	8007be0 <USBD_CtlError>
      break;
 8007a92:	bf00      	nop
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aac:	3b01      	subs	r3, #1
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d81e      	bhi.n	8007af0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	88db      	ldrh	r3, [r3, #6]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d004      	beq.n	8007ac4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f88f 	bl	8007be0 <USBD_CtlError>
      break;
 8007ac2:	e01a      	b.n	8007afa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f043 0202 	orr.w	r2, r3, #2
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	330c      	adds	r3, #12
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f8ea 	bl	8007cc2 <USBD_CtlSendData>
    break;
 8007aee:	e004      	b.n	8007afa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f874 	bl	8007be0 <USBD_CtlError>
    break;
 8007af8:	bf00      	nop
  }
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	885b      	ldrh	r3, [r3, #2]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d106      	bne.n	8007b22 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f92a 	bl	8007d76 <USBD_CtlSendStatus>
  }
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d80b      	bhi.n	8007b58 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	885b      	ldrh	r3, [r3, #2]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d10c      	bne.n	8007b62 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f910 	bl	8007d76 <USBD_CtlSendStatus>
      }
      break;
 8007b56:	e004      	b.n	8007b62 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f840 	bl	8007be0 <USBD_CtlError>
      break;
 8007b60:	e000      	b.n	8007b64 <USBD_ClrFeature+0x3a>
      break;
 8007b62:	bf00      	nop
  }
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	781a      	ldrb	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3301      	adds	r3, #1
 8007b86:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	781a      	ldrb	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	3301      	adds	r3, #1
 8007b94:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff faa8 	bl	80070ec <SWAPBYTE>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f7ff fa9b 	bl	80070ec <SWAPBYTE>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	461a      	mov	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff fa8e 	bl	80070ec <SWAPBYTE>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	80da      	strh	r2, [r3, #6]
}
 8007bd8:	bf00      	nop
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bea:	2180      	movs	r1, #128	; 0x80
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fcd7 	bl	80085a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fcd3 	bl	80085a0 <USBD_LL_StallEP>
}
 8007bfa:	bf00      	nop
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b086      	sub	sp, #24
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	60f8      	str	r0, [r7, #12]
 8007c0a:	60b9      	str	r1, [r7, #8]
 8007c0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d036      	beq.n	8007c86 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c1c:	6938      	ldr	r0, [r7, #16]
 8007c1e:	f000 f836 	bl	8007c8e <USBD_GetLen>
 8007c22:	4603      	mov	r3, r0
 8007c24:	3301      	adds	r3, #1
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	4413      	add	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	7812      	ldrb	r2, [r2, #0]
 8007c3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	4413      	add	r3, r2
 8007c48:	2203      	movs	r2, #3
 8007c4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c52:	e013      	b.n	8007c7c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	4413      	add	r3, r2
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	7812      	ldrb	r2, [r2, #0]
 8007c5e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	3301      	adds	r3, #1
 8007c64:	613b      	str	r3, [r7, #16]
    idx++;
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	4413      	add	r3, r2
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e7      	bne.n	8007c54 <USBD_GetString+0x52>
 8007c84:	e000      	b.n	8007c88 <USBD_GetString+0x86>
    return;
 8007c86:	bf00      	nop
  }
}
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b085      	sub	sp, #20
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c9e:	e005      	b.n	8007cac <USBD_GetLen+0x1e>
  {
    len++;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1f5      	bne.n	8007ca0 <USBD_GetLen+0x12>
  }

  return len;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fd29 	bl	8008740 <USBD_LL_Transmit>

  return USBD_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	2100      	movs	r1, #0
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 fd18 	bl	8008740 <USBD_LL_Transmit>

  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2203      	movs	r2, #3
 8007d2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	2100      	movs	r1, #0
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 fd33 	bl	80087b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	2100      	movs	r1, #0
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 fd22 	bl	80087b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2204      	movs	r2, #4
 8007d82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d86:	2300      	movs	r3, #0
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fcd7 	bl	8008740 <USBD_LL_Transmit>

  return USBD_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2205      	movs	r2, #5
 8007da8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dac:	2300      	movs	r3, #0
 8007dae:	2200      	movs	r2, #0
 8007db0:	2100      	movs	r1, #0
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fcfc 	bl	80087b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4912      	ldr	r1, [pc, #72]	; (8007e14 <MX_USB_DEVICE_Init+0x50>)
 8007dcc:	4812      	ldr	r0, [pc, #72]	; (8007e18 <MX_USB_DEVICE_Init+0x54>)
 8007dce:	f7fe ff09 	bl	8006be4 <USBD_Init>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007dd8:	f7f8 fbb2 	bl	8000540 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ddc:	490f      	ldr	r1, [pc, #60]	; (8007e1c <MX_USB_DEVICE_Init+0x58>)
 8007dde:	480e      	ldr	r0, [pc, #56]	; (8007e18 <MX_USB_DEVICE_Init+0x54>)
 8007de0:	f7fe ff30 	bl	8006c44 <USBD_RegisterClass>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dea:	f7f8 fba9 	bl	8000540 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007dee:	490c      	ldr	r1, [pc, #48]	; (8007e20 <MX_USB_DEVICE_Init+0x5c>)
 8007df0:	4809      	ldr	r0, [pc, #36]	; (8007e18 <MX_USB_DEVICE_Init+0x54>)
 8007df2:	f7fe fe5b 	bl	8006aac <USBD_CDC_RegisterInterface>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007dfc:	f7f8 fba0 	bl	8000540 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e00:	4805      	ldr	r0, [pc, #20]	; (8007e18 <MX_USB_DEVICE_Init+0x54>)
 8007e02:	f7fe ff46 	bl	8006c92 <USBD_Start>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e0c:	f7f8 fb98 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e10:	bf00      	nop
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20000130 	.word	0x20000130
 8007e18:	2000028c 	.word	0x2000028c
 8007e1c:	20000018 	.word	0x20000018
 8007e20:	2000011c 	.word	0x2000011c

08007e24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e28:	2200      	movs	r2, #0
 8007e2a:	4905      	ldr	r1, [pc, #20]	; (8007e40 <CDC_Init_FS+0x1c>)
 8007e2c:	4805      	ldr	r0, [pc, #20]	; (8007e44 <CDC_Init_FS+0x20>)
 8007e2e:	f7fe fe52 	bl	8006ad6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e32:	4905      	ldr	r1, [pc, #20]	; (8007e48 <CDC_Init_FS+0x24>)
 8007e34:	4803      	ldr	r0, [pc, #12]	; (8007e44 <CDC_Init_FS+0x20>)
 8007e36:	f7fe fe67 	bl	8006b08 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20000944 	.word	0x20000944
 8007e44:	2000028c 	.word	0x2000028c
 8007e48:	2000055c 	.word	0x2000055c

08007e4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	71fb      	strb	r3, [r7, #7]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	2b23      	cmp	r3, #35	; 0x23
 8007e70:	d84a      	bhi.n	8007f08 <CDC_Control_FS+0xac>
 8007e72:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <CDC_Control_FS+0x1c>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007f09 	.word	0x08007f09
 8007e7c:	08007f09 	.word	0x08007f09
 8007e80:	08007f09 	.word	0x08007f09
 8007e84:	08007f09 	.word	0x08007f09
 8007e88:	08007f09 	.word	0x08007f09
 8007e8c:	08007f09 	.word	0x08007f09
 8007e90:	08007f09 	.word	0x08007f09
 8007e94:	08007f09 	.word	0x08007f09
 8007e98:	08007f09 	.word	0x08007f09
 8007e9c:	08007f09 	.word	0x08007f09
 8007ea0:	08007f09 	.word	0x08007f09
 8007ea4:	08007f09 	.word	0x08007f09
 8007ea8:	08007f09 	.word	0x08007f09
 8007eac:	08007f09 	.word	0x08007f09
 8007eb0:	08007f09 	.word	0x08007f09
 8007eb4:	08007f09 	.word	0x08007f09
 8007eb8:	08007f09 	.word	0x08007f09
 8007ebc:	08007f09 	.word	0x08007f09
 8007ec0:	08007f09 	.word	0x08007f09
 8007ec4:	08007f09 	.word	0x08007f09
 8007ec8:	08007f09 	.word	0x08007f09
 8007ecc:	08007f09 	.word	0x08007f09
 8007ed0:	08007f09 	.word	0x08007f09
 8007ed4:	08007f09 	.word	0x08007f09
 8007ed8:	08007f09 	.word	0x08007f09
 8007edc:	08007f09 	.word	0x08007f09
 8007ee0:	08007f09 	.word	0x08007f09
 8007ee4:	08007f09 	.word	0x08007f09
 8007ee8:	08007f09 	.word	0x08007f09
 8007eec:	08007f09 	.word	0x08007f09
 8007ef0:	08007f09 	.word	0x08007f09
 8007ef4:	08007f09 	.word	0x08007f09
 8007ef8:	08007f09 	.word	0x08007f09
 8007efc:	08007f09 	.word	0x08007f09
 8007f00:	08007f09 	.word	0x08007f09
 8007f04:	08007f09 	.word	0x08007f09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f08:	bf00      	nop
  }

  return (USBD_OK);
 8007f0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	4805      	ldr	r0, [pc, #20]	; (8007f3c <CDC_Receive_FS+0x24>)
 8007f26:	f7fe fdef 	bl	8006b08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f2a:	4804      	ldr	r0, [pc, #16]	; (8007f3c <CDC_Receive_FS+0x24>)
 8007f2c:	f7fe fe30 	bl	8006b90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	2000028c 	.word	0x2000028c

08007f40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f50:	4b0d      	ldr	r3, [pc, #52]	; (8007f88 <CDC_Transmit_FS+0x48>)
 8007f52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e00b      	b.n	8007f7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f66:	887b      	ldrh	r3, [r7, #2]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	4806      	ldr	r0, [pc, #24]	; (8007f88 <CDC_Transmit_FS+0x48>)
 8007f6e:	f7fe fdb2 	bl	8006ad6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f72:	4805      	ldr	r0, [pc, #20]	; (8007f88 <CDC_Transmit_FS+0x48>)
 8007f74:	f7fe fddc 	bl	8006b30 <USBD_CDC_TransmitPacket>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	2000028c 	.word	0x2000028c

08007f8c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4613      	mov	r3, r2
 8007f98:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
	...

08007fb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	6039      	str	r1, [r7, #0]
 8007fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2212      	movs	r2, #18
 8007fc0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fc2:	4b03      	ldr	r3, [pc, #12]	; (8007fd0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20000150 	.word	0x20000150

08007fd4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	6039      	str	r1, [r7, #0]
 8007fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2204      	movs	r2, #4
 8007fe4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fe6:	4b03      	ldr	r3, [pc, #12]	; (8007ff4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	20000170 	.word	0x20000170

08007ff8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	6039      	str	r1, [r7, #0]
 8008002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d105      	bne.n	8008016 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	4907      	ldr	r1, [pc, #28]	; (800802c <USBD_FS_ProductStrDescriptor+0x34>)
 800800e:	4808      	ldr	r0, [pc, #32]	; (8008030 <USBD_FS_ProductStrDescriptor+0x38>)
 8008010:	f7ff fdf7 	bl	8007c02 <USBD_GetString>
 8008014:	e004      	b.n	8008020 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	4904      	ldr	r1, [pc, #16]	; (800802c <USBD_FS_ProductStrDescriptor+0x34>)
 800801a:	4805      	ldr	r0, [pc, #20]	; (8008030 <USBD_FS_ProductStrDescriptor+0x38>)
 800801c:	f7ff fdf1 	bl	8007c02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008020:	4b02      	ldr	r3, [pc, #8]	; (800802c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000d2c 	.word	0x20000d2c
 8008030:	08009174 	.word	0x08009174

08008034 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	4603      	mov	r3, r0
 800803c:	6039      	str	r1, [r7, #0]
 800803e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	4904      	ldr	r1, [pc, #16]	; (8008054 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008044:	4804      	ldr	r0, [pc, #16]	; (8008058 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008046:	f7ff fddc 	bl	8007c02 <USBD_GetString>
  return USBD_StrDesc;
 800804a:	4b02      	ldr	r3, [pc, #8]	; (8008054 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20000d2c 	.word	0x20000d2c
 8008058:	0800918c 	.word	0x0800918c

0800805c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	6039      	str	r1, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	221a      	movs	r2, #26
 800806c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800806e:	f000 f855 	bl	800811c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008072:	4b02      	ldr	r3, [pc, #8]	; (800807c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20000174 	.word	0x20000174

08008080 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	4603      	mov	r3, r0
 8008088:	6039      	str	r1, [r7, #0]
 800808a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d105      	bne.n	800809e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	4907      	ldr	r1, [pc, #28]	; (80080b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008096:	4808      	ldr	r0, [pc, #32]	; (80080b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008098:	f7ff fdb3 	bl	8007c02 <USBD_GetString>
 800809c:	e004      	b.n	80080a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	4904      	ldr	r1, [pc, #16]	; (80080b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080a2:	4805      	ldr	r0, [pc, #20]	; (80080b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080a4:	f7ff fdad 	bl	8007c02 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080a8:	4b02      	ldr	r3, [pc, #8]	; (80080b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20000d2c 	.word	0x20000d2c
 80080b8:	080091a0 	.word	0x080091a0

080080bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	4603      	mov	r3, r0
 80080c4:	6039      	str	r1, [r7, #0]
 80080c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d105      	bne.n	80080da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	4907      	ldr	r1, [pc, #28]	; (80080f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080d2:	4808      	ldr	r0, [pc, #32]	; (80080f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080d4:	f7ff fd95 	bl	8007c02 <USBD_GetString>
 80080d8:	e004      	b.n	80080e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	4904      	ldr	r1, [pc, #16]	; (80080f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080de:	4805      	ldr	r0, [pc, #20]	; (80080f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080e0:	f7ff fd8f 	bl	8007c02 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080e4:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	20000d2c 	.word	0x20000d2c
 80080f4:	080091ac 	.word	0x080091ac

080080f8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	6039      	str	r1, [r7, #0]
 8008102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	220c      	movs	r2, #12
 8008108:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800810a:	4b03      	ldr	r3, [pc, #12]	; (8008118 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	20000164 	.word	0x20000164

0800811c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008122:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <Get_SerialNum+0x44>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008128:	4b0e      	ldr	r3, [pc, #56]	; (8008164 <Get_SerialNum+0x48>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800812e:	4b0e      	ldr	r3, [pc, #56]	; (8008168 <Get_SerialNum+0x4c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4413      	add	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d009      	beq.n	8008156 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008142:	2208      	movs	r2, #8
 8008144:	4909      	ldr	r1, [pc, #36]	; (800816c <Get_SerialNum+0x50>)
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 f814 	bl	8008174 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800814c:	2204      	movs	r2, #4
 800814e:	4908      	ldr	r1, [pc, #32]	; (8008170 <Get_SerialNum+0x54>)
 8008150:	68b8      	ldr	r0, [r7, #8]
 8008152:	f000 f80f 	bl	8008174 <IntToUnicode>
  }
}
 8008156:	bf00      	nop
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	1fff7590 	.word	0x1fff7590
 8008164:	1fff7594 	.word	0x1fff7594
 8008168:	1fff7598 	.word	0x1fff7598
 800816c:	20000176 	.word	0x20000176
 8008170:	20000186 	.word	0x20000186

08008174 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4613      	mov	r3, r2
 8008180:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]
 800818a:	e027      	b.n	80081dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	0f1b      	lsrs	r3, r3, #28
 8008190:	2b09      	cmp	r3, #9
 8008192:	d80b      	bhi.n	80081ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	0f1b      	lsrs	r3, r3, #28
 8008198:	b2da      	uxtb	r2, r3
 800819a:	7dfb      	ldrb	r3, [r7, #23]
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	4619      	mov	r1, r3
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	440b      	add	r3, r1
 80081a4:	3230      	adds	r2, #48	; 0x30
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	e00a      	b.n	80081c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	0f1b      	lsrs	r3, r3, #28
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	4619      	mov	r1, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	440b      	add	r3, r1
 80081bc:	3237      	adds	r2, #55	; 0x37
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	005b      	lsls	r3, r3, #1
 80081cc:	3301      	adds	r3, #1
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	4413      	add	r3, r2
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
 80081d8:	3301      	adds	r3, #1
 80081da:	75fb      	strb	r3, [r7, #23]
 80081dc:	7dfa      	ldrb	r2, [r7, #23]
 80081de:	79fb      	ldrb	r3, [r7, #7]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d3d3      	bcc.n	800818c <IntToUnicode+0x18>
  }
}
 80081e4:	bf00      	nop
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a0d      	ldr	r2, [pc, #52]	; (8008234 <HAL_PCD_MspInit+0x44>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d113      	bne.n	800822a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008202:	4b0d      	ldr	r3, [pc, #52]	; (8008238 <HAL_PCD_MspInit+0x48>)
 8008204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008206:	4a0c      	ldr	r2, [pc, #48]	; (8008238 <HAL_PCD_MspInit+0x48>)
 8008208:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800820c:	6593      	str	r3, [r2, #88]	; 0x58
 800820e:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <HAL_PCD_MspInit+0x48>)
 8008210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008212:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800821a:	2200      	movs	r2, #0
 800821c:	2100      	movs	r1, #0
 800821e:	2043      	movs	r0, #67	; 0x43
 8008220:	f7f8 fcc7 	bl	8000bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008224:	2043      	movs	r0, #67	; 0x43
 8008226:	f7f8 fce0 	bl	8000bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	40006800 	.word	0x40006800
 8008238:	40021000 	.word	0x40021000

0800823c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008250:	4619      	mov	r1, r3
 8008252:	4610      	mov	r0, r2
 8008254:	f7fe fd68 	bl	8006d28 <USBD_LL_SetupStage>
}
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008272:	78fa      	ldrb	r2, [r7, #3]
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	4613      	mov	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	00db      	lsls	r3, r3, #3
 800827e:	440b      	add	r3, r1
 8008280:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	4619      	mov	r1, r3
 800828a:	f7fe fda0 	bl	8006dce <USBD_LL_DataOutStage>
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	460b      	mov	r3, r1
 80082a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80082a8:	78fa      	ldrb	r2, [r7, #3]
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	440b      	add	r3, r1
 80082b6:	333c      	adds	r3, #60	; 0x3c
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	78fb      	ldrb	r3, [r7, #3]
 80082bc:	4619      	mov	r1, r3
 80082be:	f7fe fde9 	bl	8006e94 <USBD_LL_DataInStage>
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fe feed 	bl	80070b8 <USBD_LL_SOF>
}
 80082de:	bf00      	nop
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082ee:	2301      	movs	r3, #1
 80082f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d001      	beq.n	80082fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80082fa:	f7f8 f921 	bl	8000540 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008304:	7bfa      	ldrb	r2, [r7, #15]
 8008306:	4611      	mov	r1, r2
 8008308:	4618      	mov	r0, r3
 800830a:	f7fe fe9a 	bl	8007042 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008314:	4618      	mov	r0, r3
 8008316:	f7fe fe53 	bl	8006fc0 <USBD_LL_Reset>
}
 800831a:	bf00      	nop
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
	...

08008324 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008332:	4618      	mov	r0, r3
 8008334:	f7fe fe95 	bl	8007062 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008340:	4b04      	ldr	r3, [pc, #16]	; (8008354 <HAL_PCD_SuspendCallback+0x30>)
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	4a03      	ldr	r2, [pc, #12]	; (8008354 <HAL_PCD_SuspendCallback+0x30>)
 8008346:	f043 0306 	orr.w	r3, r3, #6
 800834a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	e000ed00 	.word	0xe000ed00

08008358 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008368:	4b08      	ldr	r3, [pc, #32]	; (800838c <HAL_PCD_ResumeCallback+0x34>)
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	4a07      	ldr	r2, [pc, #28]	; (800838c <HAL_PCD_ResumeCallback+0x34>)
 800836e:	f023 0306 	bic.w	r3, r3, #6
 8008372:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008374:	f000 fa9e 	bl	80088b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe fe84 	bl	800708c <USBD_LL_Resume>
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	e000ed00 	.word	0xe000ed00

08008390 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008398:	f7fa f9d8 	bl	800274c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800839c:	4a2b      	ldr	r2, [pc, #172]	; (800844c <USBD_LL_Init+0xbc>)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a29      	ldr	r2, [pc, #164]	; (800844c <USBD_LL_Init+0xbc>)
 80083a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80083ac:	4b27      	ldr	r3, [pc, #156]	; (800844c <USBD_LL_Init+0xbc>)
 80083ae:	4a28      	ldr	r2, [pc, #160]	; (8008450 <USBD_LL_Init+0xc0>)
 80083b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80083b2:	4b26      	ldr	r3, [pc, #152]	; (800844c <USBD_LL_Init+0xbc>)
 80083b4:	2208      	movs	r2, #8
 80083b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80083b8:	4b24      	ldr	r3, [pc, #144]	; (800844c <USBD_LL_Init+0xbc>)
 80083ba:	2202      	movs	r2, #2
 80083bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083be:	4b23      	ldr	r3, [pc, #140]	; (800844c <USBD_LL_Init+0xbc>)
 80083c0:	2202      	movs	r2, #2
 80083c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80083c4:	4b21      	ldr	r3, [pc, #132]	; (800844c <USBD_LL_Init+0xbc>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80083ca:	4b20      	ldr	r3, [pc, #128]	; (800844c <USBD_LL_Init+0xbc>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80083d0:	4b1e      	ldr	r3, [pc, #120]	; (800844c <USBD_LL_Init+0xbc>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80083d6:	4b1d      	ldr	r3, [pc, #116]	; (800844c <USBD_LL_Init+0xbc>)
 80083d8:	2200      	movs	r2, #0
 80083da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80083dc:	481b      	ldr	r0, [pc, #108]	; (800844c <USBD_LL_Init+0xbc>)
 80083de:	f7f8 fdbb 	bl	8000f58 <HAL_PCD_Init>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80083e8:	f7f8 f8aa 	bl	8000540 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083f2:	2318      	movs	r3, #24
 80083f4:	2200      	movs	r2, #0
 80083f6:	2100      	movs	r1, #0
 80083f8:	f7fa f8d6 	bl	80025a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008402:	2358      	movs	r3, #88	; 0x58
 8008404:	2200      	movs	r2, #0
 8008406:	2180      	movs	r1, #128	; 0x80
 8008408:	f7fa f8ce 	bl	80025a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008412:	23c0      	movs	r3, #192	; 0xc0
 8008414:	2200      	movs	r2, #0
 8008416:	2181      	movs	r1, #129	; 0x81
 8008418:	f7fa f8c6 	bl	80025a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008422:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008426:	2200      	movs	r2, #0
 8008428:	2101      	movs	r1, #1
 800842a:	f7fa f8bd 	bl	80025a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008438:	2200      	movs	r2, #0
 800843a:	2182      	movs	r1, #130	; 0x82
 800843c:	f7fa f8b4 	bl	80025a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20000f2c 	.word	0x20000f2c
 8008450:	40006800 	.word	0x40006800

08008454 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800846a:	4618      	mov	r0, r3
 800846c:	f7f8 fe86 	bl	800117c <HAL_PCD_Start>
 8008470:	4603      	mov	r3, r0
 8008472:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b03      	cmp	r3, #3
 8008478:	d816      	bhi.n	80084a8 <USBD_LL_Start+0x54>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <USBD_LL_Start+0x2c>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	08008491 	.word	0x08008491
 8008484:	08008497 	.word	0x08008497
 8008488:	0800849d 	.word	0x0800849d
 800848c:	080084a3 	.word	0x080084a3
    case HAL_OK :
      usb_status = USBD_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	73fb      	strb	r3, [r7, #15]
    break;
 8008494:	e00b      	b.n	80084ae <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008496:	2303      	movs	r3, #3
 8008498:	73fb      	strb	r3, [r7, #15]
    break;
 800849a:	e008      	b.n	80084ae <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800849c:	2301      	movs	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
    break;
 80084a0:	e005      	b.n	80084ae <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084a2:	2303      	movs	r3, #3
 80084a4:	73fb      	strb	r3, [r7, #15]
    break;
 80084a6:	e002      	b.n	80084ae <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80084a8:	2303      	movs	r3, #3
 80084aa:	73fb      	strb	r3, [r7, #15]
    break;
 80084ac:	bf00      	nop
  }
  return usb_status;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	4608      	mov	r0, r1
 80084c2:	4611      	mov	r1, r2
 80084c4:	461a      	mov	r2, r3
 80084c6:	4603      	mov	r3, r0
 80084c8:	70fb      	strb	r3, [r7, #3]
 80084ca:	460b      	mov	r3, r1
 80084cc:	70bb      	strb	r3, [r7, #2]
 80084ce:	4613      	mov	r3, r2
 80084d0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80084e0:	78bb      	ldrb	r3, [r7, #2]
 80084e2:	883a      	ldrh	r2, [r7, #0]
 80084e4:	78f9      	ldrb	r1, [r7, #3]
 80084e6:	f7f8 ffde 	bl	80014a6 <HAL_PCD_EP_Open>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d817      	bhi.n	8008524 <USBD_LL_OpenEP+0x6c>
 80084f4:	a201      	add	r2, pc, #4	; (adr r2, 80084fc <USBD_LL_OpenEP+0x44>)
 80084f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fa:	bf00      	nop
 80084fc:	0800850d 	.word	0x0800850d
 8008500:	08008513 	.word	0x08008513
 8008504:	08008519 	.word	0x08008519
 8008508:	0800851f 	.word	0x0800851f
    case HAL_OK :
      usb_status = USBD_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]
    break;
 8008510:	e00b      	b.n	800852a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008512:	2303      	movs	r3, #3
 8008514:	73fb      	strb	r3, [r7, #15]
    break;
 8008516:	e008      	b.n	800852a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008518:	2301      	movs	r3, #1
 800851a:	73fb      	strb	r3, [r7, #15]
    break;
 800851c:	e005      	b.n	800852a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800851e:	2303      	movs	r3, #3
 8008520:	73fb      	strb	r3, [r7, #15]
    break;
 8008522:	e002      	b.n	800852a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008524:	2303      	movs	r3, #3
 8008526:	73fb      	strb	r3, [r7, #15]
    break;
 8008528:	bf00      	nop
  }
  return usb_status;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	4611      	mov	r1, r2
 8008552:	4618      	mov	r0, r3
 8008554:	f7f9 f80d 	bl	8001572 <HAL_PCD_EP_Close>
 8008558:	4603      	mov	r3, r0
 800855a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	2b03      	cmp	r3, #3
 8008560:	d816      	bhi.n	8008590 <USBD_LL_CloseEP+0x5c>
 8008562:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <USBD_LL_CloseEP+0x34>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	08008579 	.word	0x08008579
 800856c:	0800857f 	.word	0x0800857f
 8008570:	08008585 	.word	0x08008585
 8008574:	0800858b 	.word	0x0800858b
    case HAL_OK :
      usb_status = USBD_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
    break;
 800857c:	e00b      	b.n	8008596 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800857e:	2303      	movs	r3, #3
 8008580:	73fb      	strb	r3, [r7, #15]
    break;
 8008582:	e008      	b.n	8008596 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008584:	2301      	movs	r3, #1
 8008586:	73fb      	strb	r3, [r7, #15]
    break;
 8008588:	e005      	b.n	8008596 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800858a:	2303      	movs	r3, #3
 800858c:	73fb      	strb	r3, [r7, #15]
    break;
 800858e:	e002      	b.n	8008596 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008590:	2303      	movs	r3, #3
 8008592:	73fb      	strb	r3, [r7, #15]
    break;
 8008594:	bf00      	nop
  }
  return usb_status;
 8008596:	7bfb      	ldrb	r3, [r7, #15]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	4611      	mov	r1, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	f7f9 f8b7 	bl	8001732 <HAL_PCD_EP_SetStall>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d816      	bhi.n	80085fc <USBD_LL_StallEP+0x5c>
 80085ce:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <USBD_LL_StallEP+0x34>)
 80085d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d4:	080085e5 	.word	0x080085e5
 80085d8:	080085eb 	.word	0x080085eb
 80085dc:	080085f1 	.word	0x080085f1
 80085e0:	080085f7 	.word	0x080085f7
    case HAL_OK :
      usb_status = USBD_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]
    break;
 80085e8:	e00b      	b.n	8008602 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085ea:	2303      	movs	r3, #3
 80085ec:	73fb      	strb	r3, [r7, #15]
    break;
 80085ee:	e008      	b.n	8008602 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085f0:	2301      	movs	r3, #1
 80085f2:	73fb      	strb	r3, [r7, #15]
    break;
 80085f4:	e005      	b.n	8008602 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085f6:	2303      	movs	r3, #3
 80085f8:	73fb      	strb	r3, [r7, #15]
    break;
 80085fa:	e002      	b.n	8008602 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80085fc:	2303      	movs	r3, #3
 80085fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008600:	bf00      	nop
  }
  return usb_status;
 8008602:	7bfb      	ldrb	r3, [r7, #15]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008626:	78fa      	ldrb	r2, [r7, #3]
 8008628:	4611      	mov	r1, r2
 800862a:	4618      	mov	r0, r3
 800862c:	f7f9 f8e1 	bl	80017f2 <HAL_PCD_EP_ClrStall>
 8008630:	4603      	mov	r3, r0
 8008632:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	2b03      	cmp	r3, #3
 8008638:	d816      	bhi.n	8008668 <USBD_LL_ClearStallEP+0x5c>
 800863a:	a201      	add	r2, pc, #4	; (adr r2, 8008640 <USBD_LL_ClearStallEP+0x34>)
 800863c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008640:	08008651 	.word	0x08008651
 8008644:	08008657 	.word	0x08008657
 8008648:	0800865d 	.word	0x0800865d
 800864c:	08008663 	.word	0x08008663
    case HAL_OK :
      usb_status = USBD_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	73fb      	strb	r3, [r7, #15]
    break;
 8008654:	e00b      	b.n	800866e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008656:	2303      	movs	r3, #3
 8008658:	73fb      	strb	r3, [r7, #15]
    break;
 800865a:	e008      	b.n	800866e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800865c:	2301      	movs	r3, #1
 800865e:	73fb      	strb	r3, [r7, #15]
    break;
 8008660:	e005      	b.n	800866e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008662:	2303      	movs	r3, #3
 8008664:	73fb      	strb	r3, [r7, #15]
    break;
 8008666:	e002      	b.n	800866e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008668:	2303      	movs	r3, #3
 800866a:	73fb      	strb	r3, [r7, #15]
    break;
 800866c:	bf00      	nop
  }
  return usb_status;
 800866e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800868a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800868c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008690:	2b00      	cmp	r3, #0
 8008692:	da0c      	bge.n	80086ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800869a:	68f9      	ldr	r1, [r7, #12]
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	440b      	add	r3, r1
 80086a8:	3302      	adds	r3, #2
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	e00b      	b.n	80086c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086b4:	68f9      	ldr	r1, [r7, #12]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	440b      	add	r3, r1
 80086c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80086c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
	...

080086d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086ee:	78fa      	ldrb	r2, [r7, #3]
 80086f0:	4611      	mov	r1, r2
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7f8 feb2 	bl	800145c <HAL_PCD_SetAddress>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d816      	bhi.n	8008730 <USBD_LL_SetUSBAddress+0x5c>
 8008702:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <USBD_LL_SetUSBAddress+0x34>)
 8008704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008708:	08008719 	.word	0x08008719
 800870c:	0800871f 	.word	0x0800871f
 8008710:	08008725 	.word	0x08008725
 8008714:	0800872b 	.word	0x0800872b
    case HAL_OK :
      usb_status = USBD_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73fb      	strb	r3, [r7, #15]
    break;
 800871c:	e00b      	b.n	8008736 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800871e:	2303      	movs	r3, #3
 8008720:	73fb      	strb	r3, [r7, #15]
    break;
 8008722:	e008      	b.n	8008736 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008724:	2301      	movs	r3, #1
 8008726:	73fb      	strb	r3, [r7, #15]
    break;
 8008728:	e005      	b.n	8008736 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800872a:	2303      	movs	r3, #3
 800872c:	73fb      	strb	r3, [r7, #15]
    break;
 800872e:	e002      	b.n	8008736 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008730:	2303      	movs	r3, #3
 8008732:	73fb      	strb	r3, [r7, #15]
    break;
 8008734:	bf00      	nop
  }
  return usb_status;
 8008736:	7bfb      	ldrb	r3, [r7, #15]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	607a      	str	r2, [r7, #4]
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	460b      	mov	r3, r1
 800874e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800875e:	7af9      	ldrb	r1, [r7, #11]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	f7f8 ffa2 	bl	80016ac <HAL_PCD_EP_Transmit>
 8008768:	4603      	mov	r3, r0
 800876a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800876c:	7dbb      	ldrb	r3, [r7, #22]
 800876e:	2b03      	cmp	r3, #3
 8008770:	d816      	bhi.n	80087a0 <USBD_LL_Transmit+0x60>
 8008772:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <USBD_LL_Transmit+0x38>)
 8008774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008778:	08008789 	.word	0x08008789
 800877c:	0800878f 	.word	0x0800878f
 8008780:	08008795 	.word	0x08008795
 8008784:	0800879b 	.word	0x0800879b
    case HAL_OK :
      usb_status = USBD_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	75fb      	strb	r3, [r7, #23]
    break;
 800878c:	e00b      	b.n	80087a6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800878e:	2303      	movs	r3, #3
 8008790:	75fb      	strb	r3, [r7, #23]
    break;
 8008792:	e008      	b.n	80087a6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008794:	2301      	movs	r3, #1
 8008796:	75fb      	strb	r3, [r7, #23]
    break;
 8008798:	e005      	b.n	80087a6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800879a:	2303      	movs	r3, #3
 800879c:	75fb      	strb	r3, [r7, #23]
    break;
 800879e:	e002      	b.n	80087a6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80087a0:	2303      	movs	r3, #3
 80087a2:	75fb      	strb	r3, [r7, #23]
    break;
 80087a4:	bf00      	nop
  }
  return usb_status;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	607a      	str	r2, [r7, #4]
 80087ba:	603b      	str	r3, [r7, #0]
 80087bc:	460b      	mov	r3, r1
 80087be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087ce:	7af9      	ldrb	r1, [r7, #11]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	f7f8 ff15 	bl	8001602 <HAL_PCD_EP_Receive>
 80087d8:	4603      	mov	r3, r0
 80087da:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80087dc:	7dbb      	ldrb	r3, [r7, #22]
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d816      	bhi.n	8008810 <USBD_LL_PrepareReceive+0x60>
 80087e2:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <USBD_LL_PrepareReceive+0x38>)
 80087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e8:	080087f9 	.word	0x080087f9
 80087ec:	080087ff 	.word	0x080087ff
 80087f0:	08008805 	.word	0x08008805
 80087f4:	0800880b 	.word	0x0800880b
    case HAL_OK :
      usb_status = USBD_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	75fb      	strb	r3, [r7, #23]
    break;
 80087fc:	e00b      	b.n	8008816 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087fe:	2303      	movs	r3, #3
 8008800:	75fb      	strb	r3, [r7, #23]
    break;
 8008802:	e008      	b.n	8008816 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008804:	2301      	movs	r3, #1
 8008806:	75fb      	strb	r3, [r7, #23]
    break;
 8008808:	e005      	b.n	8008816 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800880a:	2303      	movs	r3, #3
 800880c:	75fb      	strb	r3, [r7, #23]
    break;
 800880e:	e002      	b.n	8008816 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008810:	2303      	movs	r3, #3
 8008812:	75fb      	strb	r3, [r7, #23]
    break;
 8008814:	bf00      	nop
  }
  return usb_status;
 8008816:	7dfb      	ldrb	r3, [r7, #23]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008832:	78fa      	ldrb	r2, [r7, #3]
 8008834:	4611      	mov	r1, r2
 8008836:	4618      	mov	r0, r3
 8008838:	f7f8 ff20 	bl	800167c <HAL_PCD_EP_GetRxCount>
 800883c:	4603      	mov	r3, r0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
	...

08008848 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d002      	beq.n	8008860 <HAL_PCDEx_LPM_Callback+0x18>
 800885a:	2b01      	cmp	r3, #1
 800885c:	d013      	beq.n	8008886 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800885e:	e023      	b.n	80088a8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d007      	beq.n	8008878 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008868:	f000 f824 	bl	80088b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800886c:	4b10      	ldr	r3, [pc, #64]	; (80088b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	4a0f      	ldr	r2, [pc, #60]	; (80088b0 <HAL_PCDEx_LPM_Callback+0x68>)
 8008872:	f023 0306 	bic.w	r3, r3, #6
 8008876:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fc04 	bl	800708c <USBD_LL_Resume>
    break;
 8008884:	e010      	b.n	80088a8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fbe8 	bl	8007062 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800889a:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	4a04      	ldr	r2, [pc, #16]	; (80088b0 <HAL_PCDEx_LPM_Callback+0x68>)
 80088a0:	f043 0306 	orr.w	r3, r3, #6
 80088a4:	6113      	str	r3, [r2, #16]
    break;
 80088a6:	bf00      	nop
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	e000ed00 	.word	0xe000ed00

080088b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80088b8:	f7f7 fd20 	bl	80002fc <SystemClock_Config>
}
 80088bc:	bf00      	nop
 80088be:	bd80      	pop	{r7, pc}

080088c0 <__errno>:
 80088c0:	4b01      	ldr	r3, [pc, #4]	; (80088c8 <__errno+0x8>)
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	20000190 	.word	0x20000190

080088cc <__libc_init_array>:
 80088cc:	b570      	push	{r4, r5, r6, lr}
 80088ce:	4e0d      	ldr	r6, [pc, #52]	; (8008904 <__libc_init_array+0x38>)
 80088d0:	4c0d      	ldr	r4, [pc, #52]	; (8008908 <__libc_init_array+0x3c>)
 80088d2:	1ba4      	subs	r4, r4, r6
 80088d4:	10a4      	asrs	r4, r4, #2
 80088d6:	2500      	movs	r5, #0
 80088d8:	42a5      	cmp	r5, r4
 80088da:	d109      	bne.n	80088f0 <__libc_init_array+0x24>
 80088dc:	4e0b      	ldr	r6, [pc, #44]	; (800890c <__libc_init_array+0x40>)
 80088de:	4c0c      	ldr	r4, [pc, #48]	; (8008910 <__libc_init_array+0x44>)
 80088e0:	f000 fc36 	bl	8009150 <_init>
 80088e4:	1ba4      	subs	r4, r4, r6
 80088e6:	10a4      	asrs	r4, r4, #2
 80088e8:	2500      	movs	r5, #0
 80088ea:	42a5      	cmp	r5, r4
 80088ec:	d105      	bne.n	80088fa <__libc_init_array+0x2e>
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088f4:	4798      	blx	r3
 80088f6:	3501      	adds	r5, #1
 80088f8:	e7ee      	b.n	80088d8 <__libc_init_array+0xc>
 80088fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088fe:	4798      	blx	r3
 8008900:	3501      	adds	r5, #1
 8008902:	e7f2      	b.n	80088ea <__libc_init_array+0x1e>
 8008904:	08009230 	.word	0x08009230
 8008908:	08009230 	.word	0x08009230
 800890c:	08009230 	.word	0x08009230
 8008910:	08009234 	.word	0x08009234

08008914 <malloc>:
 8008914:	4b02      	ldr	r3, [pc, #8]	; (8008920 <malloc+0xc>)
 8008916:	4601      	mov	r1, r0
 8008918:	6818      	ldr	r0, [r3, #0]
 800891a:	f000 b861 	b.w	80089e0 <_malloc_r>
 800891e:	bf00      	nop
 8008920:	20000190 	.word	0x20000190

08008924 <free>:
 8008924:	4b02      	ldr	r3, [pc, #8]	; (8008930 <free+0xc>)
 8008926:	4601      	mov	r1, r0
 8008928:	6818      	ldr	r0, [r3, #0]
 800892a:	f000 b80b 	b.w	8008944 <_free_r>
 800892e:	bf00      	nop
 8008930:	20000190 	.word	0x20000190

08008934 <memset>:
 8008934:	4402      	add	r2, r0
 8008936:	4603      	mov	r3, r0
 8008938:	4293      	cmp	r3, r2
 800893a:	d100      	bne.n	800893e <memset+0xa>
 800893c:	4770      	bx	lr
 800893e:	f803 1b01 	strb.w	r1, [r3], #1
 8008942:	e7f9      	b.n	8008938 <memset+0x4>

08008944 <_free_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4605      	mov	r5, r0
 8008948:	2900      	cmp	r1, #0
 800894a:	d045      	beq.n	80089d8 <_free_r+0x94>
 800894c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008950:	1f0c      	subs	r4, r1, #4
 8008952:	2b00      	cmp	r3, #0
 8008954:	bfb8      	it	lt
 8008956:	18e4      	addlt	r4, r4, r3
 8008958:	f000 f8cc 	bl	8008af4 <__malloc_lock>
 800895c:	4a1f      	ldr	r2, [pc, #124]	; (80089dc <_free_r+0x98>)
 800895e:	6813      	ldr	r3, [r2, #0]
 8008960:	4610      	mov	r0, r2
 8008962:	b933      	cbnz	r3, 8008972 <_free_r+0x2e>
 8008964:	6063      	str	r3, [r4, #4]
 8008966:	6014      	str	r4, [r2, #0]
 8008968:	4628      	mov	r0, r5
 800896a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800896e:	f000 b8c2 	b.w	8008af6 <__malloc_unlock>
 8008972:	42a3      	cmp	r3, r4
 8008974:	d90c      	bls.n	8008990 <_free_r+0x4c>
 8008976:	6821      	ldr	r1, [r4, #0]
 8008978:	1862      	adds	r2, r4, r1
 800897a:	4293      	cmp	r3, r2
 800897c:	bf04      	itt	eq
 800897e:	681a      	ldreq	r2, [r3, #0]
 8008980:	685b      	ldreq	r3, [r3, #4]
 8008982:	6063      	str	r3, [r4, #4]
 8008984:	bf04      	itt	eq
 8008986:	1852      	addeq	r2, r2, r1
 8008988:	6022      	streq	r2, [r4, #0]
 800898a:	6004      	str	r4, [r0, #0]
 800898c:	e7ec      	b.n	8008968 <_free_r+0x24>
 800898e:	4613      	mov	r3, r2
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	b10a      	cbz	r2, 8008998 <_free_r+0x54>
 8008994:	42a2      	cmp	r2, r4
 8008996:	d9fa      	bls.n	800898e <_free_r+0x4a>
 8008998:	6819      	ldr	r1, [r3, #0]
 800899a:	1858      	adds	r0, r3, r1
 800899c:	42a0      	cmp	r0, r4
 800899e:	d10b      	bne.n	80089b8 <_free_r+0x74>
 80089a0:	6820      	ldr	r0, [r4, #0]
 80089a2:	4401      	add	r1, r0
 80089a4:	1858      	adds	r0, r3, r1
 80089a6:	4282      	cmp	r2, r0
 80089a8:	6019      	str	r1, [r3, #0]
 80089aa:	d1dd      	bne.n	8008968 <_free_r+0x24>
 80089ac:	6810      	ldr	r0, [r2, #0]
 80089ae:	6852      	ldr	r2, [r2, #4]
 80089b0:	605a      	str	r2, [r3, #4]
 80089b2:	4401      	add	r1, r0
 80089b4:	6019      	str	r1, [r3, #0]
 80089b6:	e7d7      	b.n	8008968 <_free_r+0x24>
 80089b8:	d902      	bls.n	80089c0 <_free_r+0x7c>
 80089ba:	230c      	movs	r3, #12
 80089bc:	602b      	str	r3, [r5, #0]
 80089be:	e7d3      	b.n	8008968 <_free_r+0x24>
 80089c0:	6820      	ldr	r0, [r4, #0]
 80089c2:	1821      	adds	r1, r4, r0
 80089c4:	428a      	cmp	r2, r1
 80089c6:	bf04      	itt	eq
 80089c8:	6811      	ldreq	r1, [r2, #0]
 80089ca:	6852      	ldreq	r2, [r2, #4]
 80089cc:	6062      	str	r2, [r4, #4]
 80089ce:	bf04      	itt	eq
 80089d0:	1809      	addeq	r1, r1, r0
 80089d2:	6021      	streq	r1, [r4, #0]
 80089d4:	605c      	str	r4, [r3, #4]
 80089d6:	e7c7      	b.n	8008968 <_free_r+0x24>
 80089d8:	bd38      	pop	{r3, r4, r5, pc}
 80089da:	bf00      	nop
 80089dc:	2000021c 	.word	0x2000021c

080089e0 <_malloc_r>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	1ccd      	adds	r5, r1, #3
 80089e4:	f025 0503 	bic.w	r5, r5, #3
 80089e8:	3508      	adds	r5, #8
 80089ea:	2d0c      	cmp	r5, #12
 80089ec:	bf38      	it	cc
 80089ee:	250c      	movcc	r5, #12
 80089f0:	2d00      	cmp	r5, #0
 80089f2:	4606      	mov	r6, r0
 80089f4:	db01      	blt.n	80089fa <_malloc_r+0x1a>
 80089f6:	42a9      	cmp	r1, r5
 80089f8:	d903      	bls.n	8008a02 <_malloc_r+0x22>
 80089fa:	230c      	movs	r3, #12
 80089fc:	6033      	str	r3, [r6, #0]
 80089fe:	2000      	movs	r0, #0
 8008a00:	bd70      	pop	{r4, r5, r6, pc}
 8008a02:	f000 f877 	bl	8008af4 <__malloc_lock>
 8008a06:	4a21      	ldr	r2, [pc, #132]	; (8008a8c <_malloc_r+0xac>)
 8008a08:	6814      	ldr	r4, [r2, #0]
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	b991      	cbnz	r1, 8008a34 <_malloc_r+0x54>
 8008a0e:	4c20      	ldr	r4, [pc, #128]	; (8008a90 <_malloc_r+0xb0>)
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	b91b      	cbnz	r3, 8008a1c <_malloc_r+0x3c>
 8008a14:	4630      	mov	r0, r6
 8008a16:	f000 f83d 	bl	8008a94 <_sbrk_r>
 8008a1a:	6020      	str	r0, [r4, #0]
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f000 f838 	bl	8008a94 <_sbrk_r>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d124      	bne.n	8008a72 <_malloc_r+0x92>
 8008a28:	230c      	movs	r3, #12
 8008a2a:	6033      	str	r3, [r6, #0]
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f000 f862 	bl	8008af6 <__malloc_unlock>
 8008a32:	e7e4      	b.n	80089fe <_malloc_r+0x1e>
 8008a34:	680b      	ldr	r3, [r1, #0]
 8008a36:	1b5b      	subs	r3, r3, r5
 8008a38:	d418      	bmi.n	8008a6c <_malloc_r+0x8c>
 8008a3a:	2b0b      	cmp	r3, #11
 8008a3c:	d90f      	bls.n	8008a5e <_malloc_r+0x7e>
 8008a3e:	600b      	str	r3, [r1, #0]
 8008a40:	50cd      	str	r5, [r1, r3]
 8008a42:	18cc      	adds	r4, r1, r3
 8008a44:	4630      	mov	r0, r6
 8008a46:	f000 f856 	bl	8008af6 <__malloc_unlock>
 8008a4a:	f104 000b 	add.w	r0, r4, #11
 8008a4e:	1d23      	adds	r3, r4, #4
 8008a50:	f020 0007 	bic.w	r0, r0, #7
 8008a54:	1ac3      	subs	r3, r0, r3
 8008a56:	d0d3      	beq.n	8008a00 <_malloc_r+0x20>
 8008a58:	425a      	negs	r2, r3
 8008a5a:	50e2      	str	r2, [r4, r3]
 8008a5c:	e7d0      	b.n	8008a00 <_malloc_r+0x20>
 8008a5e:	428c      	cmp	r4, r1
 8008a60:	684b      	ldr	r3, [r1, #4]
 8008a62:	bf16      	itet	ne
 8008a64:	6063      	strne	r3, [r4, #4]
 8008a66:	6013      	streq	r3, [r2, #0]
 8008a68:	460c      	movne	r4, r1
 8008a6a:	e7eb      	b.n	8008a44 <_malloc_r+0x64>
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	6849      	ldr	r1, [r1, #4]
 8008a70:	e7cc      	b.n	8008a0c <_malloc_r+0x2c>
 8008a72:	1cc4      	adds	r4, r0, #3
 8008a74:	f024 0403 	bic.w	r4, r4, #3
 8008a78:	42a0      	cmp	r0, r4
 8008a7a:	d005      	beq.n	8008a88 <_malloc_r+0xa8>
 8008a7c:	1a21      	subs	r1, r4, r0
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f000 f808 	bl	8008a94 <_sbrk_r>
 8008a84:	3001      	adds	r0, #1
 8008a86:	d0cf      	beq.n	8008a28 <_malloc_r+0x48>
 8008a88:	6025      	str	r5, [r4, #0]
 8008a8a:	e7db      	b.n	8008a44 <_malloc_r+0x64>
 8008a8c:	2000021c 	.word	0x2000021c
 8008a90:	20000220 	.word	0x20000220

08008a94 <_sbrk_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	4c06      	ldr	r4, [pc, #24]	; (8008ab0 <_sbrk_r+0x1c>)
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	6023      	str	r3, [r4, #0]
 8008aa0:	f7f7 fe80 	bl	80007a4 <_sbrk>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_sbrk_r+0x1a>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_sbrk_r+0x1a>
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	20001220 	.word	0x20001220

08008ab4 <siprintf>:
 8008ab4:	b40e      	push	{r1, r2, r3}
 8008ab6:	b500      	push	{lr}
 8008ab8:	b09c      	sub	sp, #112	; 0x70
 8008aba:	ab1d      	add	r3, sp, #116	; 0x74
 8008abc:	9002      	str	r0, [sp, #8]
 8008abe:	9006      	str	r0, [sp, #24]
 8008ac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ac4:	4809      	ldr	r0, [pc, #36]	; (8008aec <siprintf+0x38>)
 8008ac6:	9107      	str	r1, [sp, #28]
 8008ac8:	9104      	str	r1, [sp, #16]
 8008aca:	4909      	ldr	r1, [pc, #36]	; (8008af0 <siprintf+0x3c>)
 8008acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad0:	9105      	str	r1, [sp, #20]
 8008ad2:	6800      	ldr	r0, [r0, #0]
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	a902      	add	r1, sp, #8
 8008ad8:	f000 f868 	bl	8008bac <_svfiprintf_r>
 8008adc:	9b02      	ldr	r3, [sp, #8]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	701a      	strb	r2, [r3, #0]
 8008ae2:	b01c      	add	sp, #112	; 0x70
 8008ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ae8:	b003      	add	sp, #12
 8008aea:	4770      	bx	lr
 8008aec:	20000190 	.word	0x20000190
 8008af0:	ffff0208 	.word	0xffff0208

08008af4 <__malloc_lock>:
 8008af4:	4770      	bx	lr

08008af6 <__malloc_unlock>:
 8008af6:	4770      	bx	lr

08008af8 <__ssputs_r>:
 8008af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	688e      	ldr	r6, [r1, #8]
 8008afe:	429e      	cmp	r6, r3
 8008b00:	4682      	mov	sl, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	4690      	mov	r8, r2
 8008b06:	4699      	mov	r9, r3
 8008b08:	d837      	bhi.n	8008b7a <__ssputs_r+0x82>
 8008b0a:	898a      	ldrh	r2, [r1, #12]
 8008b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b10:	d031      	beq.n	8008b76 <__ssputs_r+0x7e>
 8008b12:	6825      	ldr	r5, [r4, #0]
 8008b14:	6909      	ldr	r1, [r1, #16]
 8008b16:	1a6f      	subs	r7, r5, r1
 8008b18:	6965      	ldr	r5, [r4, #20]
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b20:	fb95 f5f3 	sdiv	r5, r5, r3
 8008b24:	f109 0301 	add.w	r3, r9, #1
 8008b28:	443b      	add	r3, r7
 8008b2a:	429d      	cmp	r5, r3
 8008b2c:	bf38      	it	cc
 8008b2e:	461d      	movcc	r5, r3
 8008b30:	0553      	lsls	r3, r2, #21
 8008b32:	d530      	bpl.n	8008b96 <__ssputs_r+0x9e>
 8008b34:	4629      	mov	r1, r5
 8008b36:	f7ff ff53 	bl	80089e0 <_malloc_r>
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	b950      	cbnz	r0, 8008b54 <__ssputs_r+0x5c>
 8008b3e:	230c      	movs	r3, #12
 8008b40:	f8ca 3000 	str.w	r3, [sl]
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b54:	463a      	mov	r2, r7
 8008b56:	6921      	ldr	r1, [r4, #16]
 8008b58:	f000 faa8 	bl	80090ac <memcpy>
 8008b5c:	89a3      	ldrh	r3, [r4, #12]
 8008b5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b66:	81a3      	strh	r3, [r4, #12]
 8008b68:	6126      	str	r6, [r4, #16]
 8008b6a:	6165      	str	r5, [r4, #20]
 8008b6c:	443e      	add	r6, r7
 8008b6e:	1bed      	subs	r5, r5, r7
 8008b70:	6026      	str	r6, [r4, #0]
 8008b72:	60a5      	str	r5, [r4, #8]
 8008b74:	464e      	mov	r6, r9
 8008b76:	454e      	cmp	r6, r9
 8008b78:	d900      	bls.n	8008b7c <__ssputs_r+0x84>
 8008b7a:	464e      	mov	r6, r9
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	4641      	mov	r1, r8
 8008b80:	6820      	ldr	r0, [r4, #0]
 8008b82:	f000 fa9e 	bl	80090c2 <memmove>
 8008b86:	68a3      	ldr	r3, [r4, #8]
 8008b88:	1b9b      	subs	r3, r3, r6
 8008b8a:	60a3      	str	r3, [r4, #8]
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	441e      	add	r6, r3
 8008b90:	6026      	str	r6, [r4, #0]
 8008b92:	2000      	movs	r0, #0
 8008b94:	e7dc      	b.n	8008b50 <__ssputs_r+0x58>
 8008b96:	462a      	mov	r2, r5
 8008b98:	f000 faac 	bl	80090f4 <_realloc_r>
 8008b9c:	4606      	mov	r6, r0
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d1e2      	bne.n	8008b68 <__ssputs_r+0x70>
 8008ba2:	6921      	ldr	r1, [r4, #16]
 8008ba4:	4650      	mov	r0, sl
 8008ba6:	f7ff fecd 	bl	8008944 <_free_r>
 8008baa:	e7c8      	b.n	8008b3e <__ssputs_r+0x46>

08008bac <_svfiprintf_r>:
 8008bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb0:	461d      	mov	r5, r3
 8008bb2:	898b      	ldrh	r3, [r1, #12]
 8008bb4:	061f      	lsls	r7, r3, #24
 8008bb6:	b09d      	sub	sp, #116	; 0x74
 8008bb8:	4680      	mov	r8, r0
 8008bba:	460c      	mov	r4, r1
 8008bbc:	4616      	mov	r6, r2
 8008bbe:	d50f      	bpl.n	8008be0 <_svfiprintf_r+0x34>
 8008bc0:	690b      	ldr	r3, [r1, #16]
 8008bc2:	b96b      	cbnz	r3, 8008be0 <_svfiprintf_r+0x34>
 8008bc4:	2140      	movs	r1, #64	; 0x40
 8008bc6:	f7ff ff0b 	bl	80089e0 <_malloc_r>
 8008bca:	6020      	str	r0, [r4, #0]
 8008bcc:	6120      	str	r0, [r4, #16]
 8008bce:	b928      	cbnz	r0, 8008bdc <_svfiprintf_r+0x30>
 8008bd0:	230c      	movs	r3, #12
 8008bd2:	f8c8 3000 	str.w	r3, [r8]
 8008bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bda:	e0c8      	b.n	8008d6e <_svfiprintf_r+0x1c2>
 8008bdc:	2340      	movs	r3, #64	; 0x40
 8008bde:	6163      	str	r3, [r4, #20]
 8008be0:	2300      	movs	r3, #0
 8008be2:	9309      	str	r3, [sp, #36]	; 0x24
 8008be4:	2320      	movs	r3, #32
 8008be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bea:	2330      	movs	r3, #48	; 0x30
 8008bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bf0:	9503      	str	r5, [sp, #12]
 8008bf2:	f04f 0b01 	mov.w	fp, #1
 8008bf6:	4637      	mov	r7, r6
 8008bf8:	463d      	mov	r5, r7
 8008bfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008bfe:	b10b      	cbz	r3, 8008c04 <_svfiprintf_r+0x58>
 8008c00:	2b25      	cmp	r3, #37	; 0x25
 8008c02:	d13e      	bne.n	8008c82 <_svfiprintf_r+0xd6>
 8008c04:	ebb7 0a06 	subs.w	sl, r7, r6
 8008c08:	d00b      	beq.n	8008c22 <_svfiprintf_r+0x76>
 8008c0a:	4653      	mov	r3, sl
 8008c0c:	4632      	mov	r2, r6
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4640      	mov	r0, r8
 8008c12:	f7ff ff71 	bl	8008af8 <__ssputs_r>
 8008c16:	3001      	adds	r0, #1
 8008c18:	f000 80a4 	beq.w	8008d64 <_svfiprintf_r+0x1b8>
 8008c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1e:	4453      	add	r3, sl
 8008c20:	9309      	str	r3, [sp, #36]	; 0x24
 8008c22:	783b      	ldrb	r3, [r7, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 809d 	beq.w	8008d64 <_svfiprintf_r+0x1b8>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	9307      	str	r3, [sp, #28]
 8008c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8008c3e:	462f      	mov	r7, r5
 8008c40:	2205      	movs	r2, #5
 8008c42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008c46:	4850      	ldr	r0, [pc, #320]	; (8008d88 <_svfiprintf_r+0x1dc>)
 8008c48:	f7f7 faca 	bl	80001e0 <memchr>
 8008c4c:	9b04      	ldr	r3, [sp, #16]
 8008c4e:	b9d0      	cbnz	r0, 8008c86 <_svfiprintf_r+0xda>
 8008c50:	06d9      	lsls	r1, r3, #27
 8008c52:	bf44      	itt	mi
 8008c54:	2220      	movmi	r2, #32
 8008c56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c5a:	071a      	lsls	r2, r3, #28
 8008c5c:	bf44      	itt	mi
 8008c5e:	222b      	movmi	r2, #43	; 0x2b
 8008c60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c64:	782a      	ldrb	r2, [r5, #0]
 8008c66:	2a2a      	cmp	r2, #42	; 0x2a
 8008c68:	d015      	beq.n	8008c96 <_svfiprintf_r+0xea>
 8008c6a:	9a07      	ldr	r2, [sp, #28]
 8008c6c:	462f      	mov	r7, r5
 8008c6e:	2000      	movs	r0, #0
 8008c70:	250a      	movs	r5, #10
 8008c72:	4639      	mov	r1, r7
 8008c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c78:	3b30      	subs	r3, #48	; 0x30
 8008c7a:	2b09      	cmp	r3, #9
 8008c7c:	d94d      	bls.n	8008d1a <_svfiprintf_r+0x16e>
 8008c7e:	b1b8      	cbz	r0, 8008cb0 <_svfiprintf_r+0x104>
 8008c80:	e00f      	b.n	8008ca2 <_svfiprintf_r+0xf6>
 8008c82:	462f      	mov	r7, r5
 8008c84:	e7b8      	b.n	8008bf8 <_svfiprintf_r+0x4c>
 8008c86:	4a40      	ldr	r2, [pc, #256]	; (8008d88 <_svfiprintf_r+0x1dc>)
 8008c88:	1a80      	subs	r0, r0, r2
 8008c8a:	fa0b f000 	lsl.w	r0, fp, r0
 8008c8e:	4318      	orrs	r0, r3
 8008c90:	9004      	str	r0, [sp, #16]
 8008c92:	463d      	mov	r5, r7
 8008c94:	e7d3      	b.n	8008c3e <_svfiprintf_r+0x92>
 8008c96:	9a03      	ldr	r2, [sp, #12]
 8008c98:	1d11      	adds	r1, r2, #4
 8008c9a:	6812      	ldr	r2, [r2, #0]
 8008c9c:	9103      	str	r1, [sp, #12]
 8008c9e:	2a00      	cmp	r2, #0
 8008ca0:	db01      	blt.n	8008ca6 <_svfiprintf_r+0xfa>
 8008ca2:	9207      	str	r2, [sp, #28]
 8008ca4:	e004      	b.n	8008cb0 <_svfiprintf_r+0x104>
 8008ca6:	4252      	negs	r2, r2
 8008ca8:	f043 0302 	orr.w	r3, r3, #2
 8008cac:	9207      	str	r2, [sp, #28]
 8008cae:	9304      	str	r3, [sp, #16]
 8008cb0:	783b      	ldrb	r3, [r7, #0]
 8008cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8008cb4:	d10c      	bne.n	8008cd0 <_svfiprintf_r+0x124>
 8008cb6:	787b      	ldrb	r3, [r7, #1]
 8008cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008cba:	d133      	bne.n	8008d24 <_svfiprintf_r+0x178>
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	1d1a      	adds	r2, r3, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	9203      	str	r2, [sp, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bfb8      	it	lt
 8008cc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ccc:	3702      	adds	r7, #2
 8008cce:	9305      	str	r3, [sp, #20]
 8008cd0:	4d2e      	ldr	r5, [pc, #184]	; (8008d8c <_svfiprintf_r+0x1e0>)
 8008cd2:	7839      	ldrb	r1, [r7, #0]
 8008cd4:	2203      	movs	r2, #3
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f7f7 fa82 	bl	80001e0 <memchr>
 8008cdc:	b138      	cbz	r0, 8008cee <_svfiprintf_r+0x142>
 8008cde:	2340      	movs	r3, #64	; 0x40
 8008ce0:	1b40      	subs	r0, r0, r5
 8008ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ce6:	9b04      	ldr	r3, [sp, #16]
 8008ce8:	4303      	orrs	r3, r0
 8008cea:	3701      	adds	r7, #1
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	7839      	ldrb	r1, [r7, #0]
 8008cf0:	4827      	ldr	r0, [pc, #156]	; (8008d90 <_svfiprintf_r+0x1e4>)
 8008cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cf6:	2206      	movs	r2, #6
 8008cf8:	1c7e      	adds	r6, r7, #1
 8008cfa:	f7f7 fa71 	bl	80001e0 <memchr>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d038      	beq.n	8008d74 <_svfiprintf_r+0x1c8>
 8008d02:	4b24      	ldr	r3, [pc, #144]	; (8008d94 <_svfiprintf_r+0x1e8>)
 8008d04:	bb13      	cbnz	r3, 8008d4c <_svfiprintf_r+0x1a0>
 8008d06:	9b03      	ldr	r3, [sp, #12]
 8008d08:	3307      	adds	r3, #7
 8008d0a:	f023 0307 	bic.w	r3, r3, #7
 8008d0e:	3308      	adds	r3, #8
 8008d10:	9303      	str	r3, [sp, #12]
 8008d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d14:	444b      	add	r3, r9
 8008d16:	9309      	str	r3, [sp, #36]	; 0x24
 8008d18:	e76d      	b.n	8008bf6 <_svfiprintf_r+0x4a>
 8008d1a:	fb05 3202 	mla	r2, r5, r2, r3
 8008d1e:	2001      	movs	r0, #1
 8008d20:	460f      	mov	r7, r1
 8008d22:	e7a6      	b.n	8008c72 <_svfiprintf_r+0xc6>
 8008d24:	2300      	movs	r3, #0
 8008d26:	3701      	adds	r7, #1
 8008d28:	9305      	str	r3, [sp, #20]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	250a      	movs	r5, #10
 8008d2e:	4638      	mov	r0, r7
 8008d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d34:	3a30      	subs	r2, #48	; 0x30
 8008d36:	2a09      	cmp	r2, #9
 8008d38:	d903      	bls.n	8008d42 <_svfiprintf_r+0x196>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0c8      	beq.n	8008cd0 <_svfiprintf_r+0x124>
 8008d3e:	9105      	str	r1, [sp, #20]
 8008d40:	e7c6      	b.n	8008cd0 <_svfiprintf_r+0x124>
 8008d42:	fb05 2101 	mla	r1, r5, r1, r2
 8008d46:	2301      	movs	r3, #1
 8008d48:	4607      	mov	r7, r0
 8008d4a:	e7f0      	b.n	8008d2e <_svfiprintf_r+0x182>
 8008d4c:	ab03      	add	r3, sp, #12
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	4622      	mov	r2, r4
 8008d52:	4b11      	ldr	r3, [pc, #68]	; (8008d98 <_svfiprintf_r+0x1ec>)
 8008d54:	a904      	add	r1, sp, #16
 8008d56:	4640      	mov	r0, r8
 8008d58:	f3af 8000 	nop.w
 8008d5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008d60:	4681      	mov	r9, r0
 8008d62:	d1d6      	bne.n	8008d12 <_svfiprintf_r+0x166>
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	065b      	lsls	r3, r3, #25
 8008d68:	f53f af35 	bmi.w	8008bd6 <_svfiprintf_r+0x2a>
 8008d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d6e:	b01d      	add	sp, #116	; 0x74
 8008d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d74:	ab03      	add	r3, sp, #12
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	4622      	mov	r2, r4
 8008d7a:	4b07      	ldr	r3, [pc, #28]	; (8008d98 <_svfiprintf_r+0x1ec>)
 8008d7c:	a904      	add	r1, sp, #16
 8008d7e:	4640      	mov	r0, r8
 8008d80:	f000 f882 	bl	8008e88 <_printf_i>
 8008d84:	e7ea      	b.n	8008d5c <_svfiprintf_r+0x1b0>
 8008d86:	bf00      	nop
 8008d88:	080091fc 	.word	0x080091fc
 8008d8c:	08009202 	.word	0x08009202
 8008d90:	08009206 	.word	0x08009206
 8008d94:	00000000 	.word	0x00000000
 8008d98:	08008af9 	.word	0x08008af9

08008d9c <_printf_common>:
 8008d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da0:	4691      	mov	r9, r2
 8008da2:	461f      	mov	r7, r3
 8008da4:	688a      	ldr	r2, [r1, #8]
 8008da6:	690b      	ldr	r3, [r1, #16]
 8008da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dac:	4293      	cmp	r3, r2
 8008dae:	bfb8      	it	lt
 8008db0:	4613      	movlt	r3, r2
 8008db2:	f8c9 3000 	str.w	r3, [r9]
 8008db6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dba:	4606      	mov	r6, r0
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	b112      	cbz	r2, 8008dc6 <_printf_common+0x2a>
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	f8c9 3000 	str.w	r3, [r9]
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	0699      	lsls	r1, r3, #26
 8008dca:	bf42      	ittt	mi
 8008dcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008dd0:	3302      	addmi	r3, #2
 8008dd2:	f8c9 3000 	strmi.w	r3, [r9]
 8008dd6:	6825      	ldr	r5, [r4, #0]
 8008dd8:	f015 0506 	ands.w	r5, r5, #6
 8008ddc:	d107      	bne.n	8008dee <_printf_common+0x52>
 8008dde:	f104 0a19 	add.w	sl, r4, #25
 8008de2:	68e3      	ldr	r3, [r4, #12]
 8008de4:	f8d9 2000 	ldr.w	r2, [r9]
 8008de8:	1a9b      	subs	r3, r3, r2
 8008dea:	42ab      	cmp	r3, r5
 8008dec:	dc28      	bgt.n	8008e40 <_printf_common+0xa4>
 8008dee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008df2:	6822      	ldr	r2, [r4, #0]
 8008df4:	3300      	adds	r3, #0
 8008df6:	bf18      	it	ne
 8008df8:	2301      	movne	r3, #1
 8008dfa:	0692      	lsls	r2, r2, #26
 8008dfc:	d42d      	bmi.n	8008e5a <_printf_common+0xbe>
 8008dfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e02:	4639      	mov	r1, r7
 8008e04:	4630      	mov	r0, r6
 8008e06:	47c0      	blx	r8
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d020      	beq.n	8008e4e <_printf_common+0xb2>
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	68e5      	ldr	r5, [r4, #12]
 8008e10:	f8d9 2000 	ldr.w	r2, [r9]
 8008e14:	f003 0306 	and.w	r3, r3, #6
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	bf08      	it	eq
 8008e1c:	1aad      	subeq	r5, r5, r2
 8008e1e:	68a3      	ldr	r3, [r4, #8]
 8008e20:	6922      	ldr	r2, [r4, #16]
 8008e22:	bf0c      	ite	eq
 8008e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e28:	2500      	movne	r5, #0
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	bfc4      	itt	gt
 8008e2e:	1a9b      	subgt	r3, r3, r2
 8008e30:	18ed      	addgt	r5, r5, r3
 8008e32:	f04f 0900 	mov.w	r9, #0
 8008e36:	341a      	adds	r4, #26
 8008e38:	454d      	cmp	r5, r9
 8008e3a:	d11a      	bne.n	8008e72 <_printf_common+0xd6>
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	e008      	b.n	8008e52 <_printf_common+0xb6>
 8008e40:	2301      	movs	r3, #1
 8008e42:	4652      	mov	r2, sl
 8008e44:	4639      	mov	r1, r7
 8008e46:	4630      	mov	r0, r6
 8008e48:	47c0      	blx	r8
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d103      	bne.n	8008e56 <_printf_common+0xba>
 8008e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e56:	3501      	adds	r5, #1
 8008e58:	e7c3      	b.n	8008de2 <_printf_common+0x46>
 8008e5a:	18e1      	adds	r1, r4, r3
 8008e5c:	1c5a      	adds	r2, r3, #1
 8008e5e:	2030      	movs	r0, #48	; 0x30
 8008e60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e64:	4422      	add	r2, r4
 8008e66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e6e:	3302      	adds	r3, #2
 8008e70:	e7c5      	b.n	8008dfe <_printf_common+0x62>
 8008e72:	2301      	movs	r3, #1
 8008e74:	4622      	mov	r2, r4
 8008e76:	4639      	mov	r1, r7
 8008e78:	4630      	mov	r0, r6
 8008e7a:	47c0      	blx	r8
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	d0e6      	beq.n	8008e4e <_printf_common+0xb2>
 8008e80:	f109 0901 	add.w	r9, r9, #1
 8008e84:	e7d8      	b.n	8008e38 <_printf_common+0x9c>
	...

08008e88 <_printf_i>:
 8008e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008e90:	460c      	mov	r4, r1
 8008e92:	7e09      	ldrb	r1, [r1, #24]
 8008e94:	b085      	sub	sp, #20
 8008e96:	296e      	cmp	r1, #110	; 0x6e
 8008e98:	4617      	mov	r7, r2
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	4698      	mov	r8, r3
 8008e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ea0:	f000 80b3 	beq.w	800900a <_printf_i+0x182>
 8008ea4:	d822      	bhi.n	8008eec <_printf_i+0x64>
 8008ea6:	2963      	cmp	r1, #99	; 0x63
 8008ea8:	d036      	beq.n	8008f18 <_printf_i+0x90>
 8008eaa:	d80a      	bhi.n	8008ec2 <_printf_i+0x3a>
 8008eac:	2900      	cmp	r1, #0
 8008eae:	f000 80b9 	beq.w	8009024 <_printf_i+0x19c>
 8008eb2:	2958      	cmp	r1, #88	; 0x58
 8008eb4:	f000 8083 	beq.w	8008fbe <_printf_i+0x136>
 8008eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ebc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008ec0:	e032      	b.n	8008f28 <_printf_i+0xa0>
 8008ec2:	2964      	cmp	r1, #100	; 0x64
 8008ec4:	d001      	beq.n	8008eca <_printf_i+0x42>
 8008ec6:	2969      	cmp	r1, #105	; 0x69
 8008ec8:	d1f6      	bne.n	8008eb8 <_printf_i+0x30>
 8008eca:	6820      	ldr	r0, [r4, #0]
 8008ecc:	6813      	ldr	r3, [r2, #0]
 8008ece:	0605      	lsls	r5, r0, #24
 8008ed0:	f103 0104 	add.w	r1, r3, #4
 8008ed4:	d52a      	bpl.n	8008f2c <_printf_i+0xa4>
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6011      	str	r1, [r2, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	da03      	bge.n	8008ee6 <_printf_i+0x5e>
 8008ede:	222d      	movs	r2, #45	; 0x2d
 8008ee0:	425b      	negs	r3, r3
 8008ee2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008ee6:	486f      	ldr	r0, [pc, #444]	; (80090a4 <_printf_i+0x21c>)
 8008ee8:	220a      	movs	r2, #10
 8008eea:	e039      	b.n	8008f60 <_printf_i+0xd8>
 8008eec:	2973      	cmp	r1, #115	; 0x73
 8008eee:	f000 809d 	beq.w	800902c <_printf_i+0x1a4>
 8008ef2:	d808      	bhi.n	8008f06 <_printf_i+0x7e>
 8008ef4:	296f      	cmp	r1, #111	; 0x6f
 8008ef6:	d020      	beq.n	8008f3a <_printf_i+0xb2>
 8008ef8:	2970      	cmp	r1, #112	; 0x70
 8008efa:	d1dd      	bne.n	8008eb8 <_printf_i+0x30>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	f043 0320 	orr.w	r3, r3, #32
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	e003      	b.n	8008f0e <_printf_i+0x86>
 8008f06:	2975      	cmp	r1, #117	; 0x75
 8008f08:	d017      	beq.n	8008f3a <_printf_i+0xb2>
 8008f0a:	2978      	cmp	r1, #120	; 0x78
 8008f0c:	d1d4      	bne.n	8008eb8 <_printf_i+0x30>
 8008f0e:	2378      	movs	r3, #120	; 0x78
 8008f10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f14:	4864      	ldr	r0, [pc, #400]	; (80090a8 <_printf_i+0x220>)
 8008f16:	e055      	b.n	8008fc4 <_printf_i+0x13c>
 8008f18:	6813      	ldr	r3, [r2, #0]
 8008f1a:	1d19      	adds	r1, r3, #4
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6011      	str	r1, [r2, #0]
 8008f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e08c      	b.n	8009046 <_printf_i+0x1be>
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6011      	str	r1, [r2, #0]
 8008f30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f34:	bf18      	it	ne
 8008f36:	b21b      	sxthne	r3, r3
 8008f38:	e7cf      	b.n	8008eda <_printf_i+0x52>
 8008f3a:	6813      	ldr	r3, [r2, #0]
 8008f3c:	6825      	ldr	r5, [r4, #0]
 8008f3e:	1d18      	adds	r0, r3, #4
 8008f40:	6010      	str	r0, [r2, #0]
 8008f42:	0628      	lsls	r0, r5, #24
 8008f44:	d501      	bpl.n	8008f4a <_printf_i+0xc2>
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	e002      	b.n	8008f50 <_printf_i+0xc8>
 8008f4a:	0668      	lsls	r0, r5, #25
 8008f4c:	d5fb      	bpl.n	8008f46 <_printf_i+0xbe>
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	4854      	ldr	r0, [pc, #336]	; (80090a4 <_printf_i+0x21c>)
 8008f52:	296f      	cmp	r1, #111	; 0x6f
 8008f54:	bf14      	ite	ne
 8008f56:	220a      	movne	r2, #10
 8008f58:	2208      	moveq	r2, #8
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f60:	6865      	ldr	r5, [r4, #4]
 8008f62:	60a5      	str	r5, [r4, #8]
 8008f64:	2d00      	cmp	r5, #0
 8008f66:	f2c0 8095 	blt.w	8009094 <_printf_i+0x20c>
 8008f6a:	6821      	ldr	r1, [r4, #0]
 8008f6c:	f021 0104 	bic.w	r1, r1, #4
 8008f70:	6021      	str	r1, [r4, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d13d      	bne.n	8008ff2 <_printf_i+0x16a>
 8008f76:	2d00      	cmp	r5, #0
 8008f78:	f040 808e 	bne.w	8009098 <_printf_i+0x210>
 8008f7c:	4665      	mov	r5, ip
 8008f7e:	2a08      	cmp	r2, #8
 8008f80:	d10b      	bne.n	8008f9a <_printf_i+0x112>
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	07db      	lsls	r3, r3, #31
 8008f86:	d508      	bpl.n	8008f9a <_printf_i+0x112>
 8008f88:	6923      	ldr	r3, [r4, #16]
 8008f8a:	6862      	ldr	r2, [r4, #4]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	bfde      	ittt	le
 8008f90:	2330      	movle	r3, #48	; 0x30
 8008f92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f9a:	ebac 0305 	sub.w	r3, ip, r5
 8008f9e:	6123      	str	r3, [r4, #16]
 8008fa0:	f8cd 8000 	str.w	r8, [sp]
 8008fa4:	463b      	mov	r3, r7
 8008fa6:	aa03      	add	r2, sp, #12
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4630      	mov	r0, r6
 8008fac:	f7ff fef6 	bl	8008d9c <_printf_common>
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d14d      	bne.n	8009050 <_printf_i+0x1c8>
 8008fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb8:	b005      	add	sp, #20
 8008fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fbe:	4839      	ldr	r0, [pc, #228]	; (80090a4 <_printf_i+0x21c>)
 8008fc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008fc4:	6813      	ldr	r3, [r2, #0]
 8008fc6:	6821      	ldr	r1, [r4, #0]
 8008fc8:	1d1d      	adds	r5, r3, #4
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6015      	str	r5, [r2, #0]
 8008fce:	060a      	lsls	r2, r1, #24
 8008fd0:	d50b      	bpl.n	8008fea <_printf_i+0x162>
 8008fd2:	07ca      	lsls	r2, r1, #31
 8008fd4:	bf44      	itt	mi
 8008fd6:	f041 0120 	orrmi.w	r1, r1, #32
 8008fda:	6021      	strmi	r1, [r4, #0]
 8008fdc:	b91b      	cbnz	r3, 8008fe6 <_printf_i+0x15e>
 8008fde:	6822      	ldr	r2, [r4, #0]
 8008fe0:	f022 0220 	bic.w	r2, r2, #32
 8008fe4:	6022      	str	r2, [r4, #0]
 8008fe6:	2210      	movs	r2, #16
 8008fe8:	e7b7      	b.n	8008f5a <_printf_i+0xd2>
 8008fea:	064d      	lsls	r5, r1, #25
 8008fec:	bf48      	it	mi
 8008fee:	b29b      	uxthmi	r3, r3
 8008ff0:	e7ef      	b.n	8008fd2 <_printf_i+0x14a>
 8008ff2:	4665      	mov	r5, ip
 8008ff4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ff8:	fb02 3311 	mls	r3, r2, r1, r3
 8008ffc:	5cc3      	ldrb	r3, [r0, r3]
 8008ffe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009002:	460b      	mov	r3, r1
 8009004:	2900      	cmp	r1, #0
 8009006:	d1f5      	bne.n	8008ff4 <_printf_i+0x16c>
 8009008:	e7b9      	b.n	8008f7e <_printf_i+0xf6>
 800900a:	6813      	ldr	r3, [r2, #0]
 800900c:	6825      	ldr	r5, [r4, #0]
 800900e:	6961      	ldr	r1, [r4, #20]
 8009010:	1d18      	adds	r0, r3, #4
 8009012:	6010      	str	r0, [r2, #0]
 8009014:	0628      	lsls	r0, r5, #24
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	d501      	bpl.n	800901e <_printf_i+0x196>
 800901a:	6019      	str	r1, [r3, #0]
 800901c:	e002      	b.n	8009024 <_printf_i+0x19c>
 800901e:	066a      	lsls	r2, r5, #25
 8009020:	d5fb      	bpl.n	800901a <_printf_i+0x192>
 8009022:	8019      	strh	r1, [r3, #0]
 8009024:	2300      	movs	r3, #0
 8009026:	6123      	str	r3, [r4, #16]
 8009028:	4665      	mov	r5, ip
 800902a:	e7b9      	b.n	8008fa0 <_printf_i+0x118>
 800902c:	6813      	ldr	r3, [r2, #0]
 800902e:	1d19      	adds	r1, r3, #4
 8009030:	6011      	str	r1, [r2, #0]
 8009032:	681d      	ldr	r5, [r3, #0]
 8009034:	6862      	ldr	r2, [r4, #4]
 8009036:	2100      	movs	r1, #0
 8009038:	4628      	mov	r0, r5
 800903a:	f7f7 f8d1 	bl	80001e0 <memchr>
 800903e:	b108      	cbz	r0, 8009044 <_printf_i+0x1bc>
 8009040:	1b40      	subs	r0, r0, r5
 8009042:	6060      	str	r0, [r4, #4]
 8009044:	6863      	ldr	r3, [r4, #4]
 8009046:	6123      	str	r3, [r4, #16]
 8009048:	2300      	movs	r3, #0
 800904a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800904e:	e7a7      	b.n	8008fa0 <_printf_i+0x118>
 8009050:	6923      	ldr	r3, [r4, #16]
 8009052:	462a      	mov	r2, r5
 8009054:	4639      	mov	r1, r7
 8009056:	4630      	mov	r0, r6
 8009058:	47c0      	blx	r8
 800905a:	3001      	adds	r0, #1
 800905c:	d0aa      	beq.n	8008fb4 <_printf_i+0x12c>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	079b      	lsls	r3, r3, #30
 8009062:	d413      	bmi.n	800908c <_printf_i+0x204>
 8009064:	68e0      	ldr	r0, [r4, #12]
 8009066:	9b03      	ldr	r3, [sp, #12]
 8009068:	4298      	cmp	r0, r3
 800906a:	bfb8      	it	lt
 800906c:	4618      	movlt	r0, r3
 800906e:	e7a3      	b.n	8008fb8 <_printf_i+0x130>
 8009070:	2301      	movs	r3, #1
 8009072:	464a      	mov	r2, r9
 8009074:	4639      	mov	r1, r7
 8009076:	4630      	mov	r0, r6
 8009078:	47c0      	blx	r8
 800907a:	3001      	adds	r0, #1
 800907c:	d09a      	beq.n	8008fb4 <_printf_i+0x12c>
 800907e:	3501      	adds	r5, #1
 8009080:	68e3      	ldr	r3, [r4, #12]
 8009082:	9a03      	ldr	r2, [sp, #12]
 8009084:	1a9b      	subs	r3, r3, r2
 8009086:	42ab      	cmp	r3, r5
 8009088:	dcf2      	bgt.n	8009070 <_printf_i+0x1e8>
 800908a:	e7eb      	b.n	8009064 <_printf_i+0x1dc>
 800908c:	2500      	movs	r5, #0
 800908e:	f104 0919 	add.w	r9, r4, #25
 8009092:	e7f5      	b.n	8009080 <_printf_i+0x1f8>
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1ac      	bne.n	8008ff2 <_printf_i+0x16a>
 8009098:	7803      	ldrb	r3, [r0, #0]
 800909a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800909e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090a2:	e76c      	b.n	8008f7e <_printf_i+0xf6>
 80090a4:	0800920d 	.word	0x0800920d
 80090a8:	0800921e 	.word	0x0800921e

080090ac <memcpy>:
 80090ac:	b510      	push	{r4, lr}
 80090ae:	1e43      	subs	r3, r0, #1
 80090b0:	440a      	add	r2, r1
 80090b2:	4291      	cmp	r1, r2
 80090b4:	d100      	bne.n	80090b8 <memcpy+0xc>
 80090b6:	bd10      	pop	{r4, pc}
 80090b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090c0:	e7f7      	b.n	80090b2 <memcpy+0x6>

080090c2 <memmove>:
 80090c2:	4288      	cmp	r0, r1
 80090c4:	b510      	push	{r4, lr}
 80090c6:	eb01 0302 	add.w	r3, r1, r2
 80090ca:	d807      	bhi.n	80090dc <memmove+0x1a>
 80090cc:	1e42      	subs	r2, r0, #1
 80090ce:	4299      	cmp	r1, r3
 80090d0:	d00a      	beq.n	80090e8 <memmove+0x26>
 80090d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80090da:	e7f8      	b.n	80090ce <memmove+0xc>
 80090dc:	4283      	cmp	r3, r0
 80090de:	d9f5      	bls.n	80090cc <memmove+0xa>
 80090e0:	1881      	adds	r1, r0, r2
 80090e2:	1ad2      	subs	r2, r2, r3
 80090e4:	42d3      	cmn	r3, r2
 80090e6:	d100      	bne.n	80090ea <memmove+0x28>
 80090e8:	bd10      	pop	{r4, pc}
 80090ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090ee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80090f2:	e7f7      	b.n	80090e4 <memmove+0x22>

080090f4 <_realloc_r>:
 80090f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f6:	4607      	mov	r7, r0
 80090f8:	4614      	mov	r4, r2
 80090fa:	460e      	mov	r6, r1
 80090fc:	b921      	cbnz	r1, 8009108 <_realloc_r+0x14>
 80090fe:	4611      	mov	r1, r2
 8009100:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009104:	f7ff bc6c 	b.w	80089e0 <_malloc_r>
 8009108:	b922      	cbnz	r2, 8009114 <_realloc_r+0x20>
 800910a:	f7ff fc1b 	bl	8008944 <_free_r>
 800910e:	4625      	mov	r5, r4
 8009110:	4628      	mov	r0, r5
 8009112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009114:	f000 f814 	bl	8009140 <_malloc_usable_size_r>
 8009118:	42a0      	cmp	r0, r4
 800911a:	d20f      	bcs.n	800913c <_realloc_r+0x48>
 800911c:	4621      	mov	r1, r4
 800911e:	4638      	mov	r0, r7
 8009120:	f7ff fc5e 	bl	80089e0 <_malloc_r>
 8009124:	4605      	mov	r5, r0
 8009126:	2800      	cmp	r0, #0
 8009128:	d0f2      	beq.n	8009110 <_realloc_r+0x1c>
 800912a:	4631      	mov	r1, r6
 800912c:	4622      	mov	r2, r4
 800912e:	f7ff ffbd 	bl	80090ac <memcpy>
 8009132:	4631      	mov	r1, r6
 8009134:	4638      	mov	r0, r7
 8009136:	f7ff fc05 	bl	8008944 <_free_r>
 800913a:	e7e9      	b.n	8009110 <_realloc_r+0x1c>
 800913c:	4635      	mov	r5, r6
 800913e:	e7e7      	b.n	8009110 <_realloc_r+0x1c>

08009140 <_malloc_usable_size_r>:
 8009140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009144:	1f18      	subs	r0, r3, #4
 8009146:	2b00      	cmp	r3, #0
 8009148:	bfbc      	itt	lt
 800914a:	580b      	ldrlt	r3, [r1, r0]
 800914c:	18c0      	addlt	r0, r0, r3
 800914e:	4770      	bx	lr

08009150 <_init>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	bf00      	nop
 8009154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009156:	bc08      	pop	{r3}
 8009158:	469e      	mov	lr, r3
 800915a:	4770      	bx	lr

0800915c <_fini>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	bf00      	nop
 8009160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009162:	bc08      	pop	{r3}
 8009164:	469e      	mov	lr, r3
 8009166:	4770      	bx	lr
